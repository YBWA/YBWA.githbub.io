<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>几题</title>
    <link href="/7d307027/"/>
    <url>/7d307027/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="3fc8cf37e5d2f37e35f3df5f7949de69f02df47ca6f4e50ae4ee2a619c54715a"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">hzg 的儿子是？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>dp</tag>
      
      <tag>斜率优化</tag>
      
      <tag>树</tag>
      
      <tag>二项式反演</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LOJ502 题解</title>
    <link href="/bcddf599/"/>
    <url>/bcddf599/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://loj.ac/p/502">link</a></p><p>给定一棵有根树，每个点有颜色，每次加一个叶子，询问叶子到根的路径是不是所有颜色出现次数都是 <script type="math/tex">3</script> 的倍数，不是的话再问是不是只有一个颜色不是 <script type="math/tex">3</script> 的倍数，是的话输出这个颜色。</p><p><script type="math/tex">n \le 10^6</script>，<script type="math/tex">m\le 2\times 10^6</script>。</p></blockquote><p>考虑如果是 <script type="math/tex">2</script> 的倍数，那么可以给每个颜色随机一个权值然后维护到根每个叶子的异或和，异或和为 <script type="math/tex">0</script> 代表出现次数都是偶数，否则可以进行一个希的哈，查询是否存在这个异或值对应的颜色。</p><p>然后考虑 <script type="math/tex">3</script> 的倍数，我们需要一个类似二进制异或的运算，连续三次与自己运算变为 <script type="math/tex">0</script>。类比异或不难想到<strong>三进制不进位加法。</strong>然后这题就做完了，算法的大致流程是：</p><ul><li>对于每个颜色随机一个三进制值，并把这个值放入哈希表；</li><li>每插入一个叶子，计算出它到根的三进制不进位加法值；</li><li>如果为 <script type="math/tex">0</script> 输出则所有颜色都是 <script type="math/tex">3</script> 的倍数；</li><li>否则查询哈希表，寻找是否有匹配的颜色。</li></ul><p>这题卡空间，哈希需要链表实现<del>差评</del>，具体实现还参考了<a href="https://loj.ac/d/50">官方题解</a>，哪里也有随机化概率的具体计算和证明。</p><p>还有一个小 TIP：正常的 <code>rand()</code> 只能生成 <script type="math/tex">[0,32768]</script> 的随机数，有时候需要较大的随机数非常麻烦。从 <code>c++11</code> 开始提供了一个叫 <code>mt19937</code> 的随机数，比 <code>rand()</code> 快更随机还大。简单的用法：<br><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function">mt19937 <span class="hljs-title">rd</span><span class="hljs-params">(time(<span class="hljs-number">0</span>))</span></span>; <span class="hljs-comment">// 定义和播种</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">mt19937 范围是 unsigned int</span><br><span class="hljs-comment">mt19937_64 更大，unsigned long long</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">int</span> foo = <span class="hljs-built_in">rd</span>(); <span class="hljs-comment">// 生成随机数</span><br><span class="hljs-comment">/*=============================*/</span><br>uniform_int_distribution&lt;<span class="hljs-keyword">int</span>&gt;<span class="hljs-built_in">dist</span>(<span class="hljs-number">1</span>, n);<br><span class="hljs-keyword">int</span> foo = <span class="hljs-built_in">dist</span>(rd); <span class="hljs-comment">// 生成 [1,n] 的随机数</span><br></code></pre></div></td></tr></table></figure></p><p>激动人心的代码时间~</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> ull unsigned long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = x * <span class="hljs-number">10</span> + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 2000005</span><br><span class="hljs-keyword">int</span> n, m;<br>ull hs[N], val[M];<br><span class="hljs-function">mt19937_64 <span class="hljs-title">rd</span><span class="hljs-params">(time(<span class="hljs-number">0</span>))</span></span>;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">trinum</span> &#123;</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">2188</span>][<span class="hljs-number">2188</span>];<br><span class="hljs-built_in">trinum</span>() &#123; <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2187</span>; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">2187</span>; j ++) &#123;<br><span class="hljs-keyword">int</span> x = i, y = j, v = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">7</span>; k ++) &#123;<br><span class="hljs-keyword">int</span> t = (x % <span class="hljs-number">3</span> + y % <span class="hljs-number">3</span>) % <span class="hljs-number">3</span>;<br>a[i][j] += t * v, x /= <span class="hljs-number">3</span>, y /= <span class="hljs-number">3</span>, v *= <span class="hljs-number">3</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function">ull <span class="hljs-title">ran</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> <span class="hljs-built_in">rd</span>() % <span class="hljs-number">12157665459056928801ull</span>; &#125;<br><span class="hljs-function">ull <span class="hljs-title">tor</span><span class="hljs-params">(ull x, ull y)</span> <span class="hljs-keyword">const</span> </span>&#123;<br>ull r = <span class="hljs-number">0</span>, v = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i ++) &#123;<br>r += a[x % <span class="hljs-number">2187</span>][y % <span class="hljs-number">2187</span>] * v;<br>x /= <span class="hljs-number">2187</span>, y /= <span class="hljs-number">2187</span>, v *= <span class="hljs-number">2187</span>;<br>&#125;<br><span class="hljs-keyword">return</span> r;<br>&#125;<br>&#125; trin;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">hash</span> &#123;</span><br><span class="hljs-keyword">int</span> a[M], nex[M], hed[M], tot, m; ull v[M];<br><span class="hljs-built_in">hash</span>() : <span class="hljs-built_in">m</span>(<span class="hljs-number">1999993</span>), <span class="hljs-built_in">tot</span>(<span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">memset</span>(hed, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> hed);<br><span class="hljs-built_in">memset</span>(nex, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> nex);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(ull x, <span class="hljs-keyword">int</span> i)</span> </span>&#123;<br>a[++ tot] = i;<br>v[tot] = x;<br>nex[tot] = hed[x % m];<br>hed[x % m] = tot;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">ask</span><span class="hljs-params">(ull x)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hed[x % m]; i; i = nex[i]) &#123;<br><span class="hljs-keyword">if</span> (v[i] == x) <span class="hljs-keyword">return</span> a[i];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-2</span>;<br>&#125;<br>&#125; hat;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">srand</span>(<span class="hljs-built_in">time</span>(<span class="hljs-literal">NULL</span>));<br>n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>hs[i] = trin.<span class="hljs-built_in">ran</span>();<br>hat.<span class="hljs-built_in">add</span>(hs[i], i);<br>hat.<span class="hljs-built_in">add</span>(trin.<span class="hljs-built_in">tor</span>(hs[i], hs[i]), i);<br>&#125;<br>val[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, la = <span class="hljs-number">0</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">int</span> u = <span class="hljs-built_in">read</span>() ^ la, fa = <span class="hljs-built_in">read</span>() ^ la;<br>val[i] = trin.<span class="hljs-built_in">tor</span>(hs[u], val[fa]);<br>la = val[i] ? hat.<span class="hljs-built_in">ask</span>(val[i]) : <span class="hljs-number">-1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, la);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>哈希</tag>
      
      <tag>随机化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>希沃白板 の 弔图们</title>
    <link href="/93d9d0d9/"/>
    <url>/93d9d0d9/</url>
    
    <content type="html"><![CDATA[<p>如题，感谢 cdx/fsz/cqh 提供图片来源。</p><p><img src="/img/19.png" alt=""></p><p><img src="/img/20.png" alt=""></p><p><img src="/img/21.png" alt=""></p><p><img src="/img/22.png" alt=""></p><p><img src="/img/23.png" alt=""></p><p><img src="/img/24.png" alt=""></p><p><img src="/img/25.jpg" alt=""></p>]]></content>
    
    
    <categories>
      
      <category>水</category>
      
    </categories>
    
    
    <tags>
      
      <tag>水</tag>
      
      <tag>逆天</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合数学</title>
    <link href="/7ff86023/"/>
    <url>/7ff86023/</url>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="Oh, this is an invalid password. Check and try again, please." data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="b1f46f56c701a77c0bd71daa5ee540d0a49d69fcadaccff3bc31870821fd6fc5"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">o2 的真名是？</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>计数</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSPS2 考前复习</title>
    <link href="/f09f7889/"/>
    <url>/f09f7889/</url>
    
    <content type="html"><![CDATA[<p>对着 OIWIKI 复习一遍。</p><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><p>到考场在 dev 添加 <code>-std=c++14 -O2</code>。</p><h3 id="读入优化"><a href="#读入优化" class="headerlink" title="读入优化"></a>读入优化</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = x * <span class="hljs-number">10</span> + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果前面有负号，隔着一段是数字的话这个板子会出错。</p><h3 id="对拍"><a href="#对拍" class="headerlink" title="对拍"></a>对拍</h3><p>遇到那种能看出来很容易挂分的题，或是时间充裕<strong>一定要对拍！！！</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">// make data</span><br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;t1 &lt; in &gt; out1&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;t2 &lt; in &gt; out2&quot;</span>);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;fc a.out b.out /W&quot;</span>)) &#123;<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>); <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h3><h4 id="枚举全排列"><a href="#枚举全排列" class="headerlink" title="枚举全排列"></a>枚举全排列</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) a[i] = i;<br><span class="hljs-keyword">do</span> &#123;<br><br>&#125; <span class="hljs-keyword">while</span> (<span class="hljs-built_in">next_permutation</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>));<br></code></pre></div></td></tr></table></figure><h4 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h4><p><code>string</code> 转 <code>char[]</code> ：成员函数 <code>c_str()</code></p><p><code>char[]</code> 转 <code>string</code>：重载了 <code>=</code> 运算符</p><h4 id="重载运算符"><a href="#重载运算符" class="headerlink" title="重载运算符"></a>重载运算符</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> node &amp;b) <span class="hljs-keyword">const</span> &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="Lambda"><a href="#Lambda" class="headerlink" title="Lambda"></a>Lambda</h4><p>Lambda 写全局似乎会莫名 CE。</p><p>尽量少用。</p><h3 id="二分"><a href="#二分" class="headerlink" title="二分"></a>二分</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = INF;<br><span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br><span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">check</span>(mid) ? res = mid, l = mid - <span class="hljs-number">1</span> : r = mid + <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-comment">// res 就是答案</span><br></code></pre></div></td></tr></table></figure><p><code>lower_bound</code> 大于等于。</p><p><code>upper_bound</code>大于。</p><h3 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h3><p>01 完全多重 现推。</p><p>二维费用就开两维的状态。</p><p>混合判断一下物品类型用各自的转移。</p><p>分组对组做 01，要先枚举组再枚举背包大小再枚举 组内物品。</p><p>方案数记录转移就行。</p><h3 id="枚举二进制子集"><a href="#枚举二进制子集" class="headerlink" title="枚举二进制子集"></a>枚举二进制子集</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i; j; j = (j - <span class="hljs-number">1</span>) &amp; i) &#123;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="DDP"><a href="#DDP" class="headerlink" title="DDP"></a>DDP</h3><p>乘变加，加变 max。</p><h3 id="概率期望"><a href="#概率期望" class="headerlink" title="概率期望"></a>概率期望</h3><ul><li>期望等于值乘概率</li><li>期望的线性性质</li></ul><h3 id="四边形不等式"><a href="#四边形不等式" class="headerlink" title="四边形不等式"></a>四边形不等式</h3><p>相交大于包含。</p><p>分治，类似莫队。</p><h3 id="字符串-1"><a href="#字符串-1" class="headerlink" title="字符串"></a>字符串</h3><p>字符串下标从 1 开始。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, j = <span class="hljs-number">0</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">while</span> (j &amp;&amp; s[j + <span class="hljs-number">1</span>] != s[i]) j = nex[i];<br>    <span class="hljs-keyword">if</span> (s[j + <span class="hljs-number">1</span>] == s[i]) j ++; nex[i] = j;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果真的遇到了 Z 函数马拉车直接二分哈希。有时间的话尽量写双哈希。</p><h3 id="快速幂"><a href="#快速幂" class="headerlink" title="快速幂"></a>快速幂</h3><p>先把底数取个模。</p><h3 id="exgcd"><a href="#exgcd" class="headerlink" title="exgcd"></a>exgcd</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span> </span>&#123;<br>  <span class="hljs-keyword">if</span> (!b) &#123; x = <span class="hljs-number">1</span>; y = <span class="hljs-number">0</span>; <span class="hljs-keyword">return</span> a;  &#125;<br>  <span class="hljs-keyword">int</span> d = <span class="hljs-built_in">Exgcd</span>(b, a % b, x, y);<br>  <span class="hljs-keyword">int</span> t = x; x = y; y = t - (a / b) * y;<br>  <span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="数论分块"><a href="#数论分块" class="headerlink" title="数论分块"></a>数论分块</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">1</span>, r = <span class="hljs-number">0</span>; l &lt;= n; l = r + <span class="hljs-number">1</span>) &#123;<br>r = n / (n / l);<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="欧拉函数"><a href="#欧拉函数" class="headerlink" title="欧拉函数"></a>欧拉函数</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++) &#123;<br><span class="hljs-keyword">if</span> (!vis[i]) phi[i] = i - <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (j is prime) &#123;<br>        <span class="hljs-keyword">if</span> (i % j == <span class="hljs-number">0</span>) &#123;<br>            phi[i * j] = phi[i] * j;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>            phi[i * j] = phi[i] * (j - <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><script type="math/tex; mode=display">n = \sum_{d \mid n} \varphi(d)=n</script><h4 id="求单个欧拉函数"><a href="#求单个欧拉函数" class="headerlink" title="求单个欧拉函数"></a>求单个欧拉函数</h4><script type="math/tex; mode=display">\varphi(n) = n \times \prod _{i=1}^s \frac{p_i-1}{p_i}</script><h4 id="扩欧"><a href="#扩欧" class="headerlink" title="扩欧"></a>扩欧</h4><p>gcd 不是 1 并且大于 <script type="math/tex">\varphi</script> 就模完加 <script type="math/tex">\varphi</script>。</p><hr><p>数论其余部分暂时放一下罢。</p><h4 id="卡特兰数"><a href="#卡特兰数" class="headerlink" title="卡特兰数"></a>卡特兰数</h4><script type="math/tex; mode=display">\binom{2n}{n}-\binom{2n}{n-1}</script><p>反射原理。</p><h4 id="线性基"><a href="#线性基" class="headerlink" title="线性基"></a>线性基</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">32</span>; i &gt;= <span class="hljs-number">0</span>; i --) &#123;<br><span class="hljs-keyword">if</span> (!(x &gt;&gt; i &amp; <span class="hljs-number">1</span>)) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">if</span> (a[x]) x ^= a[x];<br>        <span class="hljs-keyword">else</span> &#123; a[x] = x; <span class="hljs-keyword">break</span>; &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h3><h4 id="非严格次小生成树"><a href="#非严格次小生成树" class="headerlink" title="非严格次小生成树"></a>非严格次小生成树</h4><p>在最小生成树的路径上找最大值替换。</p><h4 id="严格次小生成树"><a href="#严格次小生成树" class="headerlink" title="严格次小生成树"></a>严格次小生成树</h4><p>倍增时维护最大值和严格次大值。</p><h4 id="瓶颈生成树"><a href="#瓶颈生成树" class="headerlink" title="瓶颈生成树"></a>瓶颈生成树</h4><p>边权最大值最小的生成树。</p><p>最小生成树一定是瓶颈生成树。但不必要。</p><h4 id="Kruskal-重构树"><a href="#Kruskal-重构树" class="headerlink" title="Kruskal 重构树"></a>Kruskal 重构树</h4><p>原图两点路径最大边权的最小值 = 重构树上 LCA 的点权。</p><h4 id="Prim"><a href="#Prim" class="headerlink" title="Prim"></a>Prim</h4><p>每次选距离当前树点最近的点加入生成树。</p><p>使用堆优化复杂度 <script type="math/tex">O((n+m)\log n)</script>。</p><h4 id="dij"><a href="#dij" class="headerlink" title="dij"></a>dij</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dij</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br><span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    priority_queue&lt;pii&gt; p;<br>    p.<span class="hljs-built_in">emplace</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), vis[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!p.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">int</span> x = p.<span class="hljs-built_in">top</span>().second; p.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-keyword">if</span> (vis[x]) <span class="hljs-keyword">continue</span>; vis[x] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y, v] : e[x]) &#123;<br>            <span class="hljs-keyword">if</span> (dis[x] + v &lt; dis[y]) &#123;<br>dis[y] = dis[x] + v;<br>                p.<span class="hljs-built_in">emplace</span>(-dis[y], y);<br>            &#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><script type="math/tex; mode=display">O(m\log m)</script><h4 id="spfa"><a href="#spfa" class="headerlink" title="spfa"></a>spfa</h4><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">spfa</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">memset</span>(vis, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> vis);<br><span class="hljs-built_in">memset</span>(dis, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> dis);<br>    queue&lt;<span class="hljs-keyword">int</span>&gt; p;<br>    p.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>), vis[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>, dis[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!p.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-keyword">int</span> x = p.<span class="hljs-built_in">top</span>(); p.<span class="hljs-built_in">pop</span>(); vis[x] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> [y, v] : e[x]) &#123;<br>            <span class="hljs-keyword">if</span> (dis[x] + v &lt; dis[y]) &#123;<br>dis[y] = dis[x] + v;<br>                <span class="hljs-keyword">if</span> (!vis[y]) p.<span class="hljs-built_in">push_back</span>(y), vis[y] = <span class="hljs-number">1</span>;<br>            &#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="差分约束"><a href="#差分约束" class="headerlink" title="差分约束"></a>差分约束</h4><p>形如 <script type="math/tex">x_i-x_j\le c_k</script>，找到一组解。</p><p>结论：<script type="math/tex">i</script> 向 <script type="math/tex">j</script> 连权值 <script type="math/tex">c_k</script> 有向边，然后建一个源点向所有点权值 <script type="math/tex">0</script> 的连边，若有负环则无解，否则最短路是一组解。</p><h4 id="2-SAT"><a href="#2-SAT" class="headerlink" title="2-SAT"></a>2-SAT</h4><p>拆点，对于逻辑关系连有向边表示选了这个另一个必须选，缩点若和自己在一起就无解；否则判断拓扑序，真的拓扑序大就取真。</p><p>树上问题连通性网络流先放下。</p><hr><h3 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h3><h4 id="旋转坐标系"><a href="#旋转坐标系" class="headerlink" title="旋转坐标系"></a>旋转坐标系</h4><script type="math/tex; mode=display">u = \cos \alpha \times x -\sin\alpha\times y</script><script type="math/tex; mode=display">v = \sin \alpha \times x +\cos\alpha\times y</script><h4 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h4><ul><li>曼哈顿-&gt;切比雪夫 <script type="math/tex">(x + y, x - y)</script></li><li>切比雪夫-&gt;曼哈顿 <script type="math/tex">(\frac{x+y}{2},\frac{x-y}{2})</script></li></ul><h4 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h4><ul><li>两次 dfs 求直径要求边权正</li><li>树形dp</li><li>动态树的直径：a 到 b 的距离等于 dep[a] + dep[b] - 2 * dep[LCA(a, b)]，用欧拉序转换成区间最值。</li><li>子树内直径：线段树 [L,R] 直径可由 [L,mid] 和 (mid,r] 的直径端点拼接而成。</li></ul><h4 id="树的重心"><a href="#树的重心" class="headerlink" title="树的重心"></a>树的重心</h4><ul><li>所有点到重心的距离和最小</li><li>树的重心子树大小不大于 n/2</li><li>树的重心子树最大值最小</li></ul>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>水</tag>
      
      <tag>CSP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>蠢 蠢 的 死 法</title>
    <link href="/9a1698be/"/>
    <url>/9a1698be/</url>
    
    <content type="html"><![CDATA[<h3 id="22-10-17"><a href="#22-10-17" class="headerlink" title="22.10.17"></a>22.10.17</h3><ul><li>赋值粘贴没改全，<strong>-40pts</strong></li><li>map 卡常，<strong>-20pts</strong></li></ul><h3 id="22-10-18"><a href="#22-10-18" class="headerlink" title="22.10.18"></a>22.10.18</h3><ul><li>数组没开两倍，<strong>-100pts</strong></li></ul><h3 id="22-10-23"><a href="#22-10-23" class="headerlink" title="22.10.23"></a>22.10.23</h3><ul><li>全局 lambda CE，<strong>-70pts</strong></li><li>期望线性性质没想到，<strong>-60pts</strong></li></ul><h3 id="22-10-27"><a href="#22-10-27" class="headerlink" title="22.10.27"></a>22.10.27</h3><ul><li>没考虑 -1 没开 <code>long long</code>，<strong>-95pts</strong></li></ul><h3 id="22-11-07"><a href="#22-11-07" class="headerlink" title="22.11.07"></a>22.11.07</h3><ul><li>一个可以直接算的东西用数据结构维护，<strong>-61pts</strong></li></ul>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
    <tags>
      
      <tag>逆天</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP 2021 游记</title>
    <link href="/bc149c2e/"/>
    <url>/bc149c2e/</url>
    
    <content type="html"><![CDATA[<p>T1 看错了题意，以为是最短路模板，写完发现看错题意已经浪费了 40 分钟；</p><p>然后重新想了个做法，写一半卡壳了，此时已经过去 <script type="math/tex">1h</script>。心态有点小崩，满脑子都是一题没过爆蛋的场景。决定先看 T2。</p><p>T2 一眼就感觉是毒瘤数据结构，暴力打满 <script type="math/tex">80</script> 跑人。</p><p>回头看 T1 这不傻逼题，马上写完过大样例。这时过去了 <script type="math/tex">2h</script> 多。心态稍微好点了。接下来准备求稳，T3 T4 尽量写暴力。</p><p>花了一段时间整理 T3 的题意。准备先把 <script type="math/tex">40pts</script> 的 <script type="math/tex">\tt{Tarjan}</script> 加拓扑写了。这玩意比我想象的长，约莫一百行，写完挺顺利地过了大样例，此时还剩 <script type="math/tex">1h</script>。</p><script type="math/tex; mode=display">T4$$ 先写了 $$k=1$$ 的倍增 $$\tt{LCA}$$。调完又过了 $$0.5h$$。写完冷静下来发现可以直接把链拎出来 $$\tt{dp}$$，$$O(n^2)$$ 可以拿好多分。赶紧写了一波，发现大样例 2 过不去，这时还是 $$10min$$，手模了一下发现可以跳到链外面去，md 假了。直接自闭。---出考场听 cqh, zyy 都过了 T2，一想秒了。焯。T3 的条件相当于出度都为 $$1$$，这么显然的结论居然他妈没想出来，我是什么品种的智障。T4 听巨佬们说可以直接倍增，把转移写成矩阵的形式，处理一下 $$k=3$$ 的情况，就可以过了。。。不过还好考场上没删 $$\tt{dp}$$，在 $$k=2$$ 的时候是正确的可以多骗很多分。预计是 $$100+80+40+40=260$$？感觉策略有大问题。想题的时间很少，几乎所有时间都在写部分分，感觉是 T1 写了好久被吓住了 /qd，不然 $$300$$ 肯定能上。要多想。---交了一波：- INFOJ $$100+85+40+48=273</script><ul><li>LUOGU <script type="math/tex">100+85+40+48=273</script></li></ul><p>没有挂分，T4 比现象的高，民间数据排名一百出头，还行。</p>]]></content>
    
    
    <categories>
      
      <category>水</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>tarjan 与图的联通性</title>
    <link href="/384de298/"/>
    <url>/384de298/</url>
    
    <content type="html"><![CDATA[<h1 id="tarjan-与图的联通性"><a href="#tarjan-与图的联通性" class="headerlink" title="tarjan 与图的联通性"></a>tarjan 与图的联通性</h1><p>记录一下各种 tarjan 的模板。</p><h2 id="有向图"><a href="#有向图" class="headerlink" title="有向图"></a>有向图</h2><h3 id="强联通分量、缩点"><a href="#强联通分量、缩点" class="headerlink" title="强联通分量、缩点"></a>强联通分量、缩点</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>dfn[x] = low[x] = ++ cnt;<br>st.<span class="hljs-built_in">emplace</span>(x), ins[x] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) &#123;<br><span class="hljs-keyword">if</span> (!dfn[y]) &#123; <span class="hljs-built_in">tar</span>(y);<br>low[x] = <span class="hljs-built_in">min</span>(low[x], low[y]);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ins[y]) &#123;<br>low[x] = <span class="hljs-built_in">min</span>(low[x], dfn[y]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (dfn[x] == low[x]) &#123;<br>++ scc;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y != x;) &#123;<br>y = st.<span class="hljs-built_in">top</span>(); st.<span class="hljs-built_in">pop</span>();<br>ins[y] = <span class="hljs-number">0</span>, bl[y] = scc;<br>vec[scc].<span class="hljs-built_in">emplace_back</span>(y);<br>&#125;<br>&#125;<br>&#125;<br><br><br>map&lt;<span class="hljs-keyword">int</span>, map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">bool</span>&gt;&gt; a;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>; x &lt;= n; x ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) &#123;<br><span class="hljs-keyword">int</span> u = bl[x], v = bl[y];<br><span class="hljs-keyword">if</span> (u != v &amp;&amp; !a[u][v]) &#123;<br>g[u].<span class="hljs-built_in">emplace_back</span>(v);<br>g[v].<span class="hljs-built_in">emplace_back</span>(u);<br>a[u][v] = a[v][u] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="无向图"><a href="#无向图" class="headerlink" title="无向图"></a>无向图</h2><h3 id="割点"><a href="#割点" class="headerlink" title="割点"></a>割点</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> rt)</span> </span>&#123;<br><span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>;<br>dfn[x] = low[x] = ++ cnt;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) &#123;<br><span class="hljs-keyword">if</span> (!dfn[y]) &#123; <span class="hljs-built_in">tar</span>(y, rt);<br>low[x] = <span class="hljs-built_in">min</span>(low[x], low[y]);<br><span class="hljs-keyword">if</span> (dfn[x] &lt;= low[y]) &#123;<br><span class="hljs-keyword">if</span> (x != rt || ++ s &gt; <span class="hljs-number">1</span>) cut[x] = <span class="hljs-number">1</span>;<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> low[x] = <span class="hljs-built_in">min</span>(low[x], dfn[y]);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="边双联通分量"><a href="#边双联通分量" class="headerlink" title="边双联通分量"></a>边双联通分量</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>dfn[x] = low[x] = ++ cnt;<br>st.<span class="hljs-built_in">emplace</span>(x), ins[x] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) <span class="hljs-keyword">if</span> (y != fa) &#123;<br><span class="hljs-keyword">if</span> (!dfn[y]) &#123; <span class="hljs-built_in">tar</span>(y);<br>low[x] = <span class="hljs-built_in">min</span>(low[x], low[y]);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ins[y]) &#123;<br>low[x] = <span class="hljs-built_in">min</span>(low[x], dfn[y]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span> (dfn[x] == low[x]) &#123;<br>++ scc;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>; y != x;) &#123;<br>y = st.<span class="hljs-built_in">top</span>(); st.<span class="hljs-built_in">pop</span>();<br>ins[y] = <span class="hljs-number">0</span>, bl[y] = scc;<br>vec[scc].<span class="hljs-built_in">emplace_back</span>(y);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="点双联通分量"><a href="#点双联通分量" class="headerlink" title="点双联通分量"></a>点双联通分量</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">tar</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>st.<span class="hljs-built_in">emplace</span>(x);<br>dfn[x] = low[x] = ++ cnt;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) &#123;<br><span class="hljs-keyword">if</span> (!dfn[y]) &#123; <span class="hljs-built_in">tar</span>(y, x);<br>low[x] = <span class="hljs-built_in">min</span>(low[x], low[y]);<br><span class="hljs-keyword">if</span> (dfn[x] &lt;= low[y]) &#123;<br>vec[++ dcc] = &#123;x&#125;;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> z = <span class="hljs-number">-1</span>; z != y;) &#123;<br>z = st.<span class="hljs-built_in">top</span>(); st.<span class="hljs-built_in">pop</span>();<br>vec[dcc].<span class="hljs-built_in">emplace_back</span>(z);<br>&#125;<br><br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (y != fa) &#123;<br>low[x] = <span class="hljs-built_in">min</span>(low[x], dfn[y]);<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></div></td></tr></table></figure><p>还有好多没写，暂时就这些吧（</p>]]></content>
    
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>图论</tag>
      
      <tag>tarjan</tag>
      
      <tag>强联通分量</tag>
      
      <tag>双联通分量</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>题</title>
    <link href="/3b97f720/"/>
    <url>/3b97f720/</url>
    
    <content type="html"><![CDATA[<blockquote><p>给定长度为 <script type="math/tex">n</script> 的序列 <script type="math/tex">a</script>。<br>定义 <script type="math/tex">Max(l,r)</script> 为 <script type="math/tex">a_l\dots a_r</script> 的最大值，<script type="math/tex">Min(l,r)</script> 同理。求：</p><p><script type="math/tex">\sum_{l=1}^n\sum_{r=l}^n Max(l,r)\times Min(l,r)</script> 对 <script type="math/tex">998244353</script> 取模。</p><p><script type="math/tex">1\le n\le 10^5</script>，<script type="math/tex">1\le a_i\le 10^9</script>。</p></blockquote><p>分治，对于区间 <script type="math/tex">L</script> 到 <script type="math/tex">R</script>，考虑 <script type="math/tex">l=L \dots mid</script>，<script type="math/tex">r=mid+1 \dots R</script> 的区间造成的贡献。</p><p>我们记录三个指针：</p><ul><li><p><script type="math/tex">i</script>，表示现在考虑到了 <script type="math/tex">l=i</script>，<script type="math/tex">r=mid+1 \dots R</script> 这部分区间。 <script type="math/tex">i</script> 从 <script type="math/tex">mid</script> 开始向前枚举，可以在这个过程中记录 <script type="math/tex">[i,mid]</script> 的最值 <script type="math/tex">lmx</script> 和 <script type="math/tex">lmn</script>，显然这两个东西是单调的；</p></li><li><p><script type="math/tex">j</script>，表示对于当前 $i$，在 <script type="math/tex">r=mid+1 \dots j</script> 时左半部分最大值占主导地位，即 <script type="math/tex">Max(mid+1,r)<=Max(i,mid),r=mid+1 \dots j</script>。显然这个东西也是单调的。</p></li><li><p><script type="math/tex">k</script>，与 <script type="math/tex">j</script> 类似，不过是最小值。</p></li></ul><p>然后可以把 <script type="math/tex">l=i,r=mid+1 \dots R</script> 这部分区间分成三部分：</p><ul><li><script type="math/tex">mid+1 \dots\min(j, k)</script> 所有最值都是左边占主导，每个区间贡献都是 <script type="math/tex">lmx\times lmn</script>；</li><li><script type="math/tex">\max(j, k) + 1 \dots R</script> 所有最值都是右边主导，可预处理 $Max(mid+1,r)\times Min(mid+1,r)$ 的前缀和快速得到；</li><li><script type="math/tex">\min(j,k) + 1 \dots \max(j,k)</script>，一部分左边主导，预处理右边 <script type="math/tex">Max</script> 和 <script type="math/tex">Min</script> 的前缀和即可。</li></ul><p>然后就做完了 qwq。</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100005</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> P 1000000007</span><br><br><span class="hljs-keyword">int</span> n, a[N], res, mn[N], mx[N], smn[N], smx[N], s[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">cdx</span><span class="hljs-params">(<span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>res = (res + a[l] * a[r] % P) % P;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">cdx</span>(l, mid), <span class="hljs-built_in">cdx</span>(mid + <span class="hljs-number">1</span>, r);<br>mn[mid] = <span class="hljs-number">1e9</span>, mx[mid] = <span class="hljs-number">0</span>;<br>s[mid] = smx[mid] = smn[mid] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = mid + <span class="hljs-number">1</span>; i &lt;= r; i ++) &#123;<br>mn[i] = <span class="hljs-built_in">min</span>(mn[i - <span class="hljs-number">1</span>], a[i]);<br>mx[i] = <span class="hljs-built_in">max</span>(mx[i - <span class="hljs-number">1</span>], a[i]);<br>s[i] = (s[i - <span class="hljs-number">1</span>] + mn[i] * mx[i] % P) % P;<br>&#125;<br>mn[mid] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = mid + <span class="hljs-number">1</span>; i &lt;= r; i ++) &#123;<br>smn[i] = (smn[i - <span class="hljs-number">1</span>] + mn[i]) % P;<br>smx[i] = (smx[i - <span class="hljs-number">1</span>] + mx[i]) % P;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = mid, j = mid, k = mid, lmx = <span class="hljs-number">0</span>, lmn = <span class="hljs-number">1e9</span>; i &gt;= l; i --) &#123;<br>lmx = <span class="hljs-built_in">max</span>(lmx, a[i]), lmn = <span class="hljs-built_in">min</span>(lmn, a[i]);<br><span class="hljs-keyword">while</span> (j &lt; r &amp;&amp; mx[j + <span class="hljs-number">1</span>] &lt;= lmx) j ++;<br><span class="hljs-keyword">while</span> (k &lt; r &amp;&amp; mn[k + <span class="hljs-number">1</span>] &gt;= lmn) k ++;<br>(res += (s[r] - s[<span class="hljs-built_in">max</span>(j, k)] + P) % P) %= P;<br>(res += lmx * lmn % P * <span class="hljs-built_in">max</span>(<span class="hljs-number">0ll</span>, <span class="hljs-built_in">min</span>(j, k) - mid) % P) %= P;<br><span class="hljs-keyword">if</span> (j &lt;= k) (res += lmn * ((smx[k] - smx[j] + P) % P) % P) %= P;<br><span class="hljs-keyword">else</span> (res += lmx * ((smn[j] - smn[k] + P) % P) % P) %= P;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = mid; i &lt;= r; i ++) mn[i] = mx[i] = s[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;simple.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;simple.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>n = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>a[i] = <span class="hljs-built_in">read</span>();<br>&#125;<br><span class="hljs-built_in">cdx</span>(<span class="hljs-number">1</span>, n), <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>分治</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Some C++ Tricks from Codeforces</title>
    <link href="/9c0f374b/"/>
    <url>/9c0f374b/</url>
    
    <content type="html"><![CDATA[<h1 id="Some-C-Tricks-from-Codeforces"><a href="#Some-C-Tricks-from-Codeforces" class="headerlink" title="Some C++ Tricks from Codeforces"></a>Some C++ Tricks from Codeforces</h1><p><a href="https://codeforces.com/catalog">Here</a>, In folder C++.</p><p>I choose some of them which is useful for me and note them in these blog.</p><h3 id="all-x"><a href="#all-x" class="headerlink" title="all(x)"></a>all(x)</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> all(x) x.begin(), x.end</span><br></code></pre></div></td></tr></table></figure><p>before:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">vector&lt;<span class="hljs-keyword">int</span>&gt; a;<br><span class="hljs-comment">// some operation...</span><br><span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>());<br></code></pre></div></td></tr></table></figure><p>now:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">vector&lt;<span class="hljs-keyword">int</span>&gt; a;<br><span class="hljs-comment">// some operation...</span><br><span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(a));<br></code></pre></div></td></tr></table></figure><p>before:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">vector&lt;<span class="hljs-keyword">int</span>&gt; a;<br><span class="hljs-comment">// some operation...</span><br><span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>, a.<span class="hljs-built_in">end</span>())<br></code></pre></div></td></tr></table></figure><p>now:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">vector&lt;<span class="hljs-keyword">int</span>&gt; a;<br><span class="hljs-comment">// some operation...</span><br><span class="hljs-built_in">sort</span>(<span class="hljs-number">1</span> + <span class="hljs-built_in">all</span>(x));<br></code></pre></div></td></tr></table></figure><h3 id="std-unique"><a href="#std-unique" class="headerlink" title="std::unique"></a>std::unique</h3><p>We know that <code>std::unique</code> won’t delete the rest number, but put them in the end.For example, <code>vec = &#123;1, 1, 2, 2, 3, 2, 1&#125;</code> may become <code>&#123;1, 2, 3, 2, 1, 2, 1&#125;</code>. It not good.We can do like this:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">sort</span>(<span class="hljs-built_in">all</span>(vec));<br>vec.<span class="hljs-built_in">resize</span>(<span class="hljs-built_in">unique</span>(<span class="hljs-built_in">all</span>(vec)) - vec.<span class="hljs-built_in">begin</span>());<br></code></pre></div></td></tr></table></figure><h3 id="read"><a href="#read" class="headerlink" title="read()"></a>read()</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Faster and Shorter.</p><p>before:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n;<br>cin &gt;&gt; n; <span class="hljs-comment">// or scanf(&quot;%d&quot;, &amp;n);</span><br></code></pre></div></td></tr></table></figure><p>now:</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n = <span class="hljs-built_in">read</span>();<br></code></pre></div></td></tr></table></figure><hr><p>我为什么要用阴文。。。写不下去了。。。</p><hr><h3 id="std-generate"><a href="#std-generate" class="headerlink" title="std::generate"></a>std::generate</h3><p>将给定的区间用给定的函数赋值。举个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">up</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> ++ x; &#125;<br><br><span class="hljs-function">vector&lt;<span class="hljs-keyword">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span>;<br><span class="hljs-built_in">generate</span>(<span class="hljs-built_in">all</span>(a), up);<br><span class="hljs-comment">// a = &#123;1, 2, 3, 4&#125;</span><br><br></code></pre></div></td></tr></table></figure><p>配合 <code>read</code> 可以快速读入数组。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) cin &gt;&gt; a[i];<br></code></pre></div></td></tr></table></figure><p>现在变成了</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">generate</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>, read);<br></code></pre></div></td></tr></table></figure><p>使用 <code>generate_n</code> 还可以写成：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-built_in">generate_n</span>(a + <span class="hljs-number">1</span>, n, read);<br></code></pre></div></td></tr></table></figure><h3 id="输出一个数的二进制"><a href="#输出一个数的二进制" class="headerlink" title="输出一个数的二进制"></a>输出一个数的二进制</h3><p>使用 <code>std::bitset</code> 可以这样：</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> n;<br><span class="hljs-comment">// ...</span><br>cout &lt;&lt; bitset&lt;31&gt;(n) &lt;&lt; endl;<br></code></pre></div></td></tr></table></figure><h3 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h3><p>见我的另一篇 blog。</p><h3 id="std-max"><a href="#std-max" class="headerlink" title="std::max"></a>std::max</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-keyword">int</span> r = <span class="hljs-built_in">max</span>(&#123;a, b, c&#125;);<br></code></pre></div></td></tr></table></figure><h3 id=""><a href="#" class="headerlink" title="{}"></a>{}</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp">pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; x = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125; <span class="hljs-comment">// 等价于 make_pair(1, 2)</span><br>vector&lt;<span class="hljs-keyword">int</span>&gt; y = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">1</span>, <span class="hljs-number">4</span>&#125; <span class="hljs-comment">// 对 vector 直接赋值</span><br></code></pre></div></td></tr></table></figure><ul><li>好像没了</li></ul>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>（转载）蔚蓝技巧大全(1)（翻译）</title>
    <link href="/7ddc7c88/"/>
    <url>/7ddc7c88/</url>
    
    <content type="html"><![CDATA[<p class="note note-info"> 转载自蔚蓝群，侵删</p><hr><p><a href="https://celeste.ink/wiki/Techniques">原文</a></p><p>翻译：魄破坡</p><h1 id="技巧"><a href="#技巧" class="headerlink" title="技巧"></a>技巧</h1><p>技巧（Techniques），英文通常简称tech，是玛德琳用于提升她爬山能力的特殊移动方式。它们具有多种用途和难度。很多技巧可以用来逃课，或是“利用”它们跳过几个部分而不必收集全部物品或规划整个流程。</p><h1 id="冲刺技巧"><a href="#冲刺技巧" class="headerlink" title="冲刺技巧"></a>冲刺技巧</h1><p>冲刺技巧是指需要冲刺才能用的技巧，倾向于简单实用。大多数冲刺技巧可以被拓展，意味着你可以通过接触地面更长时间来重新获得冲刺；或者反用，意味着你可以冲向一个方向但是朝其他方向发动。反用技巧是在没有多少地面的房间内恢复冲刺的简便办法，因此，反向仅指反用加上拓展，因为反用和拓展这两者优点可以共存。</p><p>很多冲刺技巧可以在按住跳键的时间内微调。跳键按住的时间越长，技巧走的越高，玛德琳在空中停留的时间也就越久。非常短的齐足跳行被称为短跳（Bunnyhops），而尽可能长地按住跳键则被称为长跳（Full jump）。</p><h2 id="Super冲刺（super）"><a href="#Super冲刺（super）" class="headerlink" title="Super冲刺（super）"></a>Super冲刺（super）</h2><p>super可以使玛德琳向前迈出一大步，它移动起来比hyper高且比hyper短。</p><p>要完成一个super，平行于地面冲刺，在冲刺过程中按下跳。</p><p>这项技巧可以通过冲刺后，跳键按的更短（或立即按跳）来缩短距离。</p><ul><li><p>拓展：冲刺之后等待更长的时间再按跳。</p></li><li><p>反向：冲向一个方向，但是在跳之前（冲刺之后）按下相反反向的方向键。玛德琳将会朝着相反的方向飞出去。</p></li><li><p>变种——半空super：super冲刺不必在冲刺的整个过程中接触地面；你可以在任何位置冲刺并在地面上跳离，这样仍能成功做出super。</p></li></ul><h2 id="Hyper冲刺（hyper）"><a href="#Hyper冲刺（hyper）" class="headerlink" title="Hyper冲刺（hyper）"></a>Hyper冲刺（hyper）</h2><p>hyper可以使玛德琳跳的更远，它移动起来比super远且比super低，但是操作起来稍难一些。</p><p>要完成一个hyper，接触地面的时候斜下冲，然后跳。同样的，它也可以通过跳键按的更短来缩短距离。</p><ul><li><p>拓展：冲刺之后等待更长的时间再按跳。这能让玛德琳在完成一次hyper后可以再次冲刺，作为不得不落地恢复冲刺的替代。</p></li><li><p>反向：冲向一个方向，但是在跳之前（冲刺之后）按下相反反向的方向键。玛德琳将会朝着相反的方向飞出去。</p></li><li><p>变种——半空hyper：见下面的demohyper。</p></li></ul><h2 id="凌波微步（凌波）"><a href="#凌波微步（凌波）" class="headerlink" title="凌波微步（凌波）"></a>凌波微步（凌波）</h2><p>凌波微步是一种让你走的更快更远的简单方法，作为奖励，它们会自动恢复你的冲刺。</p><p>要完成一个凌波微步，斜下冲向地面，然后在撞地时按下跳键。</p><ul><li>反向：撞地之后，跳向冲刺相反的方向。</li></ul><h2 id="Ultra冲刺（u）"><a href="#Ultra冲刺（u）" class="headerlink" title="Ultra冲刺（u）"></a>Ultra冲刺（u）</h2><p>当玛德琳斜下冲刺之后，她下一次撞地时，她的水平速度将乘以1.2。斜下冲还具有不像其他任何冲刺的另一个特性，一个斜下冲如果在半空中结束，它不会将玛德琳的速度重置到0。这意味着一位玩家可以以非常快的速度斜下冲，只要冲刺在半空中结束，就可以保持所有速度直到玛德琳撞地，在这个时间点上速度又会乘以1.2，如此一来，在正确的地形上就能达到很快的速度。</p><p>完成ultra冲刺最简单而常用的方式，就是先做一个hyper，然后立即斜下冲。为了保留动量，冲刺必须在玛德琳撞地之前结束，所以玩家需要在足够高的平台上启动让冲刺在落地之前结束。为了尽可能减少摩擦带来的速度损失，正好在撞地后起跳通常很重要。玩家不应当预输入跳，（因为这样很有可能阻止1.2倍加速）作为替代，尝试刚好撞地的时候按跳键。为了保持ultra冲刺后的最大速度，玩家同时需要在开始的hyper冲刺（或其他获得速度的手段）之后尽可能快的斜下冲。</p><ul><li><p>平地Ultra（平地u）：在地面或非常接近地面的地方做一个高速的斜下冲，1.2倍加速仍然成立，但是冲刺结束后速度全部丢失。因为这本质上和hyper的输入一样（一个斜下冲冲向地面），玩家可以在hyper的冲刺结束之前跳跃，并获得325的速度。然后，即刻做出另一个平地u，给予它们1.2倍加速（390速度），直到冲刺结束。这种操作可以在平地上无限连接，可能是平地上最快的移动方式。</p></li><li><p>变种——连续Ultra（连u）：连续完成一串的ultra冲刺。需要非常特殊的地形才有完成的可能性，但是取决于ultra冲刺速度倍增的特性，可以很快达到难以置信的速度。</p></li></ul><h2 id="下蹲冲刺-Demodash-大江之力（dd）"><a href="#下蹲冲刺-Demodash-大江之力（dd）" class="headerlink" title="下蹲冲刺/Demodash/大江之力（dd）"></a>下蹲冲刺/Demodash/大江之力（dd）</h2><p>Demodash，也被称作下蹲冲刺，是一种允许玩家用更小碰撞箱进行冲刺的技巧，通常用于穿过正常碰撞箱无法穿过的位置。</p><p>要完成一个dd，在冲刺之前（4帧或0.07秒之内）而非冲刺过程中，按下下键。如果操作正确，玛德琳的碰撞箱将在冲刺过程中保持下蹲状态，允许你穿过圆刺、煤球或其他障碍物的“缝隙”却安然无恙。dd不能用于下冲，因为游戏会自动取消玛德琳的下蹲状态。</p><ul><li>变种——demohyper：在dd过程中跳将会做出一个hyper冲刺，因为做出dd的首要条件是下蹲状态。</li></ul><p class="note note-info"> 1.4.0.0更新了一键dd，前往选项→键盘配置→高级→下蹲冲刺，设置完后直接按那个键可以直接dd</p><h2 id="蹭墙跳"><a href="#蹭墙跳" class="headerlink" title="蹭墙跳"></a>蹭墙跳</h2><p>蹭墙跳的目标是垂直的而不是水平的。它们在功能上与super类似，仅仅是方向朝上。不同于super冲刺的是，由于你没有接触地面，所以你的冲刺不会恢复。</p><p>要完成一个蹭墙跳，上冲并与墙面平行，然后按下跳键。</p><ul><li><p>变种——泡泡蹭墙跳：如果泡泡是向上启动的，那么蹭墙跳可以不用冲刺，而是在出绿泡泡的时候直接操作出来。</p></li><li><p>变种——半空蹭墙跳：蹭墙跳不需要在操作的整个过程中接触墙；你可以在任何位置做一个上冲然后仍旧踢开墙面。</p></li></ul><h1 id="无冲技巧"><a href="#无冲技巧" class="headerlink" title="无冲技巧"></a>无冲技巧</h1><p>无冲技巧是指不用冲刺也能用的技巧，倾向于复杂和精确。不像冲刺变种，这些技巧不能被拓展或反向。</p><h2 id="短跳（Bunnyhop）"><a href="#短跳（Bunnyhop）" class="headerlink" title="短跳（Bunnyhop）"></a>短跳（Bunnyhop）</h2><p>短跳被粗略地定义为玛德琳撞地后尽可能快的起跳。由于地面的速度损失比空中大，所以短跳可以让玛德琳在较长距离内保持速度。</p><ul><li>变种——连续短跳：由于每次跳跃给予玛德琳一次短暂的速度爆发，重复短跳是无冲情况下在平地上最快的移动方法。</li></ul><p class="note note-info"> 兔子跳是hyper bunnyhop，和bunnyhop不太一样。</p><h2 id="墙角踢（Cornerkick）"><a href="#墙角踢（Cornerkick）" class="headerlink" title="墙角踢（Cornerkick）"></a>墙角踢（Cornerkick）</h2><p>墙角踢是使用底部墙角地形来踢走的方法，当需要的时候多给予一点的距离，这样学起来一般比较容易。</p><p>要完成墙角踢，先从墙上远离，跳向墙角，当碰到墙角的时候再按一下跳。</p><h2 id="下蹲跳-抓"><a href="#下蹲跳-抓" class="headerlink" title="下蹲跳/抓"></a>下蹲跳/抓</h2><p>下蹲跳允许你进入1×1（或1方格高）大小的区域。如果你在跳之前下蹲，玛德琳将在跳的时候保持下蹲状态；并且仍旧可以保持蹲姿攀爬。</p><p>要完成这个技巧，保持下蹲，然后在维持下蹲的同时跳。你可以在里面混入抓的操作，以同时达到抓跳的效果。如果你已经开始下落了，那么玛德琳会自动取消下蹲。</p><h2 id="中性跳（无体力）"><a href="#中性跳（无体力）" class="headerlink" title="中性跳（无体力）"></a>中性跳（无体力）</h2><p>中性跳是最基本的无冲技巧。它们允许玛德琳在不消耗任何体力的情况下在平整或凹凸不平的墙面上攀爬，即使有下风存在。</p><p>要完成一次中性跳，不按住任何方向键的情况下跳离墙面，然后立即向墙面移动。如此重复来保持向上移动。跳跃可以被延迟，以停留在某个位置。</p><h2 id="五跳"><a href="#五跳" class="headerlink" title="五跳"></a>五跳</h2><p>当玛德琳抓住墙顶时，她将下滑一大段距离且不能再往上爬更远。但是，墙顶仍然有抓跳或者蹬墙踢的可能性。一个五跳是这样操作的：使用中性跳接抓跳到达墙顶（或用抓跳直接到达墙顶），然后再跳离墙顶。这项技巧允许玩家抓跳越过5个方格长的区域。</p><ul><li>变种——六跳：见下面的翻角加速。</li></ul><p class="note note-info"> 国内圈子一般以刺的数量表示抓跳的距离，比如10刺、12刺、14刺等，1个方格可以放2根刺。</p><h2 id="翻角加速（cb）"><a href="#翻角加速（cb）" class="headerlink" title="翻角加速（cb）"></a>翻角加速（cb）</h2><p>翻角加速可以通过冲刺轻松的做到，但是也可以在无冲状态下完成。按理来说它们是一种增加水平速度的小漏洞；当在顶部墙角地形，以水平的动量抓跳时，它们允许玛德琳保留她先前所有的动量，同时从抓跳中获得+40的速度。它们也打断了冲刺，意味着冲刺给予的速度可以保留，而不是冲刺结束后被迫停下来。单靠cb可以在不用冲刺的情况下翻越6个方格长的区域。</p><ul><li>变种——六跳：六跳利用了无需冲刺的cb，在已经有水平动量的地方做一个五跳。要完成一个六跳，水平向墙角移去并在上面抓跳，就像你在做五跳的后半部分那样。作为替代，完成了一次cb，越过了六个方格长的区域。</li></ul><h2 id="反丢加速（反丢）"><a href="#反丢加速（反丢）" class="headerlink" title="反丢加速（反丢）"></a>反丢加速（反丢）</h2><p>玛德琳移动时朝反方向扔物体会给予她一个很小的加速。在操作ultra时可以利用这个额外的速度，让玛德琳飞的更快。</p><h1 id="实体技巧"><a href="#实体技巧" class="headerlink" title="实体技巧"></a>实体技巧</h1><p>实体技巧是指用方块或其他各种实体（和它们各自的机制）来完成特定操作的技巧。</p><h2 id="果冻跳"><a href="#果冻跳" class="headerlink" title="果冻跳"></a>果冻跳</h2><p>在离开果冻砖时，果冻跳可以给予一个很小的向上（但是大部分是水平）加速。当你离开果冻砖时，简单的按下跳。这个技巧会通过旧址b面的那只鸟教你。</p><h3 id="果冻双跳"><a href="#果冻双跳" class="headerlink" title="果冻双跳"></a>果冻双跳</h3><p>玛德琳出果冻后狂按两个跳键，这允许你比普通的果冻跳跳的更高。</p><h2 id="岩浆块加速"><a href="#岩浆块加速" class="headerlink" title="岩浆块加速"></a>岩浆块加速</h2><p>在岩浆块碎之后的几帧里跳开它，你可以获得一个额外的加速，大约1.2-1.5倍。</p><h3 id="岩浆块super-hyper"><a href="#岩浆块super-hyper" class="headerlink" title="岩浆块super/hyper"></a>岩浆块super/hyper</h3><p>跟果冻super/hyper同理，在岩浆块快要把你推出去的最后几帧（狼跳帧），通过输入上面的其中一个技巧，你就可以获得一个非常快的速度或非常高的高度。</p><h2 id="胖头鱼-弹球-新浪加速"><a href="#胖头鱼-弹球-新浪加速" class="headerlink" title="胖头鱼/弹球/新浪加速"></a>胖头鱼/弹球/新浪加速</h2><p>这些实体使用不同的方法（分别为靠近、接触和踩掉），会提供一个巨大的动量，但是共用一套普遍的机制。当玛德琳加速过程中维持相同的方向时，你可以获得一个额外的加速，大约1.5倍至2倍。</p><h2 id="水母-Theo抛接"><a href="#水母-Theo抛接" class="headerlink" title="水母/Theo抛接"></a>水母/Theo抛接</h2><p>把可扔的物体扔到你的前面，然后斜上冲并再次接住它，这个操作能给予你一个加速。Theo抛接比水母抛接难很多。</p><h2 id="水母垂直下放-Theo垂直下放"><a href="#水母垂直下放-Theo垂直下放" class="headerlink" title="水母垂直下放/Theo垂直下放"></a>水母垂直下放/Theo垂直下放</h2><p>电梯操作（垂直放冲接）依赖于这样一个事实：按住下键并松开抓键可以简单的放下玛德琳抓着的东西，而不是扔开它。把东西放下之后，朝着它上冲并再次抓住它。冲刺会被取消，一部分的冲刺动量被保留，给予玛德琳更多高度。</p><p class="note note-info"> 越晚抓住可抛物似乎能让你上升的越高。这不是因为取消冲刺后保留的动量不同，而仅仅是因为当冲刺实际上被取消后玛德琳的位置比较高。Theo水晶比水母提供更少的高度，因为抓住水母可以减少玛德琳的重力。</p><h2 id="老板头-雪球-新浪-胖头鱼跳"><a href="#老板头-雪球-新浪-胖头鱼跳" class="headerlink" title="老板头/雪球/新浪/胖头鱼跳"></a>老板头/雪球/新浪/胖头鱼跳</h2><p>相比于不按跳键，落在老板头、雪球、胖头鱼或者新浪（第八章的冰贝壳也可以）上并按住跳键可以显著提升玛德琳的高度，同时也能保留一些玛德琳的水平动量。无论你是否按下跳键，玛德琳的冲刺和体力都可以恢复。</p><p>接触这些实体的顶部也能取消玛德琳的冲刺，并保留一些冲刺带来的动量。因为这个原因，水平冲向其中一个实体然后跳跃有时候被通俗地称作鱼super或雪球super等，虽然在机制上与这种叫法与super冲刺没有任何联系。</p><h2 id="泡泡super-hyper"><a href="#泡泡super-hyper" class="headerlink" title="泡泡super/hyper"></a>泡泡super/hyper</h2><p>这个技巧只有在泡泡的高度跟玛德琳站在地面的高度齐平时才能完成。径直冲向泡泡，并你进入泡泡之前，快速输入一个hyper/super（不要拓展）。接着泡泡把你向前推进的同时施加一个hyper或super的动量，取决于你用哪一种技巧。</p><h2 id="云跳-刺云跳"><a href="#云跳-刺云跳" class="headerlink" title="云跳/刺云跳"></a>云跳/刺云跳</h2><p>玛德琳只需在云到达最高的位置后起跳，而不必跟着云一起跳。如果云的下方有刺或其他危险物，快速的起跳把云往下推，然后在云弹回的时候再跳一次就能避免被扎到。</p><h2 id="云上super-hyper"><a href="#云上super-hyper" class="headerlink" title="云上super/hyper"></a>云上super/hyper</h2><p>正如在地面上那样，玛德琳可以做一个super或hyper离开云朵；虽然时机把控有一点精确。</p><p>只要在你弹起的时候输入super或hyper就行。</p><h2 id="望远镜卡刺（Bino-Clip）"><a href="#望远镜卡刺（Bino-Clip）" class="headerlink" title="望远镜卡刺（Bino Clip）"></a>望远镜卡刺（Bino Clip）</h2><p>游戏中为了减少加载负担，当使用望远镜时，游戏将卸载当前不可见的圆刺；允许玛德琳冲向甚至完全安全地走过它们（至少直到圆刺加载回来之前）。为了完成这个技巧，使用望远镜，把视线切的尽可能远（或足够远使圆刺被卸载），接着迅速离开望远镜并冲过圆刺。</p><h2 id="蹲姿入泡（Archie）"><a href="#蹲姿入泡（Archie）" class="headerlink" title="蹲姿入泡（Archie）"></a>蹲姿入泡（Archie）</h2><p>蹲姿入泡是指以下蹲状态的碰撞箱（从任何方向）进入泡泡，可以使泡泡往上多移动2个像素。这项技巧的使用大多伴随着dd，但是也可以简单地使用鸭子跳来完成。</p><h1 id="特殊技巧"><a href="#特殊技巧" class="headerlink" title="特殊技巧"></a>特殊技巧</h1><p>特殊类技巧在官图内容中可能用得到，但是用途极其明确/特殊。大多数特殊技巧操作起来非常困难。</p><h2 id="踩刺跳"><a href="#踩刺跳" class="headerlink" title="踩刺跳"></a>踩刺跳</h2><p>尖刺与它们的表面有一个很短的（取决于亚像素）可以用来跳跃的窗口，创造这个窗口的条件是有把你往刺那里吹的风或是刺移向你。</p><p>为了在它们上面跳跃，玛德琳需要朝远离该窗口的方向移动（至少目的是远离）。跳离地面上的刺（不是墙上）可以恢复你的体力，但是不恢复冲刺。</p><h2 id="斜向Demodash（斜dd）"><a href="#斜向Demodash（斜dd）" class="headerlink" title="斜向Demodash（斜dd）"></a>斜向Demodash（斜dd）</h2><p>一个更高级版本的dd。最少见的技巧之一，在大多数应用中作用极小甚至没用。</p><p>在你冲刺的那一帧，按住下方向。在这之后的四帧里松开下键，瞄准你想的方向冲刺。如果不绑一键dd，这将非常困难。</p><h2 id="果冻super-hyper"><a href="#果冻super-hyper" class="headerlink" title="果冻super/hyper"></a>果冻super/hyper</h2><p>作为简单的从果冻砖中跳开的替代，在恰好离开果冻砖的几帧里你可以做一个hyper。这将给予你一个巨大的水平加速，而不是像果冻跳那样跳的很高。需要注意的是，它不像果冻跳那样保留冲刺，由于他是在离开果冻砖之后做出来的且需要消耗冲刺，所以这项技巧不会恢复你的冲刺。</p><h2 id="水面加速"><a href="#水面加速" class="headerlink" title="水面加速"></a>水面加速</h2><p>当你处于水面时，多次跳跃是可能做到的，每次跳跃都会给予+40的速度。人手操大致只能跳两到三次，而TAS在每帧都能跳，从而达到荒诞的速度。</p><h2 id="水母梯云纵"><a href="#水母梯云纵" class="headerlink" title="水母梯云纵"></a>水母梯云纵</h2><p>使用两只水母，玛德琳可以抓住一个然后再抓另一个来获得递增的小加速，并开始向上移动。</p><p>用两只水母，然后快速狂按抓键。</p><h2 id="爬火墙"><a href="#爬火墙" class="headerlink" title="爬火墙"></a>爬火墙</h2><p>从技术上来讲火墙也是墙，因此它有可操作像素窗口，你可以在这个窗口用抓跳或中性跳往上爬。此外，你甚至可以在火墙上蹭墙跳。这个技巧的帧窗口可以通过缓冲跳来拓展。只要别靠的太近就行，因为当你接触它时仍然会伤害到你。</p><h2 id="磕顶跳（cp）"><a href="#磕顶跳（cp）" class="headerlink" title="磕顶跳（cp）"></a>磕顶跳（cp）</h2><p>当玛德琳以向下的动量抓着一面墙，她向下滑动的一小段里。如果她抓着墙面底部的像素且有足够低的亚像素，她将从墙上滑出去，但是在一帧内仍然可以抓跳。因为那里已经没有墙了，这个抓跳将给予玛德琳向前的动量。</p><h2 id="回图重开（Bubsdrop）"><a href="#回图重开（Bubsdrop）" class="headerlink" title="回图重开（Bubsdrop）"></a>回图重开（Bubsdrop）</h2><p>先使用踢墙来避免向上的动量带进垂直屏幕过渡区，从而不必落在单向跳跃的平台上，以便返回先前的房间。在重新进入的原始房间上部，你的重生点被设置在最近的可用位置。在5B中，这个戏法被用于跳过5b“中庭”检查点的重要位置。</p><h2 id="延迟Ultra"><a href="#延迟Ultra" class="headerlink" title="延迟Ultra"></a>延迟Ultra</h2><p>撞地之前打断斜下冲不会移除旗帜的现象告诉我们，当玛德琳下一次撞地时，游戏仍会给予玛德琳1.2倍加速。这通常使用cb，或抓取可抛接物件实现。任何其他可以打断冲刺的方法（比如撞碎雪球）仍能提供一个延迟ultra的效果，但是很可能打断冲刺的减速足以抵消玛德琳的加速，导致这1.2倍的加速可以忽略不计。</p><p>一个RTA延迟ultra的典型例子被用在旧址的“唤醒”检查点——利用一个延迟ultra、成倍的cb、成倍的连续ultra冲刺来让速通者获得快速递增的速度。</p><p class="note note-info"> Real Time Attack，简称RTA，追求的是从游戏开始到通关画面出现为止所需的最短“现实时间”。</p><h2 id="反向翻角加速（反cb）"><a href="#反向翻角加速（反cb）" class="headerlink" title="反向翻角加速（反cb）"></a>反向翻角加速（反cb）</h2><p>一个反cb是这样操作的：向一个垂直且在玛德琳后面的墙角抓跳。这样取消了冲刺，并以普通cb相同的手段保留动量，但是从跳跃中获得+40速度被施加在了相反的方向，轻微地让玛德琳减速。这通常被用在打断斜上冲刺所以仍然有所用处，因为多于40的速度从冲刺中被保留了下来。这最初考虑放到TAS专用技巧里，但是它已被水平非常高的玩家操作出来，特别是在IL速通中用的很多。</p><h2 id="刺角翻角加速"><a href="#刺角翻角加速" class="headerlink" title="刺角翻角加速"></a>刺角翻角加速</h2><p>在一个或两个相邻表面都有刺的墙角上可以完成一次cb。一个刺角翻角加速的显著例子是镜之寺庙b面 “恐怖墙角”阶梯，刺角翻角加速可以跳过使用Bubsdrop也能跳过的相同房间。</p><h2 id="爬墙加速（Wallboost）"><a href="#爬墙加速（Wallboost）" class="headerlink" title="爬墙加速（Wallboost）"></a>爬墙加速（Wallboost）</h2><p>如果玩家在一面墙上抓跳后很快被压开，抓跳中消耗的体力将会被返还，“事后”跳跃被转化为一次踢墙。但是，与一个普通的踢墙不同，你不能阻止墙把你挤上去，从而再次快速地返回原位。这允许你无体力攀爬，但是当TAS做出爬墙加速的最佳操作也仅仅是比中性跳更快罢了。它有其他的用途，主要是击破体力型的解密。做出一个爬墙加速将会造成当你停止抓墙时下落方块立刻下落，但是允许你尽可能重新抓住他们，显著快于中性跳或真正的踢墙。</p><p>如果你做了一个爬墙加速，在抓墙的时候却也碰到了地板，你仍旧能从抓跳中恢复体力，尽管在最初的抓跳中没用到任何操作。这意味着你将拥有138体力，而玛德琳最大的体力应该是110，允许你耗尽体力时做出五个抓跳而不是四个。</p><h1 id="Mod专用技巧"><a href="#Mod专用技巧" class="headerlink" title="Mod专用技巧"></a>Mod专用技巧</h1><p>由于等级设计，mod专用技巧在基础游戏内容中没什么作用，但是你会发现在mod图里需要用到它们。这些技巧在官图中仍然存在，只是没有特定场合来实现它们的价值。</p><h2 id="果冻蹭墙跳"><a href="#果冻蹭墙跳" class="headerlink" title="果冻蹭墙跳"></a>果冻蹭墙跳</h2><p>在离开一块果冻砖之后的几帧里可以输入蹭墙跳，类似于super和hyper。</p><h2 id="果冻内换向"><a href="#果冻内换向" class="headerlink" title="果冻内换向"></a>果冻内换向</h2><p>果冻砖仅在你冲出去的时候恢复冲刺，所以当你在果冻内，你拥有0个冲刺。如果冲刺水晶被放在果冻砖里面，你就可以恢复冲刺，甚至在果冻中就用掉它。双冲水晶的用法通常和前面一样。</p><h1 id="游戏机制"><a href="#游戏机制" class="headerlink" title="游戏机制"></a>游戏机制</h1><p>这些“技巧”加进来主要是为了让游戏感觉起来更丝滑、玩起来更舒服，但是也可以被利用。</p><h2 id="切屏"><a href="#切屏" class="headerlink" title="切屏"></a>切屏</h2><p>当在两个屏幕之间切换时，玛德琳的冲刺和体力会恢复。</p><h2 id="快速下降（速降）"><a href="#快速下降（速降）" class="headerlink" title="快速下降（速降）"></a>快速下降（速降）</h2><p>在半空中按住下键将会使玛德琳在短暂的加速后降落得更快。</p><h2 id="滞空时间-狼跳"><a href="#滞空时间-狼跳" class="headerlink" title="滞空时间/狼跳"></a>滞空时间/狼跳</h2><p>玛德琳允许在最后接触地面的5帧（粗略计算0.1秒）内起跳。这个跳跃可以包括在super和hyper冲刺里。</p><h2 id="泡泡快速启动"><a href="#泡泡快速启动" class="headerlink" title="泡泡快速启动"></a>泡泡快速启动</h2><p>在还没开始动的泡泡里按下冲键可以使泡泡移动得更快。</p><p>在移动的红泡泡里冲刺将消耗你的冲刺机会，玛德琳会从泡泡中冲出，打断红泡泡的运行。</p><h2 id="定向尖刺"><a href="#定向尖刺" class="headerlink" title="定向尖刺"></a>定向尖刺</h2><p>如果玛德琳正远离尖刺或处在尖刺指向的方向，那么尖刺就不会伤害到她。这是跳过刺板和单向门的方法。</p><h2 id="输入缓存"><a href="#输入缓存" class="headerlink" title="输入缓存"></a>输入缓存</h2><p>尝试在目前不可能行动的地方做出一些动作，这将会在下一个5帧内“缓存”或储存这些输入。如果这些动作在5帧内成为可能，玛德琳会立刻复现它。举个例子，在你落地前你可以轻按跳键，玛德琳将会在第一个可行动的帧内跳跃。这项机制极大程度上被用在切屏后立即执行技巧，或在五帧窗口内做出完美帧级操作，且可以做出游戏中任何动作（除了ultra冲刺）。</p><h1 id="TAS专用技巧"><a href="#TAS专用技巧" class="headerlink" title="TAS专用技巧"></a>TAS专用技巧</h1><p>以下的技巧人类手操不可能完成，只有可能在工具辅助速通（TAS）中实现。需要注意的是，很多技巧，比如cp基于它精确度需求，多半是TAS专用的，然而在适当的情况下人类能够手操。</p><h2 id="半体力攀爬"><a href="#半体力攀爬" class="headerlink" title="半体力攀爬"></a>半体力攀爬</h2><p>对于一个垂直的墙面，立即操作完一个爬墙加速后，玛德琳有两帧的时间仍旧可以靠墙靠的足够近来跳开它。抓跳给予你+40速度回到墙面，允许你返回墙面的动作先于消耗体力。爬墙加速和抓跳组合使用，可以做到消耗一个抓跳体力，却能达到抓跳两倍的高度。</p><p>通过将左键、右键和跳键绑在一起，可以在RTA中增加一点可行性。抓跳离开墙面之后要操作墙面加速时，两帧内按下新的绑定键使玛德琳转向并抓跳。</p><p>同样的，玛德琳也可以在爬墙加速的两帧里完成中性跳。这项操作不消费体力且允许玛德琳比只用中性跳爬的更快。<br>使用该技巧的恰当例子如下：in the 100% TAS when obtaining the heart in 6A。</p><h1 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h1><ul><li><p>1A——无冲类技巧广泛地运用在1A的飞金草莓中。这里的墙角踢被称作咖啡跳的原因是使用墙角踢的那个房间背景里有一家咖啡商店。</p></li><li><p>2A——切屏被用在获得2A的蓝心。</p></li><li><p>3A——在“电梯井”大章里，dd路线需要用到大江之力，但是游戏中的其他房间仍然很有用。</p></li><li><p>5A——5A不拿钥匙的逃课路线需要一个反super。</p></li><li><p>在整个游戏中，蓝鸟会告诉你各种各样的技巧。值得注意的有：序章的冲刺，旧址B面的果冻跳，山顶B面的蹭墙跳，核心C面的hyper冲刺。游戏在再见这一章节教玩家凌波微步。</p></li><li><p>Demodash由玩家DemoJameson在2018年10月14日发现。随后用了他的名字命名了这个技巧。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>水</category>
      
    </categories>
    
    
    <tags>
      
      <tag>蔚蓝</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>AcWing 321 棋盘分割题解</title>
    <link href="/6ca004af/"/>
    <url>/6ca004af/</url>
    
    <content type="html"><![CDATA[<p><del>很水的题但是第一次写二维区间 dp 代码略显恶心所以水一篇博客</del></p><blockquote><p><a href="https://www.acwing.com/problem/content/323/">link</a></p><p>将一个 <script type="math/tex">8\times8</script> 的棋盘进行如下分割：将原棋盘沿矩形边分割成两部分，再将<strong>其中一部分</strong>继续如此分割，割 <script type="math/tex">n−1</script> 次后得到 <script type="math/tex">n</script> 块矩形棋盘。</p><p>第 $(i, j)$ 的格子有分值 $a_{i, j}$，第 $i$ 块棋盘的分值 $x_i$ 为棋盘的分值和。要求输出方差 <script type="math/tex">\sigma</script> 的最小值。</p><p>方差 <script type="math/tex">\sigma = \sqrt{\dfrac{\sum_{i=1}^n (x_i - \bar{x})^2}{n}}</script>，平均值 $\bar{x}=\dfrac{\sum_{i=1}^n x_i}{n}$。</p><p>$1 \le n \le 15$，$0 \le a_{i, j} \le 100$。</p></blockquote><p>$f_{d, i, j, k, l}$ 表示 $(i, j)$ 到 $(k, l)$ 的矩形棋盘分割 $d$ 次的最小 $\sigma ^ 2 n$。</p><p>区间 dp 需要先枚举长度才能保证正确性。</p><p>各种原因导致我的代码极丑。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, a, b) for (int i = (a); i &lt;= (b); i ++)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 20</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1e9</span><br><br><span class="hljs-keyword">int</span> n, m, a[N][N], s[N][N];<br><span class="hljs-keyword">double</span> f[M][N][N][N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = <span class="hljs-number">8</span>, m = <span class="hljs-built_in">read</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) s[i][j] = a[i][j] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) s[i][j] += s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">double</span> bX = <span class="hljs-number">1.0</span> * s[n][n] / (m + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(k, i, n) <span class="hljs-built_in">rep</span>(l, j, n) &#123;<br>        f[<span class="hljs-number">0</span>][i][j][k][l] = s[k][l] - s[i - <span class="hljs-number">1</span>][l] - s[k][j - <span class="hljs-number">1</span>] + s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] - bX;<br>        f[<span class="hljs-number">0</span>][i][j][k][l] = f[<span class="hljs-number">0</span>][i][j][k][l] * f[<span class="hljs-number">0</span>][i][j][k][l];<br>    &#125;<br><br>    <span class="hljs-built_in">rep</span>(d, <span class="hljs-number">1</span>, m) <span class="hljs-built_in">rep</span>(len, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) &#123;<br>        <span class="hljs-keyword">auto</span> F = [&amp;f, &amp;s](<span class="hljs-keyword">int</span> d, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> l) &#123;<br>            <span class="hljs-keyword">double</span> &amp;now = f[d][i][j][k][l]; now = INF;<br>            <span class="hljs-built_in">rep</span>(a, i, k - <span class="hljs-number">1</span>) &#123;<br>                now = <span class="hljs-built_in">min</span>(now, f[d - <span class="hljs-number">1</span>][i][j][a][l] + f[<span class="hljs-number">0</span>][a + <span class="hljs-number">1</span>][j][k][l]);<br>                now = <span class="hljs-built_in">min</span>(now, f[<span class="hljs-number">0</span>][i][j][a][l] + f[d - <span class="hljs-number">1</span>][a + <span class="hljs-number">1</span>][j][k][l]);<br>            &#125;<br>            <span class="hljs-built_in">rep</span>(b, j, l - <span class="hljs-number">1</span>) &#123;<br>                now = <span class="hljs-built_in">min</span>(now, f[d - <span class="hljs-number">1</span>][i][j][k][b] + f[<span class="hljs-number">0</span>][i][b + <span class="hljs-number">1</span>][k][l]);<br>                now = <span class="hljs-built_in">min</span>(now, f[<span class="hljs-number">0</span>][i][j][k][b] + f[d - <span class="hljs-number">1</span>][i][b + <span class="hljs-number">1</span>][k][l]);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">if</span> (j + len - <span class="hljs-number">1</span> &lt;= n) <span class="hljs-built_in">rep</span>(k, i, n) <span class="hljs-built_in">F</span>(d, i, j, k, j + len - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (i + len - <span class="hljs-number">1</span> &lt;= n) <span class="hljs-built_in">rep</span>(l, j, n) <span class="hljs-built_in">F</span>(d, i, j, i + len - <span class="hljs-number">1</span>, l);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf\n&quot;</span>, <span class="hljs-built_in">sqrt</span>(f[m][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][n][n] / (m + <span class="hljs-number">1</span>)));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>dp</tag>
      
      <tag>区间 dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>关于 chichi</title>
    <link href="/5a57f70d/"/>
    <url>/5a57f70d/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.luogu.com.cn/paste/jbivldvr">chichi 的意思</a></p>]]></content>
    
    
    <categories>
      
      <category>水</category>
      
    </categories>
    
    
    <tags>
      
      <tag>chichi</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1561C 题解</title>
    <link href="/5982b441/"/>
    <url>/5982b441/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/contest/1561/problem/C">link</a></p><p>hzy 有一个力量值，有 <script type="math/tex">n</script> 个洞穴，hzy 可以以<strong>任意顺序</strong>探索洞穴，探索时一个洞穴不能必须<strong>打完</strong>里面的怪物才能去探索另外的洞穴。</p><p>第 <script type="math/tex">i</script> 个洞穴里有 <script type="math/tex">k_i</script> 个怪物，hzy 必须<strong>按顺序</strong>打这 <script type="math/tex">k_i</script> 个怪物。hzy 的力量必须<strong>严格</strong>大于怪兽的防御值 <script type="math/tex">a_{i,j}</script>，才能打败这个怪兽，打败一个怪兽后 hzy 的力量值会加 <script type="math/tex">1</script>。问 hzy<br>刚开始至少有多少力量才能探索完所有洞穴。</p><p><script type="math/tex">1 \le n \le 10^5</script>，<script type="math/tex">1 \le \sum k_i \le 10_5</script>，<script type="math/tex">1 \le a_{i,j} \le 10^9</script>。</p></blockquote><p>显然这题要用 useful 的算法！</p><p>对于每个洞穴，我们记两个值，探索完后 hzy 可以增加的力量值和最少需要多少力量值才能探索完。后者可以用 <script type="math/tex">k_i\log k_i</script> 的二分答案求出。</p><p>对于 <script type="math/tex">n</script> 个洞穴按照最少需要的力量值排序，然后再次二分，这次直接二分询问的答案。</p><p>总时间复杂度 <script type="math/tex">O(n\log n + \sum k_i \log k_i)</script></p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF (1000000010)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><br><br><span class="hljs-keyword">int</span> n, b[N];<br>pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i].fi &gt; x) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> x += a[i].se;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">check1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">if</span> (b[i] &gt;= x) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">else</span> x ++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        n = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            a[i].se = <span class="hljs-built_in">read</span>(), a[i].fi = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= a[i].se; j ++) &#123;<br>                b[j] = <span class="hljs-built_in">read</span>();<br>            &#125;<br>            <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = INF;<br>            <span class="hljs-keyword">while</span> (l + <span class="hljs-number">1</span> &lt; r) &#123;<br>                <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>                <span class="hljs-built_in">check1</span>(mid, a[i].se) ? r = mid : l = mid;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check1</span>(l, a[i].se)) r = l;<br>            a[i].fi = r;<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-number">0</span>, r = INF;<br>        <span class="hljs-keyword">while</span> (l + <span class="hljs-number">1</span> &lt; r) &#123;<br>            <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-built_in">check</span>(mid) ? r = mid : l = mid;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(l)) r = l;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, r);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1561E 题解</title>
    <link href="/9fedbdc6/"/>
    <url>/9fedbdc6/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/contest/1561/problem/E">link</a></p><p>给定长度为<strong>奇数</strong> <script type="math/tex">n</script> 的 <script type="math/tex">1</script> 到 <script type="math/tex">n</script> 的排列 <script type="math/tex">a</script>，要求找出一种长度不超过 <script type="math/tex">\dfrac{5n}{2}</script> 的操作序列，使 <script type="math/tex">a</script> 变为升序，或判断无解。操作如下：</p><ul><li>选择一个 <script type="math/tex">x \in [1,n]</script>，且 <script type="math/tex">x</script> 为<strong>奇数</strong>，将 <script type="math/tex">a_1</script> 到 <script type="math/tex">a_x</script> <strong>翻转</strong>。</li></ul><p><script type="math/tex">3 \le n \le 2021</script> 且为奇数，<script type="math/tex">1 \le a_i \le n</script>。</p></blockquote><p>首先怎么判断无解，因为 <script type="math/tex">x</script> 是奇数，所以翻转操作不改变位置的奇偶性，所以有解的充要条件是 <script type="math/tex">i</script> 和 <script type="math/tex">a_i</script> 的奇偶性都相同。</p><p>考虑将两个数绑到一起且倒着操作，比如 <script type="math/tex">n</script> 和 <script type="math/tex">n-1</script> 一起操作，这样相当与每对数要在五次操作内移动到最后的位置。</p><p>我们假设现在考虑的数位置为 <script type="math/tex">x</script> 和 <script type="math/tex">y</script>，<script type="math/tex">x</script> 要移到位置 <script type="math/tex">m</script>，操作 <script type="math/tex">F(x)</script> 表示前 <script type="math/tex">x</script> 的翻转操作，以下给出方案：</p><ol><li><script type="math/tex; mode=display">x=1,y=2:F(m)</script></li><li><script type="math/tex; mode=display">y + 1 = y:F(x), \rightarrow 1.</script></li><li><script type="math/tex; mode=display">x + 1 = y:F(y+1), \ F(y + 2 - x),\rightarrow 1.</script></li><li><script type="math/tex; mode=display">x + 1 < y:F(x),F(y - 1)\rightarrow 2.</script></li><li><script type="math/tex; mode=display">y + 1 < x:F(x),F(x - y)\rightarrow 2.</script></li></ol><p>很不优的构造 /kk，时间复杂度 <script type="math/tex">O(n^2)</script>。</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 2040</span><br> <br><span class="hljs-keyword">int</span> n, a[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">can</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">if</span> ((i &amp; <span class="hljs-number">1</span>) != (a[i] &amp; <span class="hljs-number">1</span>)) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">check</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= x; i ++) &#123;<br>        <span class="hljs-keyword">if</span> (i != a[i]) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    res.<span class="hljs-built_in">emplace_back</span>(x);<br>    <span class="hljs-built_in">reverse</span>(a + <span class="hljs-number">1</span>, a + x + <span class="hljs-number">1</span>);<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        res.<span class="hljs-built_in">clear</span>();<br>        n = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) a[i] = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">can</span>(n)) &#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>); <span class="hljs-keyword">continue</span>; &#125;<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">check</span>(n)) &#123;<br>            <span class="hljs-keyword">int</span> x, y;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>                <span class="hljs-keyword">if</span> (a[i] == n) x = i;<br>                <span class="hljs-keyword">if</span> (a[i] == n - <span class="hljs-number">1</span>) y = i;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (x == n &amp;&amp; y == n - <span class="hljs-number">1</span>) &#123; n -= <span class="hljs-number">2</span>; <span class="hljs-keyword">continue</span>; &#125;<br>            <span class="hljs-keyword">if</span> (x + <span class="hljs-number">1</span> &lt; y) <span class="hljs-built_in">F</span>(x), <span class="hljs-built_in">F</span>(y - <span class="hljs-number">1</span>), x = y - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (y + <span class="hljs-number">1</span> &lt; x) <span class="hljs-built_in">F</span>(x), y = (x + <span class="hljs-number">1</span> - y), <span class="hljs-built_in">F</span>(y - <span class="hljs-number">1</span>), x = y - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (x + <span class="hljs-number">1</span> == y) <span class="hljs-built_in">F</span>(y + <span class="hljs-number">1</span>), x = (y + <span class="hljs-number">2</span> - x), <span class="hljs-built_in">F</span>(x);<br>            <span class="hljs-keyword">else</span> <span class="hljs-built_in">F</span>(x);<br>            <span class="hljs-built_in">F</span>(n), n -= <span class="hljs-number">2</span>;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : res) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, x);<br>        <span class="hljs-keyword">if</span> (res.<span class="hljs-built_in">size</span>()) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>构造</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1561D1 题解</title>
    <link href="/eb319da4/"/>
    <url>/eb319da4/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://codeforces.com/contest/1561/problem/D1">link</a></p><p>你有一个数 <script type="math/tex">n</script>，问有多少种执行一下操作的方案，使 <script type="math/tex">n</script> 变成 <script type="math/tex">1</script></p><ul><li><p>将 <script type="math/tex">n</script> 减去一个在 <script type="math/tex">[1, x)</script> 的值 <script type="math/tex">x</script></p></li><li><p>将 <script type="math/tex">n</script> 除以一个 <script type="math/tex">(1, x]</script> 的值并向下取整。</p></li></ul><p>注意减或除的 <script type="math/tex">x</script> 不一样方案也不同，方案数对质数 <script type="math/tex">m</script> 取模。</p><script type="math/tex; mode=display">2 \le n \le 2 \times 10^5, \ 10^8 < m < 10^9, \ m \in prime</script></blockquote><p><del>为什么不直接写 D2 题解，因为我不会呀.</del></p><p>设 <script type="math/tex">f_i</script> 表示 <script type="math/tex">n = i</script> 时的答案。显然</p><script type="math/tex; mode=display">f_i = \sum_{j=1}^{x-1} f_j + \sum_{j=2}^x f_{\lfloor\dfrac{i}{j}\rfloor}</script><p>前面减的部分可以直接前缀和算，问题是后面部分。</p><p>然后的形式非常是整除分块的形式，可以用整除分块 <script type="math/tex">O(\sqrt{n})</script> 求。</p><p>时间复杂度 <script type="math/tex">O(n\sqrt{n})</script>。</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><br> <br><span class="hljs-keyword">int</span> n, P, f[N];<br> <br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = <span class="hljs-built_in">read</span>(), P = <span class="hljs-built_in">read</span>();<br>    f[<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">int</span> now = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++) &#123;<br>        f[i] = now;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> l = <span class="hljs-number">2</span>, r; l &lt;= i; l = r + <span class="hljs-number">1</span>) &#123;<br>            r = i / (i / l);<br>            (f[i] += (r - l + <span class="hljs-number">1</span>) % P * f[i / l] % P) %= P;<br>        &#125;<br>        now = (now + f[i]) % P;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>dp</tag>
      
      <tag>整除分块</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1622D 题解</title>
    <link href="/fac347e6/"/>
    <url>/fac347e6/</url>
    
    <content type="html"><![CDATA[<p>这么 sb 的题我居然没想出来，我太菜了 QAQ 。</p><hr><blockquote><p><a href="https://codeforces.com/problemset/problem/1622/D">link</a></p><p>给定长度为 $n$ 的 $01$ 序列 $a$，求进行一次一下操作后得到的不同的 $a$ 的方案数：</p><ul><li>选定一段<strong>恰好</strong>含有 $k$ 个 $1$ 的区间，将这个区间内的元素随意排列。</li></ul><p>$2 \le n \le 2 \times 5000$，$0 \le k \le n$，$a_i \in {0,1}$。</p></blockquote><p>看到题后就有一个思路，枚举所有满足条件的区间，容斥计算答案。我们来康康可不可以。</p><p>首先只需要枚举<strong>极大</strong>的满足条件的区间即可，因为对于一对 $[L,R]$，如果 $[L-x,R+y]$ 也只有 $k$ 个 $1$，那 $[L,R]$ 的所有方案都会包含在 $[L-x,R+y]$ 中。</p><p>我们还可以发现一个性质：一个区间和后面任意区间的交集都包含在和这个区间相邻的区间的交里面。</p><p>用韦恩图表示差不多是这样：</p><p><img src="\img\16.png" alt=""></p><p>所以不需要容斥，只要计算所有满足条件区间的和，减去两相邻区间的交的方案即可。看图好理解，模拟一下样例。</p><p>然后还有一个很妙的点：相邻的极大区间 $L$ 和 $R$ 都<strong>最多差 $1$</strong>。证明很简单，假设一个区间和与它相邻的差大于一，那么就是中间割了若干个零，这样的话这个区间就不是极大的了，可以把这串零再加进去。</p><p>既然最多差一，就可以算出所有相邻的极大区间的交集都有 $k - 1$  个 $1$。所以只要枚举所有长度为 $k$ 和 $k - 1$ 的区间计算一下就好了，时间复杂度 $O(N^2)$。</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 5010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> P 998244353</span><br><br><span class="hljs-keyword">int</span> n, k, fac[N], inv[N], res = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">char</span> a[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> r = <span class="hljs-number">1</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (; k; k &gt;&gt;= <span class="hljs-number">1</span>, x = x * x % P)<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) r = r * x % P;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mem</span><span class="hljs-params">()</span> </span>&#123;<br>    fac[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; N; i ++) &#123;<br>        fac[i] = fac[i - <span class="hljs-number">1</span>] * i % P;<br>    &#125;<br>    inv[N - <span class="hljs-number">1</span>] = <span class="hljs-built_in">Pow</span>(fac[N - <span class="hljs-number">1</span>], P - <span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = N - <span class="hljs-number">2</span>; i &gt;= <span class="hljs-number">0</span>; i --) &#123;<br>        inv[i] = inv[i + <span class="hljs-number">1</span>] * (i + <span class="hljs-number">1</span>) % P;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">C</span><span class="hljs-params">(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (n &lt; m) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> fac[n] * inv[m] % P * inv[n - m] % P;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">Mem</span>();<br>    n = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>(), <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, a + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (k == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>), <span class="hljs-number">0</span>;<br>    a[<span class="hljs-number">0</span>] = a[n + <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;1&#x27;</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i - <span class="hljs-number">1</span>] != <span class="hljs-string">&#x27;1&#x27;</span>) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i, s = <span class="hljs-number">0</span>; j &lt;= n; j ++) &#123;<br>            s += (a[j] == <span class="hljs-string">&#x27;1&#x27;</span>);<br>            <span class="hljs-keyword">if</span> (s == k - <span class="hljs-number">1</span> &amp;&amp; a[j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span> &amp;&amp; i != <span class="hljs-number">1</span> &amp;&amp; j != n) &#123;<br>                (res += P + <span class="hljs-number">1</span> - <span class="hljs-built_in">C</span>(j - i + <span class="hljs-number">1</span>, k - <span class="hljs-number">1</span>)) %= P;<br>            &#125; <br>            <span class="hljs-keyword">if</span> (s == k &amp;&amp; a[j + <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                (res += <span class="hljs-built_in">C</span>(j - i + <span class="hljs-number">1</span>, k) - <span class="hljs-number">1</span> + P) %= P;<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>数学</tag>
      
      <tag>计数</tag>
      
      <tag>乱搞</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1622E 题解</title>
    <link href="/36694778/"/>
    <url>/36694778/</url>
    
    <content type="html"><![CDATA[<p>差一点想出来，大意了呀。</p><hr><blockquote><p><a href="https://codeforces.com/problemset/problem/1622/E">link</a></p><p>有 <script type="math/tex">n</script> 个人参加了 <script type="math/tex">m</script> 道题的一场考试，已知老师对每个人的期望分值 <script type="math/tex">x_i</script> 和 <script type="math/tex">s_{i,j}</script> 表示每个人每道题是否做对。做对得分，做错不等分，令学生真实分数为 <script type="math/tex">r_i</script>。</p><p>要求你输出一种分数的分配方案，使老师的惊讶度最高。其中，<script type="math/tex">m</script> 道题的分数是一个 <script type="math/tex">1</script> 道 <script type="math/tex">m</script> 的排列，老师的惊讶值等于 <script type="math/tex">\sum_{i=1}^n |r_i-x_i|</script>。</p><p><script type="math/tex">1 \le n \le 10</script>，<script type="math/tex">1\le m \le 10^4</script>，<script type="math/tex">0 \le x_i \le \dfrac{m(m+1)}{2}</script>，<script type="math/tex">s_{i,j} \in \{0,1\}</script>。</p></blockquote><p><script type="math/tex">n</script> 这么小，状压搞起来，用每一位表示 <script type="math/tex">r_i-x_i</script> 的正负。这样可以直接把 <script type="math/tex">x</script> 都计算入答案，就不用考虑了。</p><p>求出每道题的一个系数 ，表示这道题计入贡献加或减了多少次，这样直接给系数最大的题分配最大的分值，最小的分配最小分值即可，显然正确。</p><p>时间复杂度 <script type="math/tex">O(2^nnm)</script>。</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 20</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 10010</span><br><br><span class="hljs-keyword">int</span> n, m, x[N], res, r[M];<br>pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; s[M];<br><span class="hljs-keyword">char</span> a[N][M];<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), res = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            x[i] = <span class="hljs-built_in">read</span>();<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, a[i] + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> st = <span class="hljs-number">0</span>; st &lt; <span class="hljs-number">1</span> &lt;&lt; n; st ++) &#123;<br>            <span class="hljs-keyword">int</span> now = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br>                s[i].first = <span class="hljs-number">0</span>;<br>                s[i].second = i;<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>                <span class="hljs-keyword">int</span> op = (st &gt;&gt; i - <span class="hljs-number">1</span>) &amp; <span class="hljs-number">1</span>;<br>                now += op ? -x[i] : x[i];<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>                    <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-string">&#x27;1&#x27;</span>) &#123;<br>                        s[j].first += op ? <span class="hljs-number">1</span> : <span class="hljs-number">-1</span>;<br>                    &#125;<br>                &#125;<br>            &#125;<br>            <span class="hljs-built_in">sort</span>(s + <span class="hljs-number">1</span>, s + m + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br>                now += i * s[i].first;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (now &gt; res) &#123;<br>                res = now;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br>                    r[s[i].second] = i;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, r[i]);<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>状压</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网页划水看小说工具</title>
    <link href="/6f366c0f/"/>
    <url>/6f366c0f/</url>
    
    <content type="html"><![CDATA[<p>我在划水吗？</p><p><img src="\img\15.png" alt=""></p><p>在浏览器中用一个小窗口看小说，我觉得还是挺难被发现的。</p><p>需要油猴或 ScriptCat。</p><p>使用方法：</p><div class="table-container"><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td>Alt+ ;</td><td>从本地上传书籍</td></tr><tr><td>Alt + /</td><td>开始阅读或老板键</td></tr><tr><td>Alt + ,</td><td>上一页</td></tr><tr><td>Alt + .</td><td>下一页</td></tr></tbody></table></div><p>拖动调整窗口位置，鼠标放到边缘调整窗口大小。</p><p>在<a href="https://github.com/YBWA/branor">这里</a>下载。</p><p><del>烂的和一坨 shit 一样</del></p>]]></content>
    
    
    <categories>
      
      <category>水</category>
      
    </categories>
    
    
    <tags>
      
      <tag>水</tag>
      
      <tag>js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1392 A-E</title>
    <link href="/e40158ce/"/>
    <url>/e40158ce/</url>
    
    <content type="html"><![CDATA[<h1 id="CF1392A"><a href="#CF1392A" class="headerlink" title="CF1392A"></a>CF1392A</h1><blockquote><p>给定长度为 $n$ 的序列 $a$。</p><p>如果 <script type="math/tex">a_i \neq a_{i+1}</script>  则可以合并 <script type="math/tex">a_i</script> 和 <script type="math/tex">a_{i+1}</script>,合并的元素后值为它们的和，总元素个数减一。</p><p>求进行若干次合并操作后最后元素个数的最小值。</p><p>$1 \le n \le 2 \times 10 ^ 5$，$1 \le a_i \le 10^9$。</p></blockquote><p>对于序列的最大值，除非两边点值都和它相同，否则它就可以一直合并直到只剩一个。</p><p>所以分类讨论一下，是不是所有元素都相等。</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br> <br><span class="hljs-keyword">int</span> a[<span class="hljs-number">200010</span>];<br> <br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">read</span>(), id = <span class="hljs-number">0</span>, same = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            a[i] = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-keyword">if</span> (i != <span class="hljs-number">1</span> &amp;&amp; a[i - <span class="hljs-number">1</span>] != a[i]) same = <span class="hljs-number">0</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (same) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n);<br>        <span class="hljs-keyword">else</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>   &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="CF1392B"><a href="#CF1392B" class="headerlink" title="CF1392B"></a>CF1392B</h1><blockquote><p>给定一个长度为 $n$ 的序列 $a$，输出执行以下操作 $k$ 次后的序列 $a$ ：</p><ul><li>找到序列元素的最大值 $d$，将每个 $a_i$ 变为 $d - a_i$；</li></ul><p>$1 \le n \le 2 \times 10^5$，$1 \le k \le 10^18$。</p></blockquote><p>手动模拟一下就能发现，$k$ 是奇数时 $a_i = d - a_i$，偶数时 $a_i = a_i - g$，$g$ 是最小值。</p><h2 id="CODE-1"><a href="#CODE-1" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF (1e9 + 7)</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">200010</span>];<br> <br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>(), Mx = -INF, Mn = INF;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            a[i] = <span class="hljs-built_in">read</span>();<br>            Mx = <span class="hljs-built_in">max</span>(Mx, a[i]);<br>            Mn = <span class="hljs-built_in">min</span>(Mn, a[i]);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, Mx - a[i]);<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, a[i] - Mn);<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="CF1392C"><a href="#CF1392C" class="headerlink" title="CF1392C"></a>CF1392C</h1><blockquote><p>给定一个长度为 $n$ 的序列 $a$，有以下操作：</p><ul><li>选择一个区间 $[l,r]$，将其中的元素都加上 $1$；</li></ul><p>求使 $a$ 单调不减的最小操作次数。</p></blockquote><p>答案就是 <script type="math/tex">\sum_{i=2}^n max(b_{i-1}-b_i,0)</script>。</p><p>对于 $i \in [2, n]$，如果 <script type="math/tex">b_i < b_{i-1}</script>，那么肯定要以 <script type="math/tex">l=i</script> 操作 <script type="math/tex">b_{i-1}-b_i</script> 次。右端点肯定是 <script type="math/tex">n</script> 最优，否则可能使得 <script type="math/tex">b_r > b_{r+1}</script>，徒增了操作次数。</p><h2 id="CODE-2"><a href="#CODE-2" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF (1e9 + 7)</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">200010</span>];<br> <br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">read</span>(), res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            a[i] = <span class="hljs-built_in">read</span>();<br>            res += <span class="hljs-built_in">max</span>(<span class="hljs-number">0ll</span>, a[i - <span class="hljs-number">1</span>] - a[i]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><del>让我 1min AC 了，开心</del></p><h1 id="CF1392D"><a href="#CF1392D" class="headerlink" title="CF1392D"></a>CF1392D</h1><blockquote><p>在一个<strong>起床战争</strong>局面中，有 $n$ 支队伍形成环状，第 $i$ 支在第 $i + 1$ 队伍左边，$n$ 在 $1$ 左边。用一个长度为 $n$ 的由 <code>L</code>、<code>R</code> 组成的字符串给出每支队伍在攻击它的左边还是右边。合法攻击满足以下条件：</p><ul><li><p>若只有 $b$ 攻击 $a$，$a$ 必须攻击 $b$；</p></li><li><p>若没有或有两支队伍攻击 $a$，$a$ 可以随意攻击左或右。</p></li></ul><p>求最少改变多少个队伍的攻击状态，使序列合法。</p><p>$1 \le n \le 2 \times 10^5$。</p></blockquote><p>唯一的不合法状态：只有 $b$ 攻击 $a$，而 $a$ 没有攻击 $b$ 。转换成字符串就是 <code>LLL</code> 和 <code>RRR</code>。</p><p>问题转换成改变多少个 <code>L</code> 和 <code>R</code>，使环形字符串不含 <code>LLL</code> 和 <code>RRR</code>。扫一遍瞎搞搞即可。</p><p>代码写得贼丑。</p><h2 id="CODE-3"><a href="#CODE-3" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br> <br><span class="hljs-keyword">char</span> s[<span class="hljs-number">200010</span>];<br> <br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">read</span>(), res = <span class="hljs-number">0</span>;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>, s + <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">int</span> st = <span class="hljs-number">1</span>, i = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (s[st] == s[<span class="hljs-number">1</span>]) st ++;<br>        <span class="hljs-keyword">if</span> (st &gt; n) &#123;<br>            <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">2</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">3</span>) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>            <span class="hljs-keyword">else</span> &#123;<br>                res = n / <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">if</span> (res * <span class="hljs-number">3</span> != n) res ++;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>            &#125;<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br>        i = st;<br>        <span class="hljs-keyword">do</span> &#123;<br>            <span class="hljs-keyword">int</span> j = i, nw = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">while</span> (s[(j == n ? <span class="hljs-number">1</span> : j + <span class="hljs-number">1</span>)] == s[i] &amp;&amp; (j == n ? <span class="hljs-number">1</span> : j + <span class="hljs-number">1</span>) != st) &#123;<br>                nw ++;<br>                j ++;<br>                <span class="hljs-keyword">if</span> (j &gt; n) j = <span class="hljs-number">1</span>;<br>            &#125;<br>            res += nw / <span class="hljs-number">3</span>;<br>            i = j + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i &gt; n) i = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">while</span> (i != st);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h1 id="CF1392E"><a href="#CF1392E" class="headerlink" title="CF1392E"></a>CF1392E</h1><blockquote><p>交互题。认真读题。</p><p>给定 $n$，要求你<strong>构造</strong>（注意）一个 $n \times n$ 的矩阵，其中的元素 $a_{i,j} \in [0,10^16]$。</p><p>输出这个矩阵后会给你 $q$ 次询问，每次询问给出一条 $(1,1)$ 到 $(n,n)$ 路径（只能向下或右）上所有元素的和，要求你输出这条路径。<strong>你的路径与答案不相同即会 WA，这意味着路径是唯一的。</strong></p><p>$1 \le n \le 25$，$0 \le a_{i,j} \le 10^{16}$。</p></blockquote><p>让你构造一个矩阵没有两条路径值相同，显然构造题，容易想到和二进制有关。</p><p>注意到 $10^{16} \approx 2^{50}$，走过的点的数量 $2n-1 &lt; 50$，诶，对上了，有戏。</p><p>考虑将用二进制第 $x$ 位表示经过时第 $x$ 个点是向下还是向右了。</p><p>这样的话，就要保证向下和向右一个是 $0$, 一个是 $2^x$。所以对于所有 $i+j=x$，即所有可能在第 $x$ 步经过的点，一条对角线，让 $0$ 和 $2^x$ 交替出现即可。（以上可能有加一减一的问题。）</p><p>比如 $n=4$ 时的一个矩阵：<br><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs basic"><span class="hljs-symbol">0 </span> <span class="hljs-number">0</span>  <span class="hljs-number">0</span>   <span class="hljs-number">0</span><br><span class="hljs-symbol">2 </span> <span class="hljs-number">4</span>  <span class="hljs-number">8</span>   <span class="hljs-number">0</span><br><span class="hljs-symbol">0 </span> <span class="hljs-number">0</span>  <span class="hljs-number">16</span>  <span class="hljs-number">0</span><br><span class="hljs-symbol">8 </span> <span class="hljs-number">0</span>  <span class="hljs-number">32</span>  <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure></p><h2 id="CODE-4"><a href="#CODE-4" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 110</span><br> <br><span class="hljs-keyword">int</span> n, s[N], a[N][N];<br> <br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++) &#123;<br>            <span class="hljs-keyword">int</span> x = i + j;<br>            a[i][j] = (s[x] ++ &amp; <span class="hljs-number">1ll</span>) &lt;&lt; x - <span class="hljs-number">2</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, a[i][j]);<br>        &#125; <br>        <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>), <span class="hljs-built_in">fflush</span>(stdout);<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        <span class="hljs-keyword">int</span> s = <span class="hljs-built_in">read</span>(), x = <span class="hljs-number">1</span>, y = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (x != n || y != n) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, x, y), <span class="hljs-built_in">fflush</span>(stdout);<br>            <span class="hljs-keyword">int</span> st = s &amp; (<span class="hljs-number">1ll</span> &lt;&lt; (x + y - <span class="hljs-number">1ll</span>));<br>            (st == a[x + <span class="hljs-number">1</span>][y] &amp;&amp; x &lt; n) ? x ++ : y ++;<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld %lld\n&quot;</span>, x, y), <span class="hljs-built_in">fflush</span>(stdout);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><blockquote><p>TIP</p><p>使用位运算时别忘了 <code>1ll</code>，这两天被坑了几次了 。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>构造</tag>
      
      <tag>交互</tag>
      
      <tag>模拟</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我（贺来）的 sb 矩乘封装</title>
    <link href="/791ce38f/"/>
    <url>/791ce38f/</url>
    
    <content type="html"><![CDATA[<p>如题，经过巨佬的指导和我的不懈贺贺贺，我得到了一个很 sb 的矩乘封装！</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> P 998244353</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> L long long</span><br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Mat</span> &#123;</span><br>    <span class="hljs-keyword">int</span> n, m;<br>    vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt; &gt; a;<br>    <span class="hljs-built_in">Mat</span>(): <span class="hljs-built_in">n</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">m</span>(<span class="hljs-number">0</span>), <span class="hljs-built_in">a</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt; &gt;()) &#123;&#125;<br>    <span class="hljs-built_in">Mat</span>(<span class="hljs-keyword">int</span> n, <span class="hljs-keyword">int</span> m): <span class="hljs-built_in">n</span>(n), <span class="hljs-built_in">m</span>(m), <br>        <span class="hljs-built_in">a</span>(vector&lt;vector&lt;<span class="hljs-keyword">int</span>&gt; &gt;(n + <span class="hljs-number">1</span>, vector&lt;<span class="hljs-keyword">int</span>&gt;(m + <span class="hljs-number">1</span>))) &#123;&#125;<br>    vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">int</span> x) &amp; &#123; <span class="hljs-keyword">return</span> a[x]; &#125;<br>    <span class="hljs-keyword">const</span> vector&lt;<span class="hljs-keyword">int</span>&gt;&amp; <span class="hljs-keyword">operator</span>[](<span class="hljs-keyword">int</span> x) <span class="hljs-keyword">const</span>&amp; &#123; <span class="hljs-keyword">return</span> a[x]; &#125;<br>    Mat <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> Mat &amp;b) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-function">Mat <span class="hljs-title">r</span><span class="hljs-params">(n, b.m)</span></span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++)<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">1</span>; k &lt;= m; k ++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= b.m; j ++)<br>                    r[i][j] = ((L)r[i][j] + (L)a[i][k] * (L)b[k][j] % P + P) % P;<br>                &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>    Mat <span class="hljs-keyword">operator</span>^(<span class="hljs-keyword">int</span> k) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-function">Mat <span class="hljs-title">r</span><span class="hljs-params">(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>)</span>, x </span>= *<span class="hljs-keyword">this</span>;<br>        <span class="hljs-keyword">for</span> (; k; k &gt;&gt;= <span class="hljs-number">1</span>, x = x * x) &#123;<br>            <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) r = (!r.n) ? r = x : r * x;<br>        &#125;<br>        <span class="hljs-keyword">return</span> r;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure><p>这么 sb 的代码有什么 sb 的功能吗？有！！！来康！</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function">Mat <span class="hljs-title">foo</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">// 通过构造函数定义大小，数组从 1 开始</span><br>foo[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = <span class="hljs-number">114514</span>; <span class="hljs-comment">// 重载中括号运算符，直接访问数组</span><br><span class="hljs-function">Mat <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">5</span>)</span>, <span class="hljs-title">b</span><span class="hljs-params">(<span class="hljs-number">4</span>, <span class="hljs-number">3</span>)</span></span>;<br>Mat c = a * b; <span class="hljs-comment">// 直接乘！</span><br>Mat c = a ^ <span class="hljs-number">3</span> <span class="hljs-comment">// 矩阵快速幂！！！</span><br></code></pre></div></td></tr></table></figure><p>还有一点，矩乘的时候修改了枚举顺序据说会更快！</p><p><del>这么 sb 的代码鬼才背得下来</del></p>]]></content>
    
    
    <categories>
      
      <category>模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>语法</tag>
      
      <tag>矩阵</tag>
      
      <tag>矩阵乘法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1654CDE 题解</title>
    <link href="/94734546/"/>
    <url>/94734546/</url>
    
    <content type="html"><![CDATA[<h1 id="CF1654CDE-题解"><a href="#CF1654CDE-题解" class="headerlink" title="CF1654CDE 题解"></a>CF1654CDE 题解</h1><h2 id="CF1654C"><a href="#CF1654C" class="headerlink" title="CF1654C"></a>CF1654C</h2><blockquote><p>有一块大小为任意正整数蛋糕，可进行以下操作任意次（可以是 $0$ 次）得到一个无序蛋糕的集合：</p><ul><li>选择一块蛋糕，它的大小为 $w$，则切为 $\lfloor\dfrac{w}{2}\rfloor$ 和 $\lceil\dfrac{w}{2}\rceil$ 两块放回；</li></ul><p>现在给一个有 $n$ 个蛋糕的集合 $a$，问是否合法，即能否通过若干次操作得到这样一个蛋糕集合。</p><p>$1 \le n \le 2 \times 10^5$，$1 \le a_i \le 10^9$。</p></blockquote><p>sb 题，没有想到怎么水的题我做了一个小时。考虑倒着做，计算出 $\sum{a_i}$ 放入一个队列，每次取出队头，如果 $a$ 中有这个数就把这个数删去，没有就把队头裂开放到队尾。</p><p>比赛时的实现很糟糕，还用了排序和大根堆。</p><h4 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><br><br><span class="hljs-keyword">int</span> n, a[N], sum;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        n = <span class="hljs-built_in">read</span>(), sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            a[i] = <span class="hljs-built_in">read</span>();<br>            sum += a[i];<br>        &#125;<br>        <span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>);<br><br>        <span class="hljs-keyword">int</span> id = n;<br>        priority_queue&lt;<span class="hljs-keyword">int</span>&gt; q; q.<span class="hljs-built_in">push</span>(sum);<br>        <span class="hljs-keyword">while</span> (!q.<span class="hljs-built_in">empty</span>() &amp;&amp; id &gt;= <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> x = q.<span class="hljs-built_in">top</span>(); q.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (x &lt; a[id]) <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">if</span> (x == a[id]) id --;<br>            <span class="hljs-keyword">else</span> q.<span class="hljs-built_in">push</span>(x - x / <span class="hljs-number">2</span>), q.<span class="hljs-built_in">push</span>(x / <span class="hljs-number">2</span>);<br>        &#125;<br>        (id &lt; <span class="hljs-number">1</span>) ? <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>) : <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="CF1654D"><a href="#CF1654D" class="headerlink" title="CF1654D"></a>CF1654D</h2><blockquote><p>给定一棵树，有边权有点权，点权都是正整数。一条边 $(u,v)$ 的边权 $(x,y)$ 表示 $a_u:a_v=x:y$。求出一组和最小的点权，满足这 $n - 1$ 条边权，输出这个和，答案对 $998244353$ 取模。</p><p>$2 \le n \le2 \times10^5$，$1 \le x,y \le n$。</p></blockquote><p>比赛的时候方向是对的。。。就是没利用 $x,y$ 的范围，然后就GG了。</p><p>钦定 1 号点的点权为 1，我们就可以用 <script type="math/tex">\tt{dfs}</script> 所有点权的分数表达形式，即 <script type="math/tex">a_1:a_i=x_i:y_i</script> 中的 <script type="math/tex">x_i</script> 和 <script type="math/tex">y_i</script>，这里 <script type="math/tex">x_i</script> 和 <script type="math/tex">y_i</script> 是互质的。因为 <script type="math/tex">a_i=\dfrac{a_1y_i}{x_i}</script> 所以 <script type="math/tex">a_1</script> 是 <script type="math/tex">x_i</script> 的倍数，因此 <script type="math/tex">a_1</script> 的最小值就是 <script type="math/tex">lcm(x_i)</script>，<script type="math/tex">2\le i\le n</script>。这样就可以求出每个点权了，整理一下就是 <script type="math/tex">a_1(\sum_{2\le i\le n}\dfrac{y_i}{x_i}\ \ +1)</script>。</p><p>这时候有个很严重的问题：$x_i$ 和 $y_i$ 可能很大，会爆炸。然后我们发现 $x,y$ 只有 <code>2e5</code>，因此我们可以把 $x_i$ 和 $y_i$ 用分解质因数的方式来表示。求最大公倍数的话只要对于所有质因数取指数的最大值即可。具体实现看代码吧。</p><p>不算预处理的话复杂度 $O(n\log n)$。</p><h4 id="CODE-1"><a href="#CODE-1" class="headerlink" title="CODE"></a>CODE</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> P 998244353</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PIII pair<span class="hljs-meta-string">&lt;int, pair&lt;int, int&gt;</span> &gt;</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><br><span class="hljs-keyword">int</span> n, X[N], Y[N], lcm[N], vis[N], res = <span class="hljs-number">0</span>;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; pr;<br>vector&lt;PII &gt; dv[N];<br>vector&lt;PIII &gt; e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Mem</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++) &#123;<br>        <span class="hljs-keyword">if</span> (!vis[i]) pr.<span class="hljs-built_in">push_back</span>(i);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; pr.<span class="hljs-built_in">size</span>() &amp;&amp; i * pr[j] &lt; N; j ++) &#123;<br>            vis[i * pr[j]] = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">if</span> (i % pr[j]) <span class="hljs-keyword">continue</span>;<br>        &#125;<br>    &#125;<br>    dv[<span class="hljs-number">1</span>].<span class="hljs-built_in">emplace_back</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>, x = <span class="hljs-number">2</span>; i &lt; N; x = ++ i) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>, s; pr[j] * pr[j] &lt;= i; j ++) &#123;<br>            <span class="hljs-keyword">for</span> (s = <span class="hljs-number">0</span>; x % pr[j] == <span class="hljs-number">0</span>;) s ++, x /= pr[j];<br>            <span class="hljs-keyword">if</span> (s != <span class="hljs-number">0</span>) dv[i].<span class="hljs-built_in">emplace_back</span>(pr[j], s);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (x != <span class="hljs-number">1</span>) dv[i].<span class="hljs-built_in">emplace_back</span>(x, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> !y ? x : <span class="hljs-built_in">gcd</span>(y, x % y);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> r = <span class="hljs-number">1</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (; k; k &gt;&gt;= <span class="hljs-number">1</span>, x = x * x % P) &#123;<br>        <span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) r = r * x % P;<br>    &#125;<br>    <span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">F</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> op)</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> g = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : dv[x]) &#123;<br>        <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>            a[it.fi] += it.se;<br>            <span class="hljs-keyword">if</span> (X[it.fi] &gt; lcm[it.fi]) &#123;<br>                (lcm[<span class="hljs-number">0</span>] *= <span class="hljs-built_in">Pow</span>(it.fi, X[it.fi] - lcm[it.fi])) %= P;<br>                lcm[it.fi] = X[it.fi];<br>            &#125;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> v = <span class="hljs-built_in">min</span>(a[it.fi], it.se);<br>            a[it.fi] -= v;<br>            (g *= <span class="hljs-built_in">Pow</span>(it.fi, it.se - v)) %= P;<br>        &#125;<br>    &#125;<br>    (a[<span class="hljs-number">0</span>] *= (op == <span class="hljs-number">1</span> ? x : <span class="hljs-built_in">Pow</span>(x / g, P - <span class="hljs-number">2</span>))) %= P;<br>    <span class="hljs-keyword">return</span> g;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> u, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> it : e[u]) <span class="hljs-keyword">if</span> (it.fi != fa) &#123;<br>        <span class="hljs-keyword">int</span> v = it.fi, x = it.se.fi, y = it.se.se;<br>        y = <span class="hljs-built_in">F</span>(X, y, <span class="hljs-number">-1</span>), x = <span class="hljs-built_in">F</span>(Y, x, <span class="hljs-number">-1</span>);<br>        <span class="hljs-built_in">F</span>(X, x, <span class="hljs-number">1</span>), <span class="hljs-built_in">F</span>(Y, y, <span class="hljs-number">1</span>);<br>        (res += Y[<span class="hljs-number">0</span>] * <span class="hljs-built_in">Pow</span>(X[<span class="hljs-number">0</span>], P - <span class="hljs-number">2</span>) % P) %= P, <span class="hljs-built_in">dfs</span>(v, u);<br>        <span class="hljs-built_in">F</span>(X, x, <span class="hljs-number">-1</span>), <span class="hljs-built_in">F</span>(Y, y, <span class="hljs-number">-1</span>);<br>        <span class="hljs-built_in">F</span>(X, it.se.se / y, <span class="hljs-number">1</span>), <span class="hljs-built_in">F</span>(Y, it.se.fi / x, <span class="hljs-number">1</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">Mem</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        n = <span class="hljs-built_in">read</span>(), X[<span class="hljs-number">0</span>] = Y[<span class="hljs-number">0</span>] = lcm[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>, res = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i ++) &#123;<br>            <span class="hljs-keyword">int</span> u = <span class="hljs-built_in">read</span>(), v = <span class="hljs-built_in">read</span>(), x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), g = <span class="hljs-built_in">gcd</span>(x, y);<br>            e[u].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">mp</span>(v, <span class="hljs-built_in">mp</span>(x / g, y / g)));<br>            e[v].<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">mp</span>(u, <span class="hljs-built_in">mp</span>(y / g, x / g)));<br>        &#125;<br>        <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>), <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (res + <span class="hljs-number">1</span>) % P * lcm[<span class="hljs-number">0</span>] % P);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            e[i].<span class="hljs-built_in">clear</span>(), X[i] = Y[i] = lcm[i] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="CF1654E"><a href="#CF1654E" class="headerlink" title="CF1654E"></a>CF1654E</h2><blockquote><p>给定长度 $n$ 的序列 $a$，求最少改变多少个数的值，使这 $n$ 个数形成等差数列。</p><p>$1\le n \le 10^5$，$1\le a_i\le 10^5$。</p></blockquote><p>将问题放到二维坐标系上，每个点的坐标为 $(i,a_i)$ 。考虑等差数列的几何意义是一条直线，可以问题转化为求一条直线最多经过多少个点。</p><p>根号分治，设坐标的最大值为 $m$：</p><ul><li><p>考虑当斜率的绝对值小于等于 $\sqrt m$  时的情况，知道斜率我们就可以对于每个点求出截距，开个桶记录截距出现的次数，取最大值即可，复杂度 $O(n\sqrt m)$；</p></li><li><p>斜率的绝对值大于 $\sqrt m$ 时，显然直线最远端两点横向距离不超过 $\sqrt m$，否则一乘就超过最大值 $m$ 了。所以类似的，对于一个点，枚举它后面的 $\sqrt m$ 个点，将这两点的斜率加入桶，取最大值即可，同样 $O(n\sqrt m)$。</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br> <br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br> <br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 30000010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> B 233</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> K 434</span><br> <br><span class="hljs-keyword">int</span> n, a[N], res, vc[M &lt;&lt; <span class="hljs-number">1</span>];<br> <br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) a[i] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = -B; i &lt;= B; i ++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++) res = <span class="hljs-built_in">max</span>(res, ++ vc[a[j] - j * i + M]);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++) vc[a[j] - j * i + M] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">min</span>(i + K ,n); j ++) &#123;<br>            <span class="hljs-keyword">if</span> ((a[j] - a[i]) % (j - i) == <span class="hljs-number">0</span>) &#123;<br>                res = <span class="hljs-built_in">max</span>(res, ++ vc[(a[j] - a[i]) / (j - i) + M] + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= <span class="hljs-built_in">min</span>(i + K ,n); j ++) &#123;<br>            vc[(a[j] - a[i]) / (j - i) + M] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, n - res);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>数学</tag>
      
      <tag>大根堆</tag>
      
      <tag>stl</tag>
      
      <tag>分解质因数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>最小距离</title>
    <link href="/2ee54131/"/>
    <url>/2ee54131/</url>
    
    <content type="html"><![CDATA[<blockquote><p>给定一张 $n$ 个点 $m$ 条边的带边权连通无向图，其中有 $p$ 个点是特殊点。</p><p>对于每个特殊点，求出它到离它最近的其它特殊点的距离。</p><p>$1 \le n,m \le 2 \times 10^5$，$2 \le p \le n$，$1 \le w \le 10^9$</p></blockquote><p>首先，在 $\tt{Dijkstra}$ 前加入所有特殊点并把最短路设置为 $0$ ，跑的时候记录每个点 $x$ 的最短路是从哪里转移来的（$from_x$），这样跑完后就可以得出距离每个非特殊点最近的特殊点以及这个点的编号。</p><p>然后我们遍历所有边，对于这个边距离两个端点 $x$、$y$，如果 $from_x$ 和 $from_y$ 不同，就用 $dis_x+dis_y+w$ 更新 $from_x$ 和 $from_y$ 的答案。</p><p>考虑这样为什么是对的，假设离特殊点 $x$ 最近的特殊点点是 $y$，在边 $(u,v)$ 时两端的 $from$ 不同，即答案应当在这条边更新，我们假设这个算法是错误的，那么答案就不能更新，那么 $from_u \neq x$ 或 $from_v \neq y$。</p><ul><li>$ from_v = z \neq y $ ，则 <code>dis[v][z] &lt; dis[v][y]</code> ，则 <code>dis[x][z] &lt; dis[x][y]</code>，矛盾；</li><li>$ from_u = w \neq x $ ，则 <code>dis[u][w] &lt; dis[u][y]</code>，同理；</li></ul><p><img src="\img\14.png" alt=""><br>（第一种情况的图）</p><p>然后就没了。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 400010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF (1e17)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><br><span class="hljs-keyword">int</span> n, m, p, a[N], hd[N], cnt = <span class="hljs-number">1</span>, dis[N], from[N], res[N], vis[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br><span class="hljs-keyword">int</span> y, v, to;<br><span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> _y = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> _v = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> _to = <span class="hljs-number">0</span>) &#123;<br>y = _y, v = _v, to = _to;<br>&#125;<br>&#125;e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addE</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>e[++ cnt] = <span class="hljs-built_in">node</span>(y, v, hd[x]), hd[x] = cnt;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Dij</span><span class="hljs-params">()</span> </span>&#123;<br>priority_queue&lt;PII, vector&lt;PII&gt;, greater&lt;PII&gt; &gt; pr;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) dis[i] = INF;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= p; i ++) &#123;<br>dis[a[i]] = <span class="hljs-number">0</span>, from[a[i]] = a[i];<br>pr.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">0</span>, a[i]));<br>&#125;<br><span class="hljs-keyword">while</span> (!pr.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-keyword">int</span> x = pr.<span class="hljs-built_in">top</span>().second; pr.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (vis[x]) <span class="hljs-keyword">continue</span>; <span class="hljs-keyword">else</span> vis[x] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[x]; i; i = e[i].to) &#123;<br><span class="hljs-keyword">int</span> y = e[i].y, v = e[i].v;<br><span class="hljs-keyword">if</span> (dis[x] + v &lt; dis[y]) &#123;<br>dis[y] = dis[x] + v;<br>from[y] = from[x];<br>pr.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">make_pair</span>(dis[y], y));<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), p = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= p; i ++) &#123;<br>a[i] = <span class="hljs-built_in">read</span>();<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), v = <span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">addE</span>(x, y, v), <span class="hljs-built_in">addE</span>(y, x, v);<br>&#125;<br><span class="hljs-built_in">Dij</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) res[i] = INF;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= cnt; i += <span class="hljs-number">2</span>) &#123;<br><span class="hljs-keyword">int</span> x = e[i ^ <span class="hljs-number">1</span>].y, y = e[i].y, v = e[i].v;<br><span class="hljs-keyword">if</span> (from[x] == from[y]) <span class="hljs-keyword">continue</span>;<br>res[from[x]] = <span class="hljs-built_in">min</span>(res[from[x]], dis[x] + dis[y] + v);<br>res[from[y]] = <span class="hljs-built_in">min</span>(res[from[y]], dis[x] + dis[y] + v);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= p; i ++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, res[a[i]]);<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>dijstra</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一道 sb 题的 sb 做法</title>
    <link href="/cb8706ba/"/>
    <url>/cb8706ba/</url>
    
    <content type="html"><![CDATA[<blockquote><p>有 $n$ 座城市，第 $i$ 座城市里宝石的交易价格为 $a_i$。当你经过第 $i$ 座城市时，你可以以 $a_i$的价格购买或卖出一个宝石。在任意时刻，你最多只能携带一个宝石。</p><p>有 $m$ 次操作，操作分为两种：</p><ul><li><p>询问依次经过 $l$ 到 $r$ 的城市的城市能获得的最大收益。<strong>最后离开编号为 $r$ 的城市时，身上不能携带宝石</strong>；</p></li><li><p>将 $l$ 到 $r$ 的宝石价格修改为一个首项为 $x$，公差为 $y$的等差数列；</p></li></ul><p>$1 \le n ,m \le 2 \times 10^5$，$1 \le l \le r \le n$，$1 \le a_i,x \le 10^9$，$|y|\le10^4$</p></blockquote><p>看到这个题感觉就是线段树，所以我们用线段树做。</p><p>主要的问题是询问操作不好维护，我们要思考怎么用两个儿子的答案合并出父亲的答案。</p><p>如果我们对于一个线段树节点只记录它这个区间的最大收益，显然是不能合并的。为什么？因为有种情况是走出左儿子后还剩下一个宝石，把这个宝石留到右儿子去卖。</p><p>为了处理这个情况，我们维护四个信息 $a\left[0/1\right]\left[0/1\right]$，一维的 $0/1$ 表示进入这个区间，即到了 $l$ 时时有没有宝石，二维的表示出这个区间的时候有没有宝石。然后合并就非常简单了：</p><script type="math/tex; mode=display">now\_a[i][j]=leftson\_a[i][k]+rightson\_a[k][j]\ \ \ \ (i,j,k \in [0,1])</script><p>接下来要考虑的问题就是修改。我们要想办法让修改区间覆盖一个线段树区间时 $\Theta(1)$ 修改。</p><p>其实很简单，两种情况：</p><ul><li>$ y&lt;0$，这时等差数列是递减的，所以<ul><li>前面买后面卖肯定是亏的，所以 $a[0][0]=0$；</li><li>最后一个最小所以肯定在最后一个买，所以 $a[0][1]=x+y\times(r-l)$；</li><li>第一个最大所以在第一个买最赚，所以 $a[1][0]=x$；</li><li>在第一个卖，最后一个买最赚，所以 $a[1][1] = -y\times(r-l)$</li></ul></li><li>$y &gt; 0$，等差数列递增，<del>读者自算不难</del>；</li></ul><p>然后这题就做完了。</p><p><strong>CODE :</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> $() &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF (1e16)</span><br><br><span class="hljs-keyword">int</span> n, m, a[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br><span class="hljs-keyword">int</span> a[<span class="hljs-number">2</span>][<span class="hljs-number">2</span>];<br><span class="hljs-built_in">node</span> (<span class="hljs-keyword">int</span> x = -INF, <span class="hljs-keyword">int</span> y = -INF, <span class="hljs-keyword">int</span> z = -INF, <span class="hljs-keyword">int</span> w = -INF) &#123;<br>a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = x, a[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = y, a[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = z, a[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = w;<br>&#125;<br>&#125;;<br><span class="hljs-function">node <span class="hljs-title">F</span><span class="hljs-params">(node x, node y)</span> </span>&#123;<br>node r;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1</span>; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">1</span>; j ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt;= <span class="hljs-number">1</span>; k ++) &#123;<br>r.a[i][j] = <span class="hljs-built_in">max</span>(r.a[i][j], x.a[i][k] + y.a[k][j]);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid (id &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid (id &lt;&lt; 1 | 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mid (l + r &gt;&gt; 1)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Seg</span> &#123;</span> node s; <span class="hljs-keyword">int</span> x, y; &#125;tr[N * <span class="hljs-number">4</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br><span class="hljs-keyword">return</span> tr[id].s = <span class="hljs-built_in">node</span>(<span class="hljs-number">0</span>, -a[l], a[l], <span class="hljs-number">0</span>), <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>&#125;<br><span class="hljs-built_in">build</span>(lid, l, mid), <span class="hljs-built_in">build</span>(rid, mid + <span class="hljs-number">1</span>, r);<br>tr[id].s = <span class="hljs-built_in">F</span>(tr[lid].s, tr[rid].s);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Calc</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = tr[id].x, y = tr[id].y;<br><span class="hljs-keyword">if</span> (y &lt; <span class="hljs-number">0</span>) &#123;<br>tr[id].s = <span class="hljs-built_in">node</span>(<span class="hljs-number">0ll</span>, -(x + (r - l) * y), x, -y * (r - l));<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>tr[id].s = <span class="hljs-built_in">node</span>(y * (r - l), -x, y * (r - l) + x, <span class="hljs-number">0ll</span>);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Down</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (tr[id].x == <span class="hljs-number">0</span> &amp;&amp; tr[id].y == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span>;<br>tr[lid].x = tr[id].x;<br>tr[rid].x = tr[id].x + tr[id].y * (mid - l + <span class="hljs-number">1</span>);<br>tr[lid].y = tr[rid].y = tr[id].y;<br>tr[id].x = tr[id].y = <span class="hljs-number">0</span>;<br><span class="hljs-built_in">Calc</span>(lid, l, mid), <span class="hljs-built_in">Calc</span>(rid, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-built_in">Down</span>(id, l, r);<br><span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) &#123;<br><span class="hljs-keyword">return</span> tr[id].x = x, tr[id].y = y, <span class="hljs-built_in">Calc</span>(id, l, r);<br>&#125;<br><span class="hljs-keyword">if</span> (L &lt;= mid) <span class="hljs-built_in">Add</span>(lid, l, mid, L, R, x, y);<br><span class="hljs-keyword">if</span> (R &gt; mid) <span class="hljs-built_in">Add</span>(rid, mid + <span class="hljs-number">1</span>, r, L, R, x + <span class="hljs-built_in">max</span>(<span class="hljs-number">0ll</span>, mid - <span class="hljs-built_in">max</span>(l, L) + <span class="hljs-number">1</span>) * y, y);<br>tr[id].s = <span class="hljs-built_in">F</span>(tr[lid].s, tr[rid].s);<br>&#125;<br><span class="hljs-function">node <span class="hljs-title">Ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> L, <span class="hljs-keyword">int</span> R)</span> </span>&#123;<br><span class="hljs-built_in">Down</span>(id, l, r);<br><span class="hljs-keyword">if</span> (L &lt;= l &amp;&amp; r &lt;= R) <span class="hljs-keyword">return</span> tr[id].s;<br>node lr, rr; <span class="hljs-keyword">int</span> vl = <span class="hljs-number">0</span>, vr = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (L &lt;= mid) lr = <span class="hljs-built_in">Ask</span>(lid, l, mid, L, R), vl = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (R &gt; mid) rr = <span class="hljs-built_in">Ask</span>(rid, mid + <span class="hljs-number">1</span>, r, L, R), vr = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (!vl) <span class="hljs-keyword">return</span> rr;<br><span class="hljs-keyword">if</span> (!vr) <span class="hljs-keyword">return</span> lr;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">F</span>(lr, rr);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;gem.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;gem.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br>n = $(), m = $();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) a[i] = $();<br><br><span class="hljs-built_in">build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">int</span> op = $(), l = $(), r = $(), x, y;<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">Ask</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r).a[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>x = $(), y = $(), <span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, n, l, r, x, y);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>线段树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1140F 题解</title>
    <link href="/b2350dd9/"/>
    <url>/b2350dd9/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://hydro.ac/CF1140F">link</a><br>一个点集 $S = (x_i, y_i)$ 的张集定义如下：</p><ul><li>刚开始张集等于 $S$；</li><li>若对于点 $(x, y)$ ，存在 $(a, b)$，使得 $(a, b)$ 、 $(a, y)$ 、 $(x, b)$ 属于张集，则将 $(x, y)$ 加入张集；</li><li>重复上述操作直到不能操作，此时集合即为 $S$ 的张集。<br>现在有 $q$ 次操作每次操作会添加或删除一个点，    求每次操作后张集点的个数。<br>$1 \le q, x_i, y_i \le 3 \times 10^5$。</li></ul></blockquote><p>首先一个肯定不好处理，转换成 $x_i$ 向 $y_i$ 连边，把集合对应一个图。</p><p>这样每个点都是一个横点（$x$）向一个纵点（$y$）连边，因此这个图任何时刻都是一个二分图（当然可以有多个联通块）。</p><p>接下来有个结论：<strong>$S$ 的张集所对应的图，就是 $S$ 对应的二分图的完全二分图</strong>。</p><p>这里给出一个比较感性的证明。我们回到点的角度，将点放到坐标系中：</p><p><img src="\img\11.png" alt=""></p><p>对于<strong>直角形</strong>的结构，显然可以再得到一个点，像这样：</p><p><img src="\img\12.png" alt=""></p><p>所以，我们可以一直加，直到点形成一个<strong>矩形</strong>的形状，这时候才没有可以加的点了：</p><p><img src="\img\13.png" alt=""></p><p>然后发现，<strong>矩形就对应了一个完全二分图</strong>，得证。</p><p>对于完全二分图，边数就是二分图左右边边数的乘积。</p><p>因此，现在问题转换成了对一个二分图维护加边，删边，查询左右边数的乘积。</p><p>这时候把每条边在时间上转为一个区间，利用线段树分治，即时间建立线段树，将这条边用 $\tt{vector}$ 挂在 $\log$ 个节点上。</p><p>这样有什么好处呢？这样的话对于任意一个时刻，可以<strong>用线段树上根到这个叶子的所有节点所挂的边不重不漏得包含所有这个时刻拥有的所有边</strong>。</p><p>这就很妙了啊，我们就可以从根节点开始 $\tt{dfs}$ ，插入所有边同时更新答案，并且在 $\tt{dfs}$ 回溯时<strong>撤销</strong>边，$\tt{dfs}$ 到根节点记录答案，就可以用 $\Theta (n \log n)$ 的时间计算出答案了！</p><p>到了这个地步我们已经离答案很近了。现在问题又转换成了维护加边，<strong>撤销</strong>边，同时更新二分图左右边数。你会发现，这不就是可撤销并查集做的事情吗？因此最后用可撤销并查集维护这个东西，这道题就做完了！！！</p><p><strong>CODE</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair<span class="hljs-meta-string">&lt;int, int&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> Q 300010</span><br><br><span class="hljs-keyword">int</span> q, fa[Q &lt;&lt; <span class="hljs-number">1</span>], sz1[Q &lt;&lt; <span class="hljs-number">1</span>], sz2[Q &lt;&lt; <span class="hljs-number">1</span>], ans = <span class="hljs-number">0</span>, res[Q];<br>stack&lt;PII &gt; st;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span> <span class="hljs-keyword">int</span> t, x, y; &#125;e[Q];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">mem</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">2</span> * q; i ++) &#123;<br>fa[i] = i;<br>sz1[i] = (i &lt;= q);<br>sz2[i] = (i &gt; q);<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> fa[x] == x ? x : <span class="hljs-built_in">getF</span>(fa[x]);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-keyword">int</span> u = <span class="hljs-built_in">getF</span>(x), v = <span class="hljs-built_in">getF</span>(y + q);<br><span class="hljs-keyword">if</span> (sz1[u] + sz2[u] &gt; sz1[v] + sz2[v]) <span class="hljs-built_in">swap</span>(u, v);<br>st.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">mp</span>(u, v));<br><span class="hljs-keyword">if</span> (u == v) <span class="hljs-keyword">return</span>;<br>ans -= sz1[v] * sz2[v];<br>ans -= sz1[u] * sz2[u];<br>fa[u] = fa[v];<br>sz1[v] += sz1[u];<br>sz2[v] += sz2[u];<br>ans += sz1[v] * sz2[v];<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">del</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> u = st.<span class="hljs-built_in">top</span>().fi, v = st.<span class="hljs-built_in">top</span>().se;<br>st.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">if</span> (u == v) <span class="hljs-keyword">return</span>;<br>ans -= sz1[v] * sz2[v];<br>fa[u] = u;<br>sz1[v] -= sz1[u];<br>sz2[v] -= sz2[u];<br>ans += sz1[u] * sz2[u];<br>ans += sz1[v] * sz2[v];<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid (id &lt;&lt; 1)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid (id &lt;&lt; 1 | 1)</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment</span> &#123;</span><br><span class="hljs-keyword">int</span> l, r;<br>vector&lt;PII &gt; e;<br>&#125;tr[Q * <span class="hljs-number">4</span>];<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>tr[id].l = l, tr[id].r = r;<br><span class="hljs-keyword">if</span> (tr[id].l == tr[id].r) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">int</span> mid = tr[id].l + tr[id].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">Build</span>(lid, l, mid), <span class="hljs-built_in">Build</span>(rid, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (l &lt;= tr[id].l &amp;&amp; tr[id].r &lt;= r) &#123;<br>tr[id].e.<span class="hljs-built_in">emplace_back</span>(x, y);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[id].l + tr[id].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (l &lt;= mid) <span class="hljs-built_in">Add</span>(lid, l, r, x, y);<br><span class="hljs-keyword">if</span> (r &gt; mid) <span class="hljs-built_in">Add</span>(rid, l, r, x, y);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : tr[id].e) <span class="hljs-built_in">add</span>(x.fi, x.se);<br><span class="hljs-keyword">if</span> (tr[id].l == tr[id].r) res[tr[id].l] = ans;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">dfs</span>(lid), <span class="hljs-built_in">dfs</span>(rid);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : tr[id].e) <span class="hljs-built_in">del</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>q = <span class="hljs-built_in">read</span>(), <span class="hljs-built_in">Build</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, q);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i ++) &#123;<br>e[i].x = <span class="hljs-built_in">read</span>(), e[i].y = <span class="hljs-built_in">read</span>(), e[i].t = i;<br>&#125;<br><span class="hljs-built_in">sort</span>(e + <span class="hljs-number">1</span>, e + q + <span class="hljs-number">1</span>, [](node a, node b) &#123;<br><span class="hljs-keyword">if</span> (a.x != b.x) <span class="hljs-keyword">return</span> a.x &lt; b.x;<br><span class="hljs-keyword">if</span> (a.y != b.y) <span class="hljs-keyword">return</span> a.y &lt; b.y;<br><span class="hljs-keyword">return</span> a.t &lt; b.t;<br>&#125;);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, f = <span class="hljs-number">0</span>; i &lt;= q; i ++) &#123;<br><span class="hljs-keyword">if</span> (e[i - <span class="hljs-number">1</span>].x == e[i].x &amp;&amp; e[i - <span class="hljs-number">1</span>].y == e[i].y &amp;&amp; f) &#123; f = <span class="hljs-number">0</span>; <span class="hljs-keyword">continue</span>; &#125;<br><span class="hljs-keyword">if</span> (e[i + <span class="hljs-number">1</span>].x == e[i].x &amp;&amp; e[i + <span class="hljs-number">1</span>].y == e[i].y) <span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>, e[i].t, e[i + <span class="hljs-number">1</span>].t - <span class="hljs-number">1</span>, e[i].x, e[i].y), f = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">Add</span>(<span class="hljs-number">1</span>, e[i].t, q, e[i].x, e[i].y);<br>&#125;<br><br><span class="hljs-built_in">mem</span>(), <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= q; i ++) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, res[i]);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>dfs</tag>
      
      <tag>线段树</tag>
      
      <tag>二分图</tag>
      
      <tag>并查集</tag>
      
      <tag>可撤销并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Atcoder ABC227G 题解</title>
    <link href="/eaf18bd3/"/>
    <url>/eaf18bd3/</url>
    
    <content type="html"><![CDATA[<h1 id="Atcoder-ABC277G-题解"><a href="#Atcoder-ABC277G-题解" class="headerlink" title="Atcoder ABC277G 题解"></a>Atcoder ABC277G 题解</h1><blockquote><p><a href="https://atcoder.jp/contests/abc227/editorial/2922">link</a></p><p>给定 $n$、$k$，求 $C_n^k$ 的约数个数。</p><p>$1 \le n \le 10^{12}$，$1 \le k \le \min (n, 10^6)$</p></blockquote><p>首先，一个数 <script type="math/tex">n = \Pi_{i = 1}^{m} p_i^{k_i}</script> 的约数个数为 <script type="math/tex">\Pi_{i = 1}^m \left(k_i+1\right)</script> 。</p><p>对组合数进行约分，<script type="math/tex">C_n^k = \dfrac{n!}{(n-k)! \ k!} = \dfrac{\Pi_{i=n-k+1}^n i}{k!}</script>。</p><p>我们分开考虑上下部分，用上半部分每个素数的个数减去下面的计算答案。</p><p>下部分因为 $k$ 的范围只有 $10^6$ ，所以我们可以预处理出 $10^6$ 以内的所有素数，对于每个素数 $p$，我们就可以求出 $p$、$2p$、$3p$ 等等中的质因子 $p$ 的数量和 $s$。</p><p>上部分比较难搞，因为范围达到 $10^{12}$，但我们惊奇地发现 $10^{12}$ 就是 $10^6$ 的平方，联想到一个性质：对于一个数 $n$，它最多有一个大于 $\sqrt{n}$ 的质因子。因此 $10^6$ 一下与下部分同样处理，最后判断一下如果不等于一，答案乘以 $2$。</p><div class="note note-success">            <p><b style="color : rgb(92,184,92);font-size: 15px;"> TIP </b></p><p>这题 TM 输入要 long long，坑到我了。</p>          </div><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> T <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>T x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> P 998244353</span><br><br><span class="hljs-keyword">int</span> n, k, a[N], b[N], vis[N], res = <span class="hljs-number">1</span>, t;<br><br>vector&lt;<span class="hljs-keyword">int</span>&gt; pr;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">get_prime</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt; N; i ++) &#123;<br><span class="hljs-keyword">if</span> (!vis[i]) pr.<span class="hljs-built_in">push_back</span>(i);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; pr.<span class="hljs-built_in">size</span>() &amp;&amp; i * pr[j] &lt; N; j ++) &#123;<br>vis[i * pr[j]] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (i % pr[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">get_prime</span>();<br><br>n = read&lt;<span class="hljs-keyword">int</span>&gt;(), k = read&lt;<span class="hljs-keyword">int</span>&gt;(), t = n - k;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= k; i ++) &#123;<br>a[i] = i, b[i] = t + i;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> p : pr) &#123;<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = p; i &lt;= k; i += p) &#123;<br><span class="hljs-keyword">while</span> (a[i] % p == <span class="hljs-number">0</span>) a[i] /= p, cnt --;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = (t + p) / p * p; i &lt;= n; i += p) &#123;<br><span class="hljs-keyword">while</span> (b[i - t] % p == <span class="hljs-number">0</span>) b[i - t] /= p, cnt ++;<br>&#125;<br>res = res * (cnt + <span class="hljs-number">1</span>) % P;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = t + <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">if</span> (b[i - t] != <span class="hljs-number">1</span>) res = res * <span class="hljs-number">2</span> % P;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
      <tag>Atcoder</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>exCRT（扩展中国剩余定理）学习笔记</title>
    <link href="/7052d8fd/"/>
    <url>/7052d8fd/</url>
    
    <content type="html"><![CDATA[<h1 id="exCRT（扩展中国剩余定理）学习笔记"><a href="#exCRT（扩展中国剩余定理）学习笔记" class="headerlink" title="exCRT（扩展中国剩余定理）学习笔记"></a>exCRT（扩展中国剩余定理）学习笔记</h1><h2 id="背景（？"><a href="#背景（？" class="headerlink" title="背景（？"></a>背景（？</h2><p>普通的 CRT 不能解决模数不互质的情况，按照数论算法的命名规则，能解决模数互质的算法就是 exCRT。</p><p>然鹅 exCRT 与 CRT 算法本身没有任何关系，个人觉得 exCRT 代码还更简单。</p><p><del>所以 CRT 有什么用？名字里有中国吗？</del></p><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><ul><li>exgcd（扩展欧几里得）；</li><li>一个简单的同余式转化，$a \equiv b \mod p \Rightarrow a + kp = b$；</li><li>脑子</li></ul><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p><a href="https://www.luogu.com.cn/problem/P4777">link</a></p><script type="math/tex; mode=display">\left\{\begin{matrix}  x \equiv a_1\pmod{b_1} \\  x \equiv a_2\pmod{b_2} \\  ... \\  x \equiv a_n\pmod{b_n} \\\end{matrix}\right.</script><p>解决这样的一个线性同余方程，其中 $a$ 没有特别约束。</p><h2 id="n-2"><a href="#n-2" class="headerlink" title="n = 2"></a>n = 2</h2><p>从简单入手我们可以先考虑 $n = 2$ 的情况：</p><script type="math/tex; mode=display">\left\{\begin{matrix}  x \equiv a_1\pmod{b_1} \\  x \equiv a_2\pmod{b_2} \\\end{matrix}\right.</script><p>即 $ x = k_1 b_1 + a_1 = k_2b_2 + a_2 $，得到：</p><script type="math/tex; mode=display">    k_1b_1+a_1 - k_2b_2=a_2</script><script type="math/tex; mode=display">k_1b_1+a_1 \equiv a_2 \pmod{b_2}</script><script type="math/tex; mode=display">k_1b_1 \equiv a_2 - a_1\pmod{b_2}</script><script type="math/tex; mode=display">k_1b_1 + k'b_2 = a_2 - a_1</script><p>这就是很显的 exgcd 了。用 exgcd 求出 $k_1$，即得 $x_0 = k_1b_1+a_1$，这个方程是否有解即可得到原方程是否有解。</p><p>$x_0$ 是一个特解，因为第一个同余方程周期是 $b_1$，第二个是 $b_2$，所以显然解的周期就是 $lcm (b_1, b_2)$，即我们得到了解的表达式：</p><script type="math/tex; mode=display">x \equiv x_0 \pmod{\operatorname{lcm}(m,n)}</script><h2 id="n-gt-2"><a href="#n-gt-2" class="headerlink" title="n &gt; 2"></a>n &gt; 2</h2><p>$ n = 2 $ 时的做法相当于合并了两个同余方程，所以我们只要按照这个做法一直合并合并知道只剩最后一个方程为止。</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100010</span><br><br><span class="hljs-keyword">int</span> n, a[N], b[N], P;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Mul</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> r = <span class="hljs-number">0</span>)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (; k; k &gt;&gt;= <span class="hljs-number">1</span>, x = (x + x) % P) &#123;<br><span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) r = (r + x) % P;<br>&#125;<br><span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> !b ? a : <span class="hljs-built_in">gcd</span>(b, a % b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>; <span class="hljs-keyword">return</span>;&#125;;<br><span class="hljs-built_in">exgcd</span>(b, a % b, x, y); <span class="hljs-keyword">int</span> t = y;<br>y = x - (a / b) * y, x = t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">excrt</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> A = a[<span class="hljs-number">1</span>], B = b[<span class="hljs-number">1</span>], k, y;<br>    <span class="hljs-comment">// A : a1, B : b1, k : k1</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-comment">// a[i] : a2, b[i] : b2</span><br><span class="hljs-keyword">int</span> d = <span class="hljs-built_in">gcd</span>(B, b[i]), t = (a[i] - A % b[i] + b[i]) % b[i];<br>        <span class="hljs-comment">// t : a2 - a1, 在模 b2 意义下</span><br><span class="hljs-built_in">exgcd</span>(B, b[i], k, y);<br><span class="hljs-keyword">if</span> (t % d) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>P = b[i] / d;<br>A += <span class="hljs-built_in">Mul</span>(k, t / d) * B; <span class="hljs-comment">// a = k1b1 + a1</span><br>B = B / d * b[i]; <span class="hljs-comment">// b = lcm(b1, b2)</span><br>A = (A + B) % B;<br>&#125;<br><span class="hljs-keyword">return</span> A;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>b[i] = <span class="hljs-built_in">read</span>(), a[i] = <span class="hljs-built_in">read</span>();<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, <span class="hljs-built_in">excrt</span>());<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【模板】插头 dp 题解</title>
    <link href="/a6f1e7a7/"/>
    <url>/a6f1e7a7/</url>
    
    <content type="html"><![CDATA[<h1 id="【模板】插头-dp-题解"><a href="#【模板】插头-dp-题解" class="headerlink" title="【模板】插头 dp 题解"></a>【模板】插头 dp 题解</h1><blockquote><p><a href="https://www.luogu.com.cn/problem/P5056">link</a><br>给定一个 $n \times m​$ 的方格，有些格子不能铺线，其他格子必须铺，求构成一个闭合回的方案数。<br>$ 2 \le n,m \le 12$</p></blockquote><p>一个很显然的性质，因为是回路，所有要铺的格子都是一进一出两条线。</p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><p>考虑 dp，$f_{i, j, s}$ 当前决策到第 $i$ 行第 $j$ 个格子，状态为 $s$ 的方案数。</p><p>$s$ 的状态为当前决策的格子和未决策的格子之间的分界线，即<strong>轮廓线</strong>上有没有线穿过。</p><p><img src="\img\9.png" alt=""></p><p><del>一个被引用不知多少次的好多题解都有的图</del></p><p>可以看到轮廓线的长度是 $m + 1$。</p><p>这里 $s$ 我知道的有两种存法，一种是<strong>最小表示法</strong>，一种是<strong>括号序列</strong>。</p><p>最小表示法很直观，没有线就是 $0$，有线的话，一条线有两个线头，给这两个线头一个相同的标号。这样我们就得到一个状态，比如图中轮廓线状态可以表示为 <code>12201</code>。但这样一个状态可能会有多个表示，像图中 <code>32203</code> 也是它的一个表示，所以用最小表示法求出它的唯一状态。</p><p>但个人感觉括号序列更简洁易懂，所以关于最小表示法就不展开了。</p><hr><p>一条线两个线头，一左一右；另外我们之前已经得到，所有格子都是一进一出，<strong>不会有两条线相交</strong>。</p><p>聪明的你是不是已经发现了，这些性质与括号序列、括号匹配多么吻合。</p><p>确实，我们可以用 <code>0</code> 表示没线头，<code>1</code> 表示左括号，即左边的线头； <code>2</code> 表示右边的线头。线不相交巧妙地保证了一个轮廓线状态只会有一个表示。</p><p>解决了状态，接下来就是转移了。</p><h2 id="转移"><a href="#转移" class="headerlink" title="转移"></a>转移</h2><p>我们计这个格子左边的状态为 $l$，$0$ 表示不连，$1$、$2$ 分别表示是左/右线头。同理计上面是否连为 $u$，右和下分别为 $r$、$d$。</p><p>可以发现，$l$ 所对应的就是 $s$ 中的第 $j$ 位，$u$ 就是第 $j + 1$ 位，我们的转移就是把 $l$、$u$ 转化为 $d$、$r$。</p><p>我们采用向后推的方式转移，也就是我们需要考虑在 $s$ 的状态下 $i$ 行 $j$ 列这个格子可以怎么连线。</p><h3 id="Case-1"><a href="#Case-1" class="headerlink" title="Case 1"></a>Case 1</h3><p><code>l = 0, u = 0</code>。</p><p>最简单的，左边上面都不连，要连两个线头的话只能是右和下都连了，即新开了一对括号。</p><p><code>r = 1, d = 2</code>。</p><h3 id="Case-2"><a href="#Case-2" class="headerlink" title="Case 2"></a>Case 2</h3><p><code>l = 0, u != 0</code>。</p><p>从上面可以连到右或下，并延续之前的括号状态。</p><p><code>r = u, d = 0</code> 或 <code>r = 0, d = u</code>。</p><h3 id="Case-3"><a href="#Case-3" class="headerlink" title="Case 3"></a>Case 3</h3><p><code>l != 0, u = 0</code>。</p><p>与第二个情况类似。</p><p><code>r = l, d = 0</code> 或 <code>r = 0, d = l</code>。</p><hr><p>接下来的情况 $l$，$u$ 都不为零，所以 $r$，$d$ 都是零。</p><h3 id="Case-4"><a href="#Case-4" class="headerlink" title="Case 4"></a>Case 4</h3><p><code>l = 2, u = 1</code></p><p>两个区间的合并。</p><h3 id="Case-5"><a href="#Case-5" class="headerlink" title="Case 5"></a>Case 5</h3><p><code>l = 1, r = 1</code></p><p>同样是两个区间的合并，但不一样的是为了保证状态的正确性，我们要找到 $l$ 对应的右括号改为左括号。</p><h3 id="Case-6"><a href="#Case-6" class="headerlink" title="Case 6"></a>Case 6</h3><p><code>l = 2, r = 2</code></p><p>与 5 类似，找到 $u$ 对应的左括号改为右括号。</p><h3 id="Case-7"><a href="#Case-7" class="headerlink" title="Case 7"></a>Case 7</h3><p><code>l = 1, r = 2</code></p><p>为什么这个状态要放到最后讲呢，别忘了线不能相交，所以这个左右括号一定是对应、匹配的一对，这种情况出现代表着右一条线闭合了。这种情况只能在最后一个格子发生一次，此时更行答案。</p><hr><p>至此转移也完成了！乌拉————</p><h2 id="关于实现"><a href="#关于实现" class="headerlink" title="关于实现"></a>关于实现</h2><p>实现中状态使用了四进制，并且实际上是倒着的，方便利用位运算简化代码。</p><hr><p>会有很多的冗余状态，哈希或map就是在这里用的。</p><hr><p>在转移时我们用到了三个对 $s$ 的操作：</p><ul><li>取出其中一位；</li><li>修改其中一位；</li><li>查找一个括号对应的另一个括号。</li></ul><p>写成函数可以方便处理。</p><hr><p>在每行最后是要特殊处理的！我们要改变一下轮廓线：</p><p><img src="\img\10.png" alt=""></p><p>如图，要舍去第五位不为 $0$ 的状态，并将 $s$ 右移 $2$ 位（空出一个位置）。</p><hr><p>最后一个格子应该是最后一个必须铺线的格子。</p><hr><p>建议数组滚起来防止炸掉。</p><hr><p>需要 <code>long long</code>。</p><h2 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h2><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 14</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">int</span> n, m, a[N][N], lst;<br><span class="hljs-keyword">int</span> res;<br><br>unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; f, g;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> st, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> ((st &gt;&gt; (x - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>)) &amp; <span class="hljs-number">3</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">void</span> <span class="hljs-title">chg</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;st, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    st ^= (st &gt;&gt; (x - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">3</span>) &lt;&lt; (x - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>);<br>    st ^= v &lt;&lt; (x - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">fid</span><span class="hljs-params">(<span class="hljs-keyword">int</span> st, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> s = <span class="hljs-number">0</span>)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">get</span>(st, x) == <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">for</span> (x ++; s != <span class="hljs-number">1</span>; x ++) &#123;<br>            <span class="hljs-keyword">int</span> t = st &gt;&gt; (x - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span>) s --;<br>            <span class="hljs-keyword">if</span> (t == <span class="hljs-number">2</span>) s ++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> x - <span class="hljs-number">1</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (x --; s != <span class="hljs-number">1</span>; x --) &#123;<br>            <span class="hljs-keyword">int</span> t = st &gt;&gt; (x - <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-number">1</span>) &amp; <span class="hljs-number">3</span>;<br>            <span class="hljs-keyword">if</span> (t == <span class="hljs-number">1</span>) s ++;<br>            <span class="hljs-keyword">if</span> (t == <span class="hljs-number">2</span>) s --;<br>        &#125;<br>        <span class="hljs-keyword">return</span> x + <span class="hljs-number">1</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br>        <span class="hljs-built_in">memset</span>(a, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> a), f.<span class="hljs-built_in">clear</span>(), g.<span class="hljs-built_in">clear</span>(), res = <span class="hljs-number">0</span>;<br>        n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">int</span> op = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>                a[i][j] = <span class="hljs-built_in">read</span>();<br>                op |= a[i][j];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!op) &#123;<br>            <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>            <span class="hljs-keyword">continue</span>;<br>        &#125;<br><br>        lst = n * m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>                <span class="hljs-keyword">if</span> (a[i][j]) lst = i * (m - <span class="hljs-number">1</span>) + j;<br>            &#125;<br>        &#125;<br>        f[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : f) &#123;<br>                    <span class="hljs-keyword">int</span> st = k.first, val = k.second;<br>                    <span class="hljs-keyword">int</span> l = <span class="hljs-built_in">get</span>(st, j), u = <span class="hljs-built_in">get</span>(st, j + <span class="hljs-number">1</span>);<br>                    <span class="hljs-keyword">int</span> r = a[i][j + <span class="hljs-number">1</span>], d = a[i + <span class="hljs-number">1</span>][j];<br>    <br>                    <span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span> &amp;&amp; u == <span class="hljs-number">0</span>) g[st] += val;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span> &amp;&amp; u == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-built_in">chg</span>(st, j, <span class="hljs-number">1</span>), <span class="hljs-built_in">chg</span>(st, j + <span class="hljs-number">1</span>, <span class="hljs-number">2</span>), g[st] += val;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (l == <span class="hljs-number">0</span> &amp;&amp; u != <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (r) g[st] += val;<br>                        <span class="hljs-keyword">if</span> (d) <span class="hljs-built_in">chg</span>(st, j, u), <span class="hljs-built_in">chg</span>(st, j + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), g[st] += val;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (l != <span class="hljs-number">0</span> &amp;&amp; u == <span class="hljs-number">0</span>) &#123;<br>                        <span class="hljs-keyword">if</span> (d) g[st] += val;<br>                        <span class="hljs-keyword">if</span> (r) <span class="hljs-built_in">chg</span>(st, j + <span class="hljs-number">1</span>, l), <span class="hljs-built_in">chg</span>(st, j, <span class="hljs-number">0</span>), g[st] += val;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (l == <span class="hljs-number">2</span> &amp;&amp; u == <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-built_in">chg</span>(st, j, <span class="hljs-number">0</span>), <span class="hljs-built_in">chg</span>(st, j + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), g[st] += val;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (l == <span class="hljs-number">1</span> &amp;&amp; u == <span class="hljs-number">1</span>) &#123;<br>                        <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">fid</span>(st, j + <span class="hljs-number">1</span>);<br>                        <span class="hljs-built_in">chg</span>(st, j, <span class="hljs-number">0</span>), <span class="hljs-built_in">chg</span>(st, j + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), <span class="hljs-built_in">chg</span>(st, t, <span class="hljs-number">1</span>), g[st] += val;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (l == <span class="hljs-number">2</span> &amp;&amp; u == <span class="hljs-number">2</span>) &#123;<br>                        <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">fid</span>(st, j);<br>                        <span class="hljs-built_in">chg</span>(st, j, <span class="hljs-number">0</span>), <span class="hljs-built_in">chg</span>(st, j + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>), <span class="hljs-built_in">chg</span>(st, t, <span class="hljs-number">2</span>), g[st] += val;<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (l == <span class="hljs-number">1</span> &amp;&amp; u == <span class="hljs-number">2</span>) &#123;<br>                        <span class="hljs-built_in">chg</span>(st, j, <span class="hljs-number">0</span>), <span class="hljs-built_in">chg</span>(st, j + <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>                        <span class="hljs-keyword">if</span> (i * (m - <span class="hljs-number">1</span>) + j == lst &amp;&amp; st == <span class="hljs-number">0</span>) res += val;<br>                        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (i * (m - <span class="hljs-number">1</span>) + j != lst) g[st] += val;<br>                        <span class="hljs-keyword">continue</span>;<br>                    &#125;<br>                &#125;<br>                f.<span class="hljs-built_in">swap</span>(g), g.<span class="hljs-built_in">clear</span>();<br>            &#125;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : f) &#123;<br>                <span class="hljs-keyword">if</span> (k.first &lt; (<span class="hljs-number">1</span> &lt;&lt; (m &lt;&lt; <span class="hljs-number">1</span>))) g[k.first &lt;&lt; <span class="hljs-number">2</span>] = k.second;<br>            &#125;<br>            f.<span class="hljs-built_in">swap</span>(g), g.<span class="hljs-built_in">clear</span>();<br>        &#125;<br>    <br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><del>等我一会多添点图</del></p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>namespace io</title>
    <link href="/970b0166/"/>
    <url>/970b0166/</url>
    
    <content type="html"><![CDATA[<p>更快的输入输出！<del>然而我没有写输出</del></p><p>看别人的 <code>namespace io</code> 都是一大坨，我自己精简了一下。</p><p>支持任意整形、字符串读入。（<code>io::read&lt;/*想要读的类型*/&gt;()</code>）</p><p>原理很简单，在进行文件读入时 $\tt{fread}$ 一次读入大量文件，具有较快的速度。</p><p>由于 $\tt{fread}$ 是读文件的，所以在本地比较麻烦，不想用文件读入时可以把 $\tt{gc}$  改为 $\tt{getchar}$，即使用 $\tt{std}$ 库里的字符读入。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">namespace</span> io &#123;<br>    <span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> n = <span class="hljs-number">1e6</span>;<br>    <span class="hljs-keyword">char</span> c, b[n], *i, *j;<br><br>    <span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">char</span> <span class="hljs-title">gc</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (i == j) j = (i = b) + <span class="hljs-built_in">fread</span>(b, <span class="hljs-number">1</span>, n, stdin);<br>        <span class="hljs-keyword">return</span> i == j ? EOF : *i ++;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> T <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>        T x = <span class="hljs-number">0</span>; <span class="hljs-keyword">int</span> f = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c = <span class="hljs-built_in">gc</span>())) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">1</span>) + (x &lt;&lt; <span class="hljs-number">3</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">gc</span>();<br>        <span class="hljs-keyword">return</span> f ? -x : x;<br>    &#125;<br><br>    <span class="hljs-keyword">template</span> &lt;&gt; <span class="hljs-function"><span class="hljs-keyword">inline</span> string <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>        string s = <span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isgraph</span>(c = <span class="hljs-built_in">gc</span>()));<br>        <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isgraph</span>(c)) s += c, c = <span class="hljs-built_in">gc</span>();<br>        <span class="hljs-keyword">return</span> s;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>模板</category>
      
    </categories>
    
    
    <tags>
      
      <tag>水</tag>
      
      <tag>语法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>主席树学习笔记</title>
    <link href="/5fb5f42e/"/>
    <url>/5fb5f42e/</url>
    
    <content type="html"><![CDATA[<h1 id="主席树学习笔记"><a href="#主席树学习笔记" class="headerlink" title="主席树学习笔记"></a>主席树学习笔记</h1><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><ul><li>线段树</li><li>动态开店线段树</li><li>权值线段树</li><li>脑子 <del>pvz 玩多了</del></li></ul><h2 id="用处"><a href="#用处" class="headerlink" title="用处"></a>用处</h2><p>主席树即可持久化线段树，在线段树的基础上可以查询修改每个修改的内容并形成新的版本。</p><h2 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h2><p>如果每次修改后在建一棵线段树，空间复杂度肯定受不了。注意到线段树的一次修改操作最多影响 $\log$ 个节点。因此我们可以只新建修改的节点，将原来的节点也用上，这样空间复杂度就是 $\Theta((n + q) \log n)$ 的。</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><blockquote><p><a href="https://www.luogu.com.cn/problem/P3919">可持久化数组</a></p><p>给出一个长度为 $n$ 的序列 $a_i$，此时的序列为版本 $0$ ，支持一下两种操作；</p><ul><li><p>在一个版本的基础上单点修改，形成一个新的版本；</p></li><li><p>在一个版本的基础上单点查询，形成一个一模一样的新版本。</p></li></ul><p>$1 \le n,q \le 10^6$。</p></blockquote><p>板子题（当然其它方法也很多），就来看看实现。需要动态开点，所以要记录所有儿子的信息：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chairman_tree</span> &#123;</span><br>    <span class="hljs-keyword">int</span> ls, rs, s;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid tr[id].ls</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid tr[id].rs</span><br>&#125;tr[N * <span class="hljs-number">32</span>];<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br></code></pre></div></td></tr></table></figure><p>初始建树、查询和普通线段树没什么区别，我们来看看修改操作：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    tr[++ cnt] = tr[id], id = cnt;<br>    <span class="hljs-comment">// 每次修改后新建节点，复制原节点的信息</span><br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tr[id].s = v; <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) lid = <span class="hljs-built_in">Add</span>(lid, l, mid, x, v);<br>    <span class="hljs-keyword">if</span> (x &gt; mid) rid = <span class="hljs-built_in">Add</span>(rid, mid + <span class="hljs-number">1</span>, r, x, v);<br>    <span class="hljs-comment">// 修改后左右儿子也会改</span><br>    <span class="hljs-keyword">return</span> id;<br>&#125;<br><br><span class="hljs-comment">// 在主程序中：</span><br>v[++ tot] = <span class="hljs-built_in">Add</span>(v[ver], <span class="hljs-number">1</span>, n, x, y); <span class="hljs-comment">// 修改的同时新建版本</span><br></code></pre></div></td></tr></table></figure><Details><summary>完整代码</summary><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000010</span><br><br><span class="hljs-keyword">int</span> n, m, a[N], v[N], tot;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chairman_tree</span> &#123;</span><br>    <span class="hljs-keyword">int</span> ls, rs, s;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid tr[id].ls</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid tr[id].rs</span><br>&#125;tr[N * <span class="hljs-number">32</span>]; <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    id = ++ cnt;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        <span class="hljs-keyword">return</span> tr[id].s = a[l], <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">Build</span>(lid, l, mid), <span class="hljs-built_in">Build</span>(rid, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>    tr[++ cnt] = tr[id], id = cnt;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tr[id].s = v; <span class="hljs-keyword">return</span> id;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) lid = <span class="hljs-built_in">Add</span>(lid, l, mid, x, v);<br>    <span class="hljs-keyword">if</span> (x &gt; mid) rid = <span class="hljs-built_in">Add</span>(rid, mid + <span class="hljs-number">1</span>, r, x, v);<br>    <span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> tr[id].s;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Ask</span>(lid, l, mid, x);<br>    <span class="hljs-keyword">if</span> (x &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Ask</span>(rid, mid + <span class="hljs-number">1</span>, r, x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>    &#125;<br><br>    <span class="hljs-built_in">Build</span>(v[<span class="hljs-number">0</span>] = ++ cnt, <span class="hljs-number">1</span>, n);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br>        <span class="hljs-keyword">int</span> ver = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">read</span>() == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>();<br>            v[++ tot] = <span class="hljs-built_in">Add</span>(v[ver], <span class="hljs-number">1</span>, n, x, y);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>();<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, <span class="hljs-built_in">Ask</span>(v[ver], <span class="hljs-number">1</span>, n, x));<br>            v[++ tot] = v[ver];<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></Details><p><br></p><p>但是我听机房巨佬说，这道板子题是没有灵魂的 /jk ，所以我们在来一道有灵魂的：</p><blockquote><p><a href="https://www.luogu.com.cn/problem/P3834">link</a></p><p>给定一个序列，每次查询一段区间的第 $k$ 小值。</p><p>$1 \le n,q \le 2 \times 10^5$，$1 \le a_i \le 10^9$。</p></blockquote><p>巨佬说这个就很有灵魂了。我们建立一棵<strong>权值线段树</strong>，记录维护区间的数的数量。遍历<strong>离散化</strong>后的序列，每次在前面插入一个数形成新版本（有点像前缀和），接下来我们考虑查询。</p><p>首先考虑查询的区间 $\left[1,x\right]$，在 $x$ 这个点对应版本的线段树上，我们进行查询。怎么查很简单，如果左边的数量小于 $k$ 就进入右子树，否则查左子树。那查询 $\left[l,r\right]$ 就很简单了，还是前缀和的思想，在做查询时<strong>同步遍历</strong> $l - 1$ 和 $r$ 两棵线段树，相减就得到了 $\left[l,r\right]$ 区间的信息<del>注入灵魂</del>。</p><p>妙啊！</p><p><strong>CODE</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 200010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> n, m, a[N], v[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; hs;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Chairman_tree</span> &#123;</span><br>    <span class="hljs-keyword">int</span> ls, rs, s;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid tr[id].ls</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid tr[id].rs</span><br>&#125;tr[N * <span class="hljs-number">32</span>]; <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>    tr[id].s = tr[lid].s + tr[rid].s;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Build</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    id = ++ cnt;<br>    <span class="hljs-keyword">if</span> (l &lt; r) &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-built_in">Build</span>(lid, l, mid);<br>        <span class="hljs-built_in">Build</span>(rid, mid + <span class="hljs-number">1</span>, r);<br>        <span class="hljs-built_in">pushup</span>(id);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    tr[++ cnt] = tr[id], id = cnt;<br>    <span class="hljs-keyword">if</span> (l == r) tr[id].s ++;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span> (x &lt;= mid) lid = <span class="hljs-built_in">Add</span>(lid, l, mid, x);<br>        <span class="hljs-keyword">else</span> rid = <span class="hljs-built_in">Add</span>(rid, mid + <span class="hljs-number">1</span>, r, x);<br>        <span class="hljs-built_in">pushup</span>(id);<br>    &#125;<br>    <span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> l;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>, lv = tr[tr[y].ls].s - tr[tr[x].ls].s;<br>        <span class="hljs-keyword">if</span> (k &lt;= lv) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Ask</span>(tr[x].ls, tr[y].ls, l, mid, k);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-built_in">Ask</span>(tr[x].rs, tr[y].rs, mid + <span class="hljs-number">1</span>, r, k - lv);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        a[i] = <span class="hljs-built_in">read</span>(), hs.<span class="hljs-built_in">pb</span>(a[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">sort</span>(hs.<span class="hljs-built_in">begin</span>(), hs.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">unique</span>(hs.<span class="hljs-built_in">begin</span>(), hs.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        a[i] = <span class="hljs-built_in">lower_bound</span>(hs.<span class="hljs-built_in">begin</span>(), hs.<span class="hljs-built_in">end</span>(), a[i]) - hs.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">Build</span>(v[<span class="hljs-number">0</span>], <span class="hljs-number">1</span>, n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        v[i] = <span class="hljs-built_in">Add</span>(v[i - <span class="hljs-number">1</span>], <span class="hljs-number">1</span>, n, a[i]);<br>    &#125;<br><br>    <span class="hljs-keyword">while</span> (m --) &#123;<br>        <span class="hljs-keyword">int</span> l = <span class="hljs-built_in">read</span>(), r = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, hs[<span class="hljs-built_in">Ask</span>(v[l - <span class="hljs-number">1</span>], v[r], <span class="hljs-number">1</span>, n, k) - <span class="hljs-number">1</span>]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
      <tag>线段树</tag>
      
      <tag>主席树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF367E 题解</title>
    <link href="/aaa83808/"/>
    <url>/aaa83808/</url>
    
    <content type="html"><![CDATA[<h1 id="CF367E-题解"><a href="#CF367E-题解" class="headerlink" title="CF367E 题解"></a>CF367E 题解</h1><blockquote><p>有 $n$ 个区间，你需要为每个区间分配左右端点<br>$l$，$r$ ($1 \le l \le r \le m$)，使得区间两两互不包含且至少存在一个区间<br>的左端点等于 $x$，输出方案数对 $10^9 + 7$ 取模的结果。</p><p>$1 \le n,m \le 10^5$, $1 \le x \le m$。</p></blockquote><p>若 $n &gt;m$ 肯定无解，因为一定存在两个左端点相同的区间，而这两个区间定是包含关系。这样可以得到 $n \le \sqrt{10^5}$。</p><p>考虑确定了 $n$ 个左端点和 $n$ 个右端点，区间无标号，有几种组合方案。假设 $l_1$ 到 $l_n$ 有序，$r_1$ 到 $r_n$ 也有序，<br>区间两两不包含，即 $\forall i,j \in [1,n]$，$l_i &lt; l_j$ 且 $r_i &lt; r_j$。如果 $l_1$ 和 $r_x(x&gt;1)$ 组成一个区间，$r_1$ 和 $l_y$ 组成区间，显然有 $l_1 &lt; l_y$，$r_1 &lt; r_x$，这样就有包含关系了，所以 $l_1$ 只能和 $r_1$ 组合。同理，得到 $l_i$ 只能和 $r_i$ 组合，所以方案是唯一的。</p><p>这样问题转换为选出 $n$ 个左端点和 $n$ 个右端点的方案，区间有标号最后需要在乘以 $n!$。设 $f_{i,j,k}$ 表示前 $i$ 个数，选了 $j$ 个左端点和 $k$ 个右端点。注意右端点个数不能大于左端点个数 ( $k \le j$ )，否则是不合法的。</p><p>转移很简单，四种情况：$i$ 不选、$i$ 做左端点、$i$ 做右端点、$i$ 既做左端点又做右端点。当 $i=x$ 是 $i$ 必须做左端点，只有两种情况。时间复杂度 $\Theta(n^2m)$，空间会炸所以要用滚动数组或压掉一维。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 320</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> P 1000000007</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">int</span> n, m, x, f[N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), x = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span> (n &gt; m) <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>), <span class="hljs-number">0</span>;<br><br><span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span> f), f[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = n; j &gt;= <span class="hljs-number">0</span>; j --) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = j; k &gt;= <span class="hljs-number">0</span>; k --) &#123;<br><span class="hljs-keyword">if</span> (i == x) f[j][k] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span>) (f[j][k] += f[j - <span class="hljs-number">1</span>][k]) %= P;<br><span class="hljs-keyword">if</span> (i != x &amp;&amp; k &gt; <span class="hljs-number">0</span>) (f[j][k] += f[j][k - <span class="hljs-number">1</span>]) %= P;<br><span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; k &gt; <span class="hljs-number">0</span>) (f[j][k] += f[j - <span class="hljs-number">1</span>][k - <span class="hljs-number">1</span>]) %= P;<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> res = f[n][n];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>(res *= i) %= P;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>dp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线段树合并学习笔记</title>
    <link href="/647e170e/"/>
    <url>/647e170e/</url>
    
    <content type="html"><![CDATA[<h1 id="线段树合并学习笔记"><a href="#线段树合并学习笔记" class="headerlink" title="线段树合并学习笔记"></a>线段树合并学习笔记</h1><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><h3 id="动态开点线段树"><a href="#动态开点线段树" class="headerlink" title="动态开点线段树"></a>动态开点线段树</h3><p>一般我们写线段树都是在刚开始调用一个 <code>build</code> 函数建立出所有节点。但实际上有很多节点并没有保存信息，这些节点是多余的。所以就有的动态开点线段树，<strong>只有在用到时才建立这个节点</strong>，这种思想节省了很多空间，节点与节点之间的灵活性也更高，为线段树合并和主席树等算法提供了基础。我们简单了解一下动态开点线段树的代码实现。</p><p>线段树节点不同于普通线段树，需要存储左右孩子的位置。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segmemt_tree</span> &#123;</span><br><span class="hljs-keyword">int</span> l, r, ls, rs, ...; <span class="hljs-comment">// ls, rs 存储节点左右儿子的 id</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid tr[id].ls</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid tr[id].rs;</span><br>&#125;tr[N * <span class="hljs-number">4</span>];<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br></code></pre></div></td></tr></table></figure><p>动态开点线段树的修改操作，基本与普通线段树相同：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, ...)</span> </span>&#123; <span class="hljs-comment">// 注意 id 是引用</span><br><span class="hljs-keyword">if</span> (!id) id = ++ cnt; <span class="hljs-comment">// 若没有这个节点则新建一个</span><br>tr[id].l = l, tr[id].r = r;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>...<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[id].l + tr[id].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (...) <span class="hljs-built_in">Add</span>(lid, l, mid, ...);<br><span class="hljs-keyword">if</span> (...) <span class="hljs-built_in">Add</span>(rid, mid + <span class="hljs-number">1</span>, r, ...);<br><span class="hljs-built_in">pushup</span>(id);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>查询：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, ...)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!id) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 因为是询问，没有这个点就可以直接返回了</span><br><span class="hljs-comment">// 后面与普通线段树基本相同</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="权值线段树"><a href="#权值线段树" class="headerlink" title="权值线段树"></a>权值线段树</h3><blockquote><p>我们的线段树合并，99% 的情况合并的是权值线段树。      —— 某同机房巨佬</p></blockquote><p>权值线段树类似于权值树状数组，是在值域上建立的的线段树，维护值的信息，如出现次数等。</p><p><del>其实和正常线段树没啥区别，就是因为维护的东西比较特殊就被拎出来了 Qwq。</del></p><p>权值线段树应该挺简单的，我们提一下就过吧。</p><h2 id="线段树合并"><a href="#线段树合并" class="headerlink" title="线段树合并"></a>线段树合并</h2><p>顾名思义，合并两个线段树。一般用来维护与深度相关的信息、离线处理一些问题。</p><p>假设现在我们有两棵线段树 $x$ 和 $y$ ，我们考虑怎么合并，当然两棵线段树维护的区间显然要相等。</p><ul><li>如果 $x$ 或 $y$ 是空的（因为是动态开点），直接返回不空的那个；</li><li>如果到达边界，即 $x$ 和 $y$ 维护的区间只有一个元素，直接合并维护的信息；</li><li>否则递归合并 $x$ 、 $y$ 的左子树和右子树，用两个子树向上更新出合并后的节点。</li></ul><p>考虑这样合并的复杂度是多少，显然是 $\Theta \left( 节点数\right)$，一般就是 $\Theta(n \log n)$ 了。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>在动态开点线段树的基础上多了一个 $\tt{Merge}$ （合并）函数：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-comment">// 你可以把两个线段树合并到一个新点上，这里我是把 y 合并到 x 上</span><br><span class="hljs-keyword">if</span> (!y) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (!x) <span class="hljs-keyword">return</span> x = y, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br><span class="hljs-comment">// 有一个节点为空的情况</span><br><span class="hljs-keyword">if</span> (l == r) &#123; <span class="hljs-comment">// 到达边界，直接合并信息</span><br>...<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">Merge</span>(tr[x].ls, tr[y].ls, l, mid);<br><span class="hljs-built_in">Merge</span>(tr[x].rs, tr[y].rs, mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-built_in">pushup</span>(x); <span class="hljs-comment">// 合并左右子树并更新</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="一些题目"><a href="#一些题目" class="headerlink" title="一些题目"></a>一些题目</h2><h3 id="USACO17JAN-Promotion-Counting-P"><a href="#USACO17JAN-Promotion-Counting-P" class="headerlink" title="[USACO17JAN]Promotion Counting P"></a>[USACO17JAN]Promotion Counting P</h3><blockquote><p><a href="https://www.luogu.com.cn/problem/P3605">link</a></p><p>给定一棵树 $n$ 个节点、以 $1$ 为根的树，树上每个点有权值 $p_i$。</p><p>求以每个点为根的子树内权值大于它的节点个数。</p><p>$1 \le n \le 10^5$，$1 \le p_i \le 10^9$</p></blockquote><p>线段树合并裸题，码个板子练练手。离散化后对于每个点建立权值线段树，维护每个值出现的次数，$\tt{dfs}$ 将所有子节点线段树合并到父节点上，对于 $p_i$ 在线段树上查询 $\left[p_i + 1 ,n\right]$ 区间和即可。</p><p>刚开始每个节点的线段树中只插入一个值，因此线段树上只有 $\log n$ 个节点；合并操作中不会新建节点，因此总空间复杂度就是 $\Theta(n \log n)$，每个节点会进行 $\Theta(\log n)$ 的合并，所以时间复杂度也是 $\Theta(n \log n)$。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> n, a[N], rt[N], res[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; Hash, e[N];<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid tr[id].ls</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid tr[id].rs</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_tree</span> &#123;</span><br><span class="hljs-keyword">int</span> l, r, ls, rs, sum;<br>&#125;tr[N * <span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">New</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> ++ cnt;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>tr[id].sum = tr[lid].sum + tr[rid].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!id) id = <span class="hljs-built_in">New</span>();<br>tr[id].l = l, tr[id].r = r;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>tr[id].sum ++;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[id].l + tr[id].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">Add</span>(lid, l, mid, x);<br><span class="hljs-keyword">if</span> (x &gt; mid) <span class="hljs-built_in">Add</span>(rid, mid + <span class="hljs-number">1</span>, r, x);<br><span class="hljs-built_in">pushup</span>(id);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!id) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (l &lt;= tr[id].l &amp;&amp; tr[id].r &lt;= r) &#123;<br><span class="hljs-keyword">return</span> tr[id].sum;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[id].l + tr[id].r &gt;&gt; <span class="hljs-number">1</span>, val = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (l &lt;= mid) val += <span class="hljs-built_in">Ask</span>(lid, l, r);<br><span class="hljs-keyword">if</span> (r &gt; mid) val += <span class="hljs-built_in">Ask</span>(rid, l, r);<br><span class="hljs-keyword">return</span> val;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!x) <span class="hljs-keyword">return</span> x = y, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br><span class="hljs-keyword">if</span> (!y) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>tr[x].sum += tr[y].sum;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">Merge</span>(tr[x].ls, tr[y].ls, l, mid);<br><span class="hljs-built_in">Merge</span>(tr[x].rs, tr[y].rs, mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br><span class="hljs-built_in">Add</span>(rt[x] = <span class="hljs-built_in">New</span>(), <span class="hljs-number">1</span>, n, a[x]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) <span class="hljs-keyword">if</span> (y != fa) &#123;<br><span class="hljs-built_in">dfs</span>(y, x);<br><span class="hljs-built_in">Merge</span>(rt[x], rt[y], <span class="hljs-number">1</span>, n);<br>&#125;<br>res[x] = <span class="hljs-built_in">Ask</span>(rt[x], a[x] + <span class="hljs-number">1</span>, n);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">read</span>();<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>a[i] = <span class="hljs-built_in">read</span>(), Hash.<span class="hljs-built_in">pb</span>(a[i]);<br>&#125;<br><span class="hljs-built_in">sort</span>(Hash.<span class="hljs-built_in">begin</span>(), Hash.<span class="hljs-built_in">end</span>());<br><span class="hljs-built_in">unique</span>(Hash.<span class="hljs-built_in">begin</span>(), Hash.<span class="hljs-built_in">end</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>a[i] = <span class="hljs-built_in">lower_bound</span>(Hash.<span class="hljs-built_in">begin</span>(), Hash.<span class="hljs-built_in">end</span>(), a[i]) - Hash.<span class="hljs-built_in">begin</span>() + <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>();<br>e[i].<span class="hljs-built_in">pb</span>(x), e[x].<span class="hljs-built_in">pb</span>(i);<br>&#125;<br><br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res[i]);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="CF600E-Lomsat-gelral"><a href="#CF600E-Lomsat-gelral" class="headerlink" title="CF600E Lomsat gelral"></a>CF600E Lomsat gelral</h3><blockquote><p><a href="https://www.luogu.com.cn/problem/CF600E">link</a></p><p>给定一棵 $n$ 个节点，$1$ 号节点为根节点的树，每个节点有权值 $c_i$。</p><p>求出以所有节点为根的子树内出现次数最多的权值的和（因为可能有多个最大权值）。</p><p>$1 \le n \le 10^5$，$1 \le c_i \le n$。</p></blockquote><p>线段树合并裸题 ++。</p><p>对于每个节点开一棵<strong>权值线段树</strong>（良心出题人，不用离散化），维护区间最大最大值和所有最大值的和， $\tt{dfs}$ 合并线段树即可。</p><p>注意答案可以达到 $10 ^ 5 \times 10 ^ 5 = 10 ^ {10}$，别忘了 <code>longlong</code>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> n, a[N], rt[N];<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_tree</span> &#123;</span><br>    <span class="hljs-keyword">int</span> l, r, ls, rs;<br>    <span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> Mx, sum;<br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid tr[id].ls</span><br>    <span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid tr[id].rs</span><br>&#125;tr[N * <span class="hljs-number">20</span>]; <span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">New</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> ++ cnt;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>    tr[id].Mx = <span class="hljs-built_in">max</span>(tr[lid].Mx, tr[rid].Mx);<br>    <span class="hljs-keyword">if</span> (tr[lid].Mx &gt; tr[rid].Mx) tr[id].sum = tr[lid].sum;<br>    <span class="hljs-keyword">if</span> (tr[lid].Mx &lt; tr[rid].Mx) tr[id].sum = tr[rid].sum;<br>    <span class="hljs-keyword">if</span> (tr[lid].Mx == tr[rid].Mx) tr[id].sum = tr[lid].sum + tr[rid].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!id) id = <span class="hljs-built_in">New</span>();<br>    tr[id].l = l, tr[id].r = r;<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tr[id].Mx = <span class="hljs-number">1</span>, tr[id].sum = x;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = tr[id].l + tr[id].r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">Add</span>(lid, l, mid, x);<br>    <span class="hljs-keyword">if</span> (x &gt; mid) <span class="hljs-built_in">Add</span>(rid, mid + <span class="hljs-number">1</span>, r, x);<br>    <span class="hljs-built_in">pushup</span>(id);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!y) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span> (!x) <span class="hljs-keyword">return</span> x = y, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br>    <span class="hljs-keyword">if</span> (l == r) &#123;<br>        tr[x].Mx += tr[y].Mx;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">int</span> mid = l + r &gt;&gt; <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">Merge</span>(tr[x].ls, tr[y].ls, l, mid);<br>    <span class="hljs-built_in">Merge</span>(tr[x].rs, tr[y].rs, mid + <span class="hljs-number">1</span>, r);<br>    <span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    <span class="hljs-built_in">Add</span>(rt[x] = <span class="hljs-built_in">New</span>(), <span class="hljs-number">1</span>, n, a[x]);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) <span class="hljs-keyword">if</span> (y != fa) &#123;<br>        <span class="hljs-built_in">dfs</span>(y, x), <span class="hljs-built_in">Merge</span>(rt[x], rt[y], <span class="hljs-number">1</span>, n);<br>    &#125;<br>    res[x] = tr[rt[x]].sum;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        a[i] = <span class="hljs-built_in">read</span>();<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i ++) &#123;<br>        <span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>();<br>        e[x].<span class="hljs-built_in">pb</span>(y), e[y].<span class="hljs-built_in">pb</span>(x);<br>    &#125;<br><br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld &quot;</span>, res[i]);<br>    &#125; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="POI2011-ROT-Tree-Rotations"><a href="#POI2011-ROT-Tree-Rotations" class="headerlink" title="[POI2011]ROT-Tree Rotations"></a>[POI2011]ROT-Tree Rotations</h3><blockquote><p><a href="https://www.luogu.com.cn/problem/P3521">link</a></p><p>给定一棵 $n$ 个<strong>叶子节点</strong>的<strong>二叉树</strong>，其中每个点要么没有子树，要么有两棵子树，叶子节点有权值 $x$。</p><p>你可以任意交换一个节点的左右子树，使得先序遍历得到的叶子节点权值的排列逆序对最少。</p><p>$1 \le n \le 2 \times 10 ^ 5$，$0 \le x \le n$。</p></blockquote><p>考虑到先序遍历是先父亲再左右子树，因此子树交换并不影响外部的逆序对。同样使用权值线段树加线段树合并，$\tt{dfs}$ 考虑一个节点，我们计算出交换与不交换的两种贡献，取最小的即可，我们可以在合并线段树时计算两个节点之间的逆序对个数。</p><p>假设现在要合并 $x$ 和 $y$，不交换就是 <code>tr[tr[x].rs].sum * tr[tr[y].ls].sum</code>，交换就是 <code>tr[tr[x].ls].sum * tr[tr[y].rs].sum</code>，接着在合并左右子树时处理剩下的逆序对。</p><p>这样说可能比较难理解，举个栗子：</p><p>假设现在左右子树 $x$、$y$ 的排列分别为 <code>1 2 3 3</code>、<code>1 1 2 3</code>。</p><p>不交换有 $8$ 个逆序对：<code>2,1</code>  <code>2,1</code>  <code>3,1</code>  <code>3,1</code>  <code>3,2</code>  <code>3,1</code>  <code>3,1</code>  <code>3,2</code> ；</p><p>交换有 $3$ 个：<code>2,1</code>  <code>3,1</code>  <code>3,2</code>；</p><p>建出两棵线段树：</p><p><img src="\img\18.png" alt=""></p><p>节点内的红字这个节点的 $\tt{sum}$ 值，即这个节点维护区间的值的数量。</p><p>刚开始两棵子树都在 $\tt{[1,3]}$；</p><ul><li>用 $x$ 的 $\tt{[3,3]}$ 区间乘以 $y$ 的 $\tt{[1,2]}$，$2 \times 3 = 6$，代表不交换的逆序对  <code>3,1</code>  <code>3,1</code>  <code>3,2</code>  <code>3,1</code>  <code>3,1</code>  <code>3,2</code> ；</li><li>用 $x$ 的 $\tt{[1,2]}$ 区间乘以 $y$ 的 $\tt{[3,3]}$，$2 \times 1 = 2$，代表交换的逆序对  <code>3,1</code>  <code>3,2</code>；</li></ul><p>但是这样还有一些逆序对没找全啊？所以要在接下来 $x$、$y$ 的左右子树合并时继续计算。</p><p>合并 $x$ 、$y$ 的左子树 $\tt{[1,2]}$：</p><ul><li>用 $x$ 的 $\tt{[2,2]}$ 区间乘以 $y$ 的 $\tt{[1,1]}$，$1 \times 2 = 2$，代表不交换的逆序对  <code>2,1</code>  <code>2,1</code> ；</li><li>用 $x$ 的 $\tt{[1,1]}$ 区间乘以 $y$ 的 $\tt{[2,2]}$，$1 \times 1 = 1$，代表交换的逆序对  <code>2,1</code>；</li></ul><p>合并 $x$ 、$y$ 的左子树 $\tt{[3,3]}$，一个点显然没有逆序对，不用计算。</p><p>这样不交换有 $6+2=8$ 个逆序对，交换有 $2+1=3$ 个逆序对。这就对了嘛。</p><p>这道题同样需要 <code>long long</code>，另外因为是 $n$ 个叶子节点不是 $n$ 个节点，数组要开大一点。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 400010</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Ary[N];<br><br><span class="hljs-keyword">int</span> n, tot = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">long</span> <span class="hljs-keyword">long</span> res, s1, s2;<br>Ary a, L, R, rt;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">In</span><span class="hljs-params">(<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>)</span> </span>&#123;<br>a[k = ++ tot] = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span> (a[k] == <span class="hljs-number">0</span>) &#123;<br>L[k] = <span class="hljs-built_in">In</span>(), R[k] = <span class="hljs-built_in">In</span>();<br>&#125;<br><span class="hljs-keyword">return</span> k;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid tr[id].ls</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid tr[id].rs</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segmemt_tree</span> &#123;</span><br><span class="hljs-keyword">int</span> l, r, ls, rs, sum;<br>&#125;tr[N * <span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">New</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> ++ cnt;&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">pushup</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id)</span> </span>&#123;<br>tr[id].sum = tr[lid].sum + tr[rid].sum;<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!id) id = <span class="hljs-built_in">New</span>();<br>tr[id].l = l, tr[id].r = r;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>tr[id].sum ++;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[id].l + tr[id].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">Add</span>(lid, l, mid, x);<br><span class="hljs-keyword">if</span> (x &gt; mid) <span class="hljs-built_in">Add</span>(rid, mid + <span class="hljs-number">1</span>, r, x);<br><span class="hljs-built_in">pushup</span>(id);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!x) <span class="hljs-keyword">return</span> x = y, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br><span class="hljs-keyword">if</span> (!y) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>tr[x].sum += tr[y].sum;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="hljs-number">1</span>;<br>s1 += <span class="hljs-number">1ll</span> * tr[tr[x].ls].sum * tr[tr[y].rs].sum;<br>s2 += <span class="hljs-number">1ll</span> * tr[tr[x].rs].sum * tr[tr[y].ls].sum;<br><span class="hljs-built_in">Merge</span>(tr[x].ls, tr[y].ls, l, mid);<br><span class="hljs-built_in">Merge</span>(tr[x].rs, tr[y].rs, mid + <span class="hljs-number">1</span>, r);<br><span class="hljs-built_in">pushup</span>(x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>rt[x] = <span class="hljs-built_in">New</span>();<br><span class="hljs-keyword">if</span> (a[x] &gt; <span class="hljs-number">0</span>) <span class="hljs-built_in">Add</span>(rt[x], <span class="hljs-number">1</span>, n, a[x]);<br><span class="hljs-keyword">if</span> (L[x] &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">dfs</span>(L[x]), s1 = s2 = <span class="hljs-number">0</span>, <span class="hljs-built_in">Merge</span>(rt[x], rt[L[x]], <span class="hljs-number">1</span>, n);<br>&#125;<br><span class="hljs-keyword">if</span> (R[x] &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-built_in">dfs</span>(R[x]), s1 = s2 = <span class="hljs-number">0</span>, <span class="hljs-built_in">Merge</span>(rt[x], rt[R[x]], <span class="hljs-number">1</span>, n);<br>&#125;<br>res += <span class="hljs-built_in">min</span>(s1, s2);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">read</span>(), <span class="hljs-built_in">In</span>(), <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, res);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="CF208E-Blood-Cousins"><a href="#CF208E-Blood-Cousins" class="headerlink" title="CF208E Blood Cousins"></a>CF208E Blood Cousins</h3><blockquote><p><a href="https://hydro.ac/d/codeforces/p/P208E">link</a></p><p>给定一片 $n$ 个点的森林，森林中的树都有根。</p><p>$m$ 次询问，每次询问一个点 $x$ 与多少个点有相同的 $K$ 级祖先。</p><p>$1 \le n \le 10^5$，$1 \le m \le 10^5$</p></blockquote><p>离线做法，首先用倍增对于每个询问求出 $x$ 的 $K$ 级祖先，用 $\tt{vector}$ 或链表把询问挂在祖先上，问题转换成求一个点有多少个 $K$ 级儿子的问题。</p><p>对每个节点，以深度为下标建立权值线段树，进行 $\tt{dfs}$。若 $\tt{dfs}$ 到一个节点 $x$，在线段树插入当前点的深度并与子节点的线段树合并。然后遍历所有询问，对于询问这个点有多少个 $K$ 级儿子，在线段树中查询深度为 $dep_x + K$ 的节点有多少个即可。别忘了答案要减一。</p><p>时间复杂度 $\Theta(n \log n)$。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> PII pair<span class="hljs-meta-string">&lt;int, int&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> mp make_pair</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> fi first</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> se second</span><br><br><span class="hljs-keyword">int</span> n, m, res[N], f[N][<span class="hljs-number">22</span>], rt[N], dep[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N], root;<br>vector&lt;PII&gt; q[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Segment_tree</span> &#123;</span><br><span class="hljs-keyword">int</span> l, r, ls, rs, sum;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> lid tr[id].ls</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rid tr[id].rs</span><br>&#125;tr[N * <span class="hljs-number">20</span>];<br><span class="hljs-keyword">int</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!id) id = ++ cnt;<br>tr[id].l = l, tr[id].r = r;<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>tr[id].sum ++;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[id].l + tr[id].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-built_in">Add</span>(lid, l, mid, x);<br><span class="hljs-keyword">if</span> (x &gt; mid) <span class="hljs-built_in">Add</span>(rid, mid + <span class="hljs-number">1</span>, r, x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Ask</span><span class="hljs-params">(<span class="hljs-keyword">int</span> id, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r, <span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!id) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">if</span> (l == r) <span class="hljs-keyword">return</span> tr[id].sum;<br><span class="hljs-keyword">int</span> mid = tr[id].l + tr[id].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (x &lt;= mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Ask</span>(lid, l, mid, x);<br><span class="hljs-keyword">if</span> (x &gt; mid) <span class="hljs-keyword">return</span> <span class="hljs-built_in">Ask</span>(rid, mid + <span class="hljs-number">1</span>, r, x);<br>&#125;<br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Merge</span><span class="hljs-params">(<span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> l, <span class="hljs-keyword">int</span> r)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (!x || !y) <span class="hljs-keyword">return</span> x += y, <span class="hljs-built_in"><span class="hljs-keyword">void</span></span>();<br><span class="hljs-keyword">if</span> (l == r) &#123;<br>tr[x].sum += tr[y].sum;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">int</span> mid = tr[x].l + tr[x].r &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-built_in">Merge</span>(tr[x].ls, tr[y].ls, l, mid);<br><span class="hljs-built_in">Merge</span>(tr[x].rs, tr[y].rs, mid + <span class="hljs-number">1</span>, r);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs2</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br><span class="hljs-built_in">Add</span>(rt[x] = ++ cnt, <span class="hljs-number">1</span>, n, dep[x]);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) <span class="hljs-keyword">if</span> (y != fa) &#123;<br><span class="hljs-built_in">dfs2</span>(y, x), <span class="hljs-built_in">Merge</span>(rt[x], rt[y], <span class="hljs-number">1</span>, n);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : q[x]) &#123;<br>res[i.fi] = <span class="hljs-built_in">Ask</span>(rt[x], <span class="hljs-number">1</span>, n, dep[x] + i.se) - <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs1</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>dep[x] = dep[fa] + <span class="hljs-number">1</span>;<br>f[x][<span class="hljs-number">0</span>] = fa;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">20</span>; i ++) &#123;<br>f[x][i] = f[f[x][i - <span class="hljs-number">1</span>]][i - <span class="hljs-number">1</span>];<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) &#123;<br><span class="hljs-keyword">if</span> (y != fa) <span class="hljs-built_in">dfs1</span>(y, x);<br>&#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span> (x) e[x].<span class="hljs-built_in">pb</span>(i), e[i].<span class="hljs-built_in">pb</span>(x);<br><span class="hljs-keyword">else</span> root.<span class="hljs-built_in">pb</span>(i);<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : root) <span class="hljs-built_in">dfs1</span>(x, <span class="hljs-number">0</span>);<br><br>m = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), fa = x;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = y; i &lt;= <span class="hljs-number">20</span>; i ++, j &gt;&gt;= <span class="hljs-number">1</span>) &#123;<br><span class="hljs-keyword">if</span> (j &amp; <span class="hljs-number">1</span>) fa = f[fa][i];<br>&#125;<br>q[fa].<span class="hljs-built_in">pb</span>(<span class="hljs-built_in">mp</span>(i, y));<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> x : root) <span class="hljs-built_in">dfs2</span>(x, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, res[i]);<br>&#125; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>数据结构</tag>
      
      <tag>线段树</tag>
      
      <tag>线段树合并</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三元环计数问题</title>
    <link href="/a962ef89/"/>
    <url>/a962ef89/</url>
    
    <content type="html"><![CDATA[<h1 id="三元环计数问题"><a href="#三元环计数问题" class="headerlink" title="三元环计数问题"></a>三元环计数问题</h1><blockquote><p> <a href="https://www.luogu.com.cn/problem/P1989">link</a>，给定一个无向图，求其中三元环的数量。</p><p> $1 \le n \le 10^5$，$1 \le m \le 2 \times 10^5$ 。</p></blockquote><p>构造一个这样的有向图：对于原来图中的每一条无向边，改为由度数小的向度数大的连边，若相等则由编号小的向编号大的连边，在这样的图中，三元环 ${ x,y,z}$ ，度数最小或编号最小的点回向另外两点连边，所以边肯定是 $x \rightarrow y$，$x \rightarrow y$，$y \rightarrow z$  这种形式的。这样枚举 $x$，标记所有 $x$ 出去的点 $y$ ，在枚举这些点出去的点 $z$ ，若 $z$ 被标记了说明构成三元环。</p><p>这样的时间复杂度是 $\Theta(m \sqrt m)$，为什么呢？我们枚举 $x$ 出去的 $y$  相当于枚举了每条边，这是 $\Theta(m)$；枚举 $y$ 后还要枚举 $z$，为什么这个东西的复杂度是 $\Theta(\sqrt m)$ 呢？现在我们要证明每个点的出度不可能大于$\sqrt m$。</p><p>反证法，若一个点的出度 $&gt; \sqrt m$，因为一个点只能连向度数大于等于它的点，所以它出去的 $\sqrt m$ 个点出度也都 $&gt; \sqrt m$ 个点，这样两个 $&gt; \sqrt m$  相乘，总边数就 $&gt; m$，与 $m$ 条边矛盾，因此每个点的初度 $\le \sqrt m$，复杂度就是 $\Theta(m \sqrt m)$ 了。</p><h4 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 100010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 200010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> n, m, x[M], y[M], deg[N], vis[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br>x[i] = <span class="hljs-built_in">read</span>(), y[i] = <span class="hljs-built_in">read</span>();<br>deg[x[i]] ++, deg[y[i]] ++;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">if</span> (deg[x[i]] &lt; deg[y[i]] || deg[x[i]] == deg[y[i]] &amp;&amp; x[i] &lt; y[i]) e[x[i]].<span class="hljs-built_in">pb</span>(y[i]);<br><span class="hljs-keyword">else</span> e[y[i]].<span class="hljs-built_in">pb</span>(x[i]);<br>&#125;<br><br><span class="hljs-keyword">int</span> res = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : e[i]) vis[j] = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : e[i]) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> k : e[j]) <span class="hljs-keyword">if</span> (vis[k]) res ++;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : e[i]) vis[j] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>三元环计数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P3306 题解</title>
    <link href="/9dfc3d62/"/>
    <url>/9dfc3d62/</url>
    
    <content type="html"><![CDATA[<h1 id="P3306-题解"><a href="#P3306-题解" class="headerlink" title="P3306 题解"></a>P3306 题解</h1><blockquote><p><a href="https://www.luogu.com.cn/problem/P3306">link</a>，给出  $p$，$a$，$b$，$x_1$，求第一个 $x_i = t$。</p><p>$x_{i + 1} \equiv a \times x_i + b \pmod{p}$ 。</p><p>$0 \le a, b, x1, t &lt; p$，$2 \le p \le 10^9$， $p$ 为质数。</p></blockquote><p>推一波： </p><script type="math/tex; mode=display">X_{i + 1} \equiv a \times X_i + b \pmod{p}</script><script type="math/tex; mode=display">\Rightarrow X_{i + 1} + \dfrac{b}{a - 1} \equiv a \times X_i + \dfrac{\left(a-1\right)b}{a-1} + \dfrac{b}{a - 1} \pmod{p}</script><script type="math/tex; mode=display">\Rightarrow X_{i + 1} + \dfrac{b}{a - 1} \equiv a \times X_i + \dfrac{ab}{a - 1} \pmod{p}</script><script type="math/tex; mode=display">\Rightarrow X_{i + 1} + \dfrac{b}{a - 1} \equiv a \times \left ( X_i + \dfrac{b}{a-1}\right ) \pmod{p}</script><p>等比数列，直接得到：</p><script type="math/tex; mode=display">X_n + \dfrac{b}{a-1} \equiv a^{n - 1} \times \left( X_1 + \dfrac{b}{a - 1} \right) \pmod{p}</script><p>当 $X_n = t$ 时，只有 $a^{n - 1}$ 未知：</p><script type="math/tex; mode=display">a^{n - 1} \equiv \dfrac{t + \dfrac{b}{a-1}}{X_1 + \dfrac{b}{a - 1}} \pmod{p}</script><p>$\tt{BSGS}$ 即可，不会 $\tt{BSGS}$ 可以康<a href="https://ybwa.github.io/17d3f61c/">我的另一篇博客</a>，注意要特判 $a=0$ 和 $a=1$ 的情况。</p><h4 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (!b ? a : <span class="hljs-built_in">gcd</span>(b, a % b));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> r = <span class="hljs-number">1</span>)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (; k; k &gt;&gt;= <span class="hljs-number">1</span>, x = x * x % p) &#123;<br><span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) r = r * x % p;<br>&#125;<br><span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Pow</span>(x % p, p - <span class="hljs-number">2</span>, p);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsgs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>unordered_map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;<br>b %= p; <span class="hljs-keyword">int</span> t = <span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">sqrt</span>(p));<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i ++) &#123;<br>m[<span class="hljs-built_in">Pow</span>(a, i, p) * b % p] = i;<br>&#125;<br>a = <span class="hljs-built_in">Pow</span>(a, t, p);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i ++) &#123;<br><span class="hljs-keyword">int</span> k = <span class="hljs-built_in">Pow</span>(a, i, p);<br><span class="hljs-keyword">if</span> (m.<span class="hljs-built_in">find</span>(k) == m.<span class="hljs-built_in">end</span>()) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (i * t - m[k] &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> i * t - m[k];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --;) &#123;<br><span class="hljs-keyword">int</span> p = <span class="hljs-built_in">read</span>(), a = <span class="hljs-built_in">read</span>(), b = <span class="hljs-built_in">read</span>(), X1 = <span class="hljs-built_in">read</span>(), t = <span class="hljs-built_in">read</span>();<br><br><span class="hljs-keyword">if</span> (X1 == t) <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;1&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-number">0</span>) (b == t) ? <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;2&quot;</span>) : <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;-1&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a == <span class="hljs-number">1</span>)&#123;<br><span class="hljs-keyword">if</span> ((t - X1) % <span class="hljs-built_in">gcd</span>(b, p)) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;-1\n&quot;</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, ((t - X1) + p) % p * <span class="hljs-built_in">inv</span>(b % p, p) % p + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">continue</span>;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">int</span> tmp = b * <span class="hljs-built_in">inv</span>(a - <span class="hljs-number">1</span>, p) % p;<br><span class="hljs-keyword">int</span> res = <span class="hljs-built_in">bsgs</span>(a, (t + tmp) % p * <span class="hljs-built_in">inv</span>(X1 + tmp, p) % p, p);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, (~res ? res + <span class="hljs-number">1</span> : res));<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>参考</strong>：<a href="https://www.luogu.com.cn/blog/user17774/solution-p3306">https://www.luogu.com.cn/blog/user17774/solution-p3306</a> 。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BSGS（大步小步）算法学习笔记</title>
    <link href="/17d3f61c/"/>
    <url>/17d3f61c/</url>
    
    <content type="html"><![CDATA[<h1 id="BSGS（大步小步）算法学习笔记"><a href="#BSGS（大步小步）算法学习笔记" class="headerlink" title="BSGS（大步小步）算法学习笔记"></a>BSGS（大步小步）算法学习笔记</h1><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><p>会取模运算就行啦！</p><h2 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h2><p><del>拔山盖世</del> $\tt{BSGS}$ 算法用于求解 $a^x \equiv b \pmod{p}, \ a \perp p$ 中 $x$ 的值。</p><p>设 $x = ti - j$，$t = \left \lceil \sqrt{p} \right \rceil$，$1 \le i \le t$，$0 \le j &lt; t$。</p><p>然后简单化一下：</p><script type="math/tex; mode=display">a^{ti-j} \equiv b \ \ \ \ \Rightarrow \ \ \ \ a^{ti} \equiv ba^j \pmod{p}</script><p>因为 $ba^j$ 只有 $t$ 个取值，可以先枚举 $j$ ，求出所有的 $ba^j$ 并使用 $\tt{Hash}$ 或 $\tt{map}$ 存储，然后枚举 $i$，求出 $a^{ti}$，查找是否有与之相等的 $ba^j$ ，若有则 $ti-j$ 即为合法的 $x$ 值。不算  $\tt{Hash}$ 或 $\tt{map}$ 的化，复杂度 $\Theta(\sqrt{p})$。</p><h4 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> r = <span class="hljs-number">1</span>)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (; k; k &gt;&gt;= <span class="hljs-number">1</span>, x = x * x % p) &#123;<br><span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) r = r * x % p;<br>&#125;<br><span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsgs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>b %= p, a %= p;<br>map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;<br><span class="hljs-keyword">int</span> t = <span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">sqrt</span>(p)), k = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i ++, k = k * a % p) &#123;<br>m[k * b % p] = i;<br>&#125;<br>a = <span class="hljs-built_in">Pow</span>(a, t, p), k = a;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i ++, k = k * a % p) &#123;<br><span class="hljs-keyword">if</span> (m.<span class="hljs-built_in">find</span>(k) == m.<span class="hljs-built_in">end</span>()) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (i * t - m[k] &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> i * t - m[k];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="exBSGS"><a href="#exBSGS" class="headerlink" title="exBSGS"></a>exBSGS</h2><p>使用 $\tt{BSGS}$ 有一个限制条件，即 $a \perp p$，$\tt{exBSGS}$ 就是为了解决这个问题。</p><p>考虑  $a$、$p$  不互质时怎么做，设 $g = \gcd(a,p)$，$a = a’g$，$p=p’g$，易得 ：</p><script type="math/tex; mode=display">a'^xg^x-kp'g=b</script><script type="math/tex; mode=display">\Rightarrow g \left( a'^x g^{x-1} - kp'\right) = b</script><script type="math/tex; mode=display">\Rightarrow g \mid b</script><p>得到有解的条件：$g \mid b$。 然后继续瞎搞一波：</p><script type="math/tex; mode=display">a^x \equiv b \pmod{p}</script><script type="math/tex; mode=display">\Rightarrow \dfrac{a^x}{g} \equiv \dfrac{b}{g} \pmod{p'}</script><script type="math/tex; mode=display">\Rightarrow a' \times a^{x -1} \equiv \dfrac{b}{g} \pmod{p'}</script><script type="math/tex; mode=display">\Rightarrow a^{x-1} \equiv \dfrac{b}{g} \times a'^{-1} \pmod{p'}</script><p>每次使 $b = \dfrac{b}{g} \times a’^{-1} $，$p = p’$，缩小问题范围，一直做到 $a$，$p$ 互质即可 $\tt{BSGS}$ 求解。注意 $a$ 的指数变为 $x-1$。 </p><h4 id="CODE-1"><a href="#CODE-1" class="headerlink" title="CODE"></a>CODE</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Pow</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> r = <span class="hljs-number">1</span>)</span> </span>&#123;<br><span class="hljs-keyword">for</span> (; k; k &gt;&gt;= <span class="hljs-number">1</span>, x = x * x % p) &#123;<br><span class="hljs-keyword">if</span> (k &amp; <span class="hljs-number">1</span>) r = r * x % p;<br>&#125;<br><span class="hljs-keyword">return</span> r;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>; <span class="hljs-keyword">return</span>;&#125;;<br><span class="hljs-built_in">exgcd</span>(b, a % b, x, y);<br>    <span class="hljs-keyword">int</span> t = y; y = x - (a / b) * y, x = t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">Inv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> p, <span class="hljs-keyword">int</span> a = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> b = <span class="hljs-number">0</span>)</span> </span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">exgcd</span>(x, p, a, b), (a % p + p) % p;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">gcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (!b ? a : <span class="hljs-built_in">gcd</span>(b, a % b));<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bsgs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>b %= p, a %= p;<br>map&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; m;<br><span class="hljs-keyword">int</span> t = <span class="hljs-built_in">ceil</span>(<span class="hljs-built_in">sqrt</span>(p)), k = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; t; i ++, k = k * a % p) &#123;<br>m[k * b % p] = i;<br>&#125;<br>a = <span class="hljs-built_in">Pow</span>(a, t, p), k = a;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= t; i ++, k = k * a % p) &#123;<br><span class="hljs-keyword">if</span> (m.<span class="hljs-built_in">find</span>(k) == m.<span class="hljs-built_in">end</span>()) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (i * t - m[k] &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> i * t - m[k];<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">exbsgs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> p)</span> </span>&#123;<br>b %= p, a %= p;<br><span class="hljs-keyword">if</span>(b == <span class="hljs-number">1</span> || p == <span class="hljs-number">1</span>)<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">int</span> g = <span class="hljs-built_in">gcd</span>(a, p), s = <span class="hljs-number">0</span>, c = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span> (; g &gt; <span class="hljs-number">1</span>; g = <span class="hljs-built_in">gcd</span>(a, p)) &#123;<br><span class="hljs-keyword">if</span> (b % g != <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>b /= g, p /= g, (c *= a / g) %= p, s ++;<br><span class="hljs-keyword">if</span> (b == c) <span class="hljs-keyword">return</span> s;<br>&#125;<br><span class="hljs-keyword">int</span> res = <span class="hljs-built_in">bsgs</span>(a, b * <span class="hljs-built_in">Inv</span>(c, p), p);<br><span class="hljs-keyword">return</span> (~res ? res + s : res);<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>参考</strong>：<a href="https://oi-wiki.org/math/number-theory/bsgs/">OI Wiki</a>，<a href="https://mancityfc.blog.luogu.org/solution-p3846">https://mancityfc.blog.luogu.org/solution-p3846</a>，<a href="http://ccqh.cf/archives/173/">cqh’s blog</a> 。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>数学</tag>
      
      <tag>BSGS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>exgcd（扩展欧几里得）学习笔记</title>
    <link href="/c15690d7/"/>
    <url>/c15690d7/</url>
    
    <content type="html"><![CDATA[<h1 id="exgcd（扩展欧几里得）学习笔记"><a href="#exgcd（扩展欧几里得）学习笔记" class="headerlink" title="exgcd（扩展欧几里得）学习笔记"></a>exgcd（扩展欧几里得）学习笔记</h1><h2 id="前置芝士"><a href="#前置芝士" class="headerlink" title="前置芝士"></a>前置芝士</h2><ul><li>基础的模、整数运算；</li><li>$\gcd$ 的求法，即 $\gcd(a, b) = \gcd(b,a \bmod b)$；</li><li>裴蜀定理，二元一次方程方程 $ax+by=c$ 有解的充要条件是 $\gcd(a, b) \mid c$；</li></ul><h2 id="正文部分"><a href="#正文部分" class="headerlink" title="正文部分"></a>正文部分</h2><p>$\tt{exgcd}​$ 用于求出二元一次方程 $ax+by=c​$ 的一组特解。</p><p>首先根据裴蜀定理，可以先判掉无解的情况。这样我们可以先计算 $ax+by=\gcd(a,b)$ 这个方程的解，再乘上 $\dfrac{c}{\gcd(a,b)}$。</p><p>既然是 $\tt{exgcd}$，那我们考虑 $\gcd$ 是怎么做的，即缩小问题规模，把 $\gcd(a,b)$ 转化为 $\gcd(b, a \bmod b)$ 递归求解。</p><p>同样的思路，我们把方程转化为 $bx+(a\bmod b)y=\gcd(b,a \bmod b)$ 递归求解。所以现在的问题是，我们知道一个方程：</p><script type="math/tex; mode=display">bx + (a \bmod b)y = \gcd(b, a \bmod b)</script><p>的一组解 ${ x_2, y_2}$，求</p><script type="math/tex; mode=display">ax+by=\gcd(a,b)</script><p>的一组解 ${ x_1, y_1}$。因为</p><script type="math/tex; mode=display">\gcd(a,b)=\gcd(b,a \bmod b)</script><p>，所以</p><script type="math/tex; mode=display">bx_2+(a \bmod b)y_2=\gcd(a,b)</script><p>然后用拆开取模的小技巧可以得到：</p><script type="math/tex; mode=display">bx_2+ \left (a-b \left \lfloor \dfrac{a}{b} \right \rfloor \right )y_2 = \gcd(a,b)</script><p>继续化简：</p><script type="math/tex; mode=display">bx_2+ay_2 - b \left (\left \lfloor \dfrac{a}{b} \right \rfloor y_2 \right ) = \gcd(a,b)</script><script type="math/tex; mode=display">\Rightarrow ay_2 + b \left (x_2 - \left \lfloor \dfrac{a}{b} \right \rfloor y_2 \right) = \gcd(a,b)</script><p>最后得到：</p><script type="math/tex; mode=display">\begin{cases}\begin{align}&x_1 = y_2\\ &y_1 = \left (x_2 - \left \lfloor \dfrac{a}{b} \right \rfloor \right )\end{align}\end{cases}</script><p>考虑边界，当 $b = 0$ 时，$x = 1$，$y = 0$，时间复杂度与 $\gcd$ 相同， $\Theta(\log \ n)​$。</p><h4 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h4><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">exgcd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b, <span class="hljs-keyword">int</span> &amp;x, <span class="hljs-keyword">int</span> &amp;y)</span> </span>&#123;<br><span class="hljs-keyword">if</span> (b == <span class="hljs-number">0</span>) &#123;x = <span class="hljs-number">1</span>, y = <span class="hljs-number">0</span>; <span class="hljs-keyword">return</span>;&#125;;<br><span class="hljs-built_in">exgcd</span>(b, a % b, x, y);<br>    <span class="hljs-keyword">int</span> t = y; y = x - (a / b) * y, x = t;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>参考</strong>：<a href="https://oi-wiki.org/math/number-theory/gcd/#_7">OI Wiki</a>。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>数学</tag>
      
      <tag>exgcd</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络流 24 题 部分水题题解</title>
    <link href="/97155c2d/"/>
    <url>/97155c2d/</url>
    
    <content type="html"><![CDATA[<h1 id="网络流-24-题-部分题题解"><a href="#网络流-24-题-部分题题解" class="headerlink" title="网络流 24 题 部分题题解"></a>网络流 24 题 部分题题解</h1><p><strong>注</strong>：代码只给出主程序部分，网络流板子基本相同。</p><h2 id="方格取数问题"><a href="#方格取数问题" class="headerlink" title="方格取数问题"></a>方格取数问题</h2><p><a href="https://www.luogu.com.cn/problem/P2774">link</a></p><blockquote><p>给定 $m$ 行 $n$ 列的网格，每个格中有数，你可以取任意个格子的数，但不能同时取相邻的格子（四联通），求取出数的和的最大值。</p><p>$1 \le n,m \le 100$，$1 \le a_{i, j} \le 10^5$。</p></blockquote><p>考虑相邻的格子有什么性质，容易发现相邻的格子横纵坐标和的奇偶性相反。又因为相邻的不能同时取，所以我们可以假定全部格子都取，然后去掉不合法的，这样就很容易构造出网络流模型了：</p><ul><li>建立超级源、超级汇，超级源连向所有横纵坐标和为奇数的点，所有横纵坐标和为偶数的点连向超级汇，所有横纵坐标和为奇数的点连向相邻的偶点，用连向源和汇的边代表一个点选或不选；</li><li>这时候，如果源和汇联通，说明有一对相邻的点同时取了，这种情况就不和法，因此一个合法的取点方案就是一个网络的割；</li><li>考虑边权，因为我们用连向源和汇的边代表一个点选或不选，因此不希望删去中间奇偶点之间的边，所以中间的边边权为正无穷；连向源、汇的边边权自然就是这个点代表的格子中的数，这样，我们求一个最小割，就代表了删去数和最小的网格，使得取的数合法，因此答案就是总和 - 最小割。</li></ul><p><strong>CODE</strong> </p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>S = n * m + <span class="hljs-number">1</span>, T = n * m + <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>a[i][j] = <span class="hljs-built_in">read</span>(), c[i][j] = (i - <span class="hljs-number">1</span>) * m + j;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br>res += a[i][j];<br><span class="hljs-keyword">if</span> ((i + j) &amp; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">addE</span>(S, c[i][j], a[i][j]);<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">addE</span>(c[i][j], c[i - <span class="hljs-number">1</span>][j], INF);<br><span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">addE</span>(c[i][j], c[i][j - <span class="hljs-number">1</span>], INF);<br><span class="hljs-keyword">if</span> (i &lt; n) <span class="hljs-built_in">addE</span>(c[i][j], c[i + <span class="hljs-number">1</span>][j], INF);<br><span class="hljs-keyword">if</span> (j &lt; m) <span class="hljs-built_in">addE</span>(c[i][j], c[i][j + <span class="hljs-number">1</span>], INF);<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">addE</span>(c[i][j], T, a[i][j]);<br>&#125;<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) res -= <span class="hljs-built_in">dfs</span>(S, INF);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br></code></pre></div></td></tr></table></figure><h2 id="骑士共存问题"><a href="#骑士共存问题" class="headerlink" title="骑士共存问题"></a>骑士共存问题</h2><p><a href="https://www.luogu.com.cn/problem/P3355">link</a></p><blockquote><p>与上题题面基本相同，只不过改为 $n$ 行 $n$ 列，增加了 $m$ 个无法取数的位置，相邻的定义改为马的移动规则，点权为 $1$。</p><p>$1 \le n \le 200$，$0 \le m \le n^2$</p></blockquote><p>马的移动每次横纵坐标共改变 $3$，奇偶性依然不同，可以用上题的方法做。</p><p><strong>CODE</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dx[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>&#125;;<br><span class="hljs-keyword">const</span> <span class="hljs-keyword">int</span> dy[<span class="hljs-number">8</span>] = &#123;<span class="hljs-number">-2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-2</span>&#125;;<br><br>n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br>S = n * n + <span class="hljs-number">1</span>, T = n * n + <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>();<br>a[x][y] = <span class="hljs-number">1</span>;<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n; j ++) &#123;<br><span class="hljs-keyword">if</span> (a[i][j] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> ((i + j) &amp; <span class="hljs-number">1</span>) &#123;<br><span class="hljs-built_in">addE</span>(S, <span class="hljs-built_in">F</span>(i, j), <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> k = <span class="hljs-number">0</span>; k &lt; <span class="hljs-number">8</span>; k ++) &#123;<br><span class="hljs-keyword">int</span> x = i + dx[k], y = j + dy[k];<br><span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">1</span> || x &gt; n || y &lt; <span class="hljs-number">1</span> || y &gt; n) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (a[x][y] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-built_in">addE</span>(<span class="hljs-built_in">F</span>(i, j), <span class="hljs-built_in">F</span>(x, y), INF);<br>&#125;<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-built_in">addE</span>(<span class="hljs-built_in">F</span>(i, j), T, <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br>res = n * n - m;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) res -= <span class="hljs-built_in">dfs</span>(S, INF);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br></code></pre></div></td></tr></table></figure><h2 id="飞行员配对方案问题"><a href="#飞行员配对方案问题" class="headerlink" title="飞行员配对方案问题"></a>飞行员配对方案问题</h2><p><a href="https://www.luogu.com.cn/problem/P2756">link</a></p><blockquote><p>求二分图最大匹配并输出方案。</p><p>$1 \le n \le 100$</p></blockquote><p>二分图最大匹配不在赘述，求方案也很简单，如果中间一条边选了，那它的剩余流量为零，因此遍历所有变判断即可。</p><p><strong>CODE</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">m = <span class="hljs-built_in">read</span>(), n = <span class="hljs-built_in">read</span>();<br>S = n + <span class="hljs-number">1</span>, T = n + <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) <span class="hljs-built_in">addE</span>(S, i, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m + <span class="hljs-number">1</span>; j &lt;= n; j ++) <span class="hljs-built_in">addE</span>(j, T, <span class="hljs-number">1</span>);<br><br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> &amp;&amp; y &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">addE</span>(x, y, <span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) res += <span class="hljs-built_in">dfs</span>(S, INF);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= tot; i ++) &#123;<br><span class="hljs-keyword">if</span> (e[i].y == S || e[i ^ <span class="hljs-number">1</span>].y == S) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (e[i].y == T || e[i ^ <span class="hljs-number">1</span>].y == T) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (e[i].v == <span class="hljs-number">0</span> &amp;&amp; e[i].y &gt; m) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, e[i ^ <span class="hljs-number">1</span>].y, e[i].y);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="星际转移问题"><a href="#星际转移问题" class="headerlink" title="星际转移问题"></a>星际转移问题</h2><p><a href="https://www.luogu.com.cn/problem/P2754">link</a></p><blockquote><p>$k$  个人需要从地球到月球，中间有 $n$ 个空间站和 $m$ 艘飞船，每艘飞船有限载人数，按固定循环节在地球、月球和空间站之间行进，行进时间都为 $1$，每个人可以在任意位置乘飞船到其他地方，也可以在某地停留，空间站可以容纳无限的人，求所有人都到月球的最小时间，没有解输出 $0$。</p><p>$1 \le n \le 13$，$1 \le m \le 20$，$1 \le k \le 50$</p></blockquote><p>建边很妙的一道题，我感觉比前面的题难度高了一档。首先考虑怎么判断有没有解，并查集即可。</p><p>由于 $n​$ 特别小，可以直接枚举答案，判断是否合法。每个空间站一个点很难建图完成网络流的需求，因为会形成环，而且人的选择与时刻有关，不难想到在点上加一个时间刻，然后就有了一个阴间的算法：</p><ul><li>三种点，超级源、汇；第 $i$ 个时间刻的地球月球；第 $i$ 个时间刻的空间站 $j$；</li><li><p>三种边：</p><ul><li>源点向所有时刻的地球连边，边权正无穷，月球同理连汇点；</li><li>所有上一时刻的地月球、空间站向这一时刻的对应点连边，边权正无穷，代表人在原地不动；</li><li>按照飞船的行进在一些上一时刻的点和这一时刻的点连边，边权为该飞船的限载，代表人乘飞船到另一地点；</li></ul></li><li><p>跑最大流，若最大流大于等于人数，即为合法。</p></li></ul><p>这个建图是在是太妙了，建议多看几遍<del>体会网路流的优美之处</del>加深理解。</p><p>实现时有些细节要注意，如每次时间加时如果在原图的基础上继续加边，则需累加上次的答案；如果不累加需要把上次做网络流的图备份，因为跑网络流会改变图的结构；题目求的是要几天，而不是第几天到。</p><p><strong>CODE</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), k = <span class="hljs-built_in">read</span>();<br>S = ++cnt, T = ++cnt;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n + <span class="hljs-number">2</span>; i ++) fa[i] = i;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br>h[i] = <span class="hljs-built_in">read</span>(), r[i] = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= r[i]; j ++) &#123;<br>s[i][j] = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-number">0</span>) s[i][j] = n + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span> (s[i][j] == <span class="hljs-number">-1</span>) s[i][j] = n + <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span> (j &gt; <span class="hljs-number">1</span>) fa[<span class="hljs-built_in">getF</span>(s[i][j])] = <span class="hljs-built_in">getF</span>(s[i][j - <span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">if</span> (<span class="hljs-built_in">getF</span>(n + <span class="hljs-number">1</span>) != <span class="hljs-built_in">getF</span>(n + <span class="hljs-number">2</span>)) <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;0&quot;</span>), <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; ; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= n + <span class="hljs-number">2</span>; j ++) &#123;<br>c[i][j] = ++ cnt;<br><span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">1</span>) <span class="hljs-built_in">addE</span>(c[i - <span class="hljs-number">1</span>][j], c[i][j], INF);<br>&#125;<br><span class="hljs-built_in">addE</span>(S, c[i][n + <span class="hljs-number">1</span>], INF);<br><span class="hljs-built_in">addE</span>(c[i][n + <span class="hljs-number">2</span>], T, INF);<br><span class="hljs-keyword">if</span> (i == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= m; j ++) &#123;<br><span class="hljs-keyword">int</span> t1 = (i - <span class="hljs-number">2</span>) % r[j] + <span class="hljs-number">1</span>;<br><span class="hljs-keyword">int</span> t2 = (i - <span class="hljs-number">1</span>) % r[j] + <span class="hljs-number">1</span>;<br><span class="hljs-built_in">addE</span>(c[i - <span class="hljs-number">1</span>][s[j][t1]], c[i][s[j][t2]], h[j]);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) sum += <span class="hljs-built_in">dfs</span>(S, INF);<br><span class="hljs-keyword">if</span> (sum &gt;= k) <span class="hljs-keyword">return</span> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, i - <span class="hljs-number">1</span>), <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="试题库问题"><a href="#试题库问题" class="headerlink" title="试题库问题"></a>试题库问题</h2><p><a href="https://www.luogu.com.cn/problem/P2763">link</a></p><blockquote><p>$n$ 个题目，$k$ 个题目类型，每个类型都需要选出给定数量的题目。每个题目可以属于不同类型的题目，但只能选为一个类型的题目，求是否可行并输出方案。</p><p>$2 \le k \le 20$，$k \le n \le 10^3$</p></blockquote><p>一道题只能对应一个类型，这种 “对应” 关系里面可以看出一点最大流的特征。可以想到建立一个这样的网络：</p><ul><li>三种点：源汇点、$n$ 个代表题目的点、$k$ 个代表题目类型的点；</li><li>三种边：<ul><li>源点到题目点，边权 $1$，代表一个点选或不选；</li><li>类型点到汇点，边权为这个类型需要的题目数；</li><li>题目点到类型点，代表这道题目有这个类型，边权唯一。</li></ul></li></ul><p>这样求一下最大流即最大可以选的题目个数，若没达到要求就无解；否则遍历中间题目到类型的边，剩余流量为 $0$ 就说明这个题目作为这个类型选了。</p><p><strong>CODE</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">m = <span class="hljs-built_in">read</span>(), n = <span class="hljs-built_in">read</span>();<br>S = n + m + <span class="hljs-number">1</span>, T = n + m + <span class="hljs-number">2</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <span class="hljs-built_in">addE</span>(S, i, <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x; i &lt;= m; i ++) &#123;<br>x = <span class="hljs-built_in">read</span>(), sum += x;<br><span class="hljs-built_in">addE</span>(i + n, T, x);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= x; j ++) &#123;<br><span class="hljs-built_in">addE</span>(i, <span class="hljs-built_in">read</span>() + n, <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">int</span> Mx = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) Mx += <span class="hljs-built_in">dfs</span>(S, INF);<br><span class="hljs-keyword">if</span> (Mx &lt; sum) <span class="hljs-keyword">return</span> <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;No Solution!&quot;</span>), <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= tot; i ++) &#123;<br><span class="hljs-keyword">if</span> (e[i].y == S || e[i ^ <span class="hljs-number">1</span>].y == S) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (e[i].y == T || e[i ^ <span class="hljs-number">1</span>].y == T) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (e[i].y &lt;= n) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (e[i].v == <span class="hljs-number">0</span>) vec[e[i].y - n].<span class="hljs-built_in">pb</span>(e[i ^ <span class="hljs-number">1</span>].y);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++, <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>)) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d: &quot;</span>, i);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : vec[i]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, j);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>未完待续。。。</p><p><strong>参考</strong>：洛谷题解。</p>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>网络流</tag>
      
      <tag>最大流</tag>
      
      <tag>最小割</tag>
      
      <tag>网络流 24 题</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>网络流学习笔记</title>
    <link href="/b98db1c/"/>
    <url>/b98db1c/</url>
    
    <content type="html"><![CDATA[<h1 id="网络流学习笔记"><a href="#网络流学习笔记" class="headerlink" title="网络流学习笔记"></a>网络流学习笔记</h1><p><strong>注</strong>：笔者比较菜，许多证明没有给出，一些地方可能有误。</p><h2 id="一些定义"><a href="#一些定义" class="headerlink" title="一些定义"></a>一些定义</h2><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><p>对于一张有向图 $G \in (V, E)$，有一个源点  $S \in V$  和一个汇点  $T \in V$，每一条边 $(u, v) \in E$ 有一个限流 $c(u, v)$。特别的，$\forall (u, v) \notin E \ , \ c(u, v) = 0$。</p><h3 id="网络流"><a href="#网络流" class="headerlink" title="网络流"></a>网络流</h3><p>对于一个函数 $f(u, v)$，若满足如下性质：</p><ul><li>$f(u, v) \le c(u, v)$，即流量小于限流；</li><li>$f(u, v) = -f(v, u)$，反边的流量等于这条边流量的相反数，为什么要有反边我们在下面解释；</li><li>$\forall x \in V - { S, \ T}, \ \sum <em>{(u, x) \in E} f(u,x) = \sum</em>{(x, u) \in E}f(x, u)$，从源点流出的流量等于流入汇点的流量；</li></ul><p>则函数 $f(u, v)$ 被称为流函数。</p><h2 id="最大流"><a href="#最大流" class="headerlink" title="最大流"></a>最大流</h2><p>求从源点出发，能够流到汇点的最大流量问题，称为最大流。</p><p>在了解求解算法之前，我们需要了解一些概念。</p><h3 id="残量网络"><a href="#残量网络" class="headerlink" title="残量网络"></a>残量网络</h3><p>$c(u, v)$ 在减去 $f(u, v)$ 后得到的剩余流量 $c’(u, v)$ 组成的网络被称为残量网络。这个网络可以比原图少一些边（$c(x, y) \neq 0, \ c’(x, y) = 0$），也可以有一些原图没有的边（反边）。</p><h3 id="增广路"><a href="#增广路" class="headerlink" title="增广路"></a>增广路</h3><p>在残量网络的一条从 $S$ 到 $T$ 所有边剩余流量大于零的路径称为增广路。因为所有边剩余流量大于零，所以可以在增广路上在增加一些流量使得流更大，所以<strong>最大流的残量网络一定没有增广路</strong>。</p><h3 id="EK-Edmonds-Karp-算法"><a href="#EK-Edmonds-Karp-算法" class="headerlink" title="EK (Edmonds-Karp) 算法"></a>EK (Edmonds-Karp) 算法</h3><p>$\tt{EK}​$ 算法就是基于增广路的。算法的思想是每次 $\tt{bfs}​$ 找到一条增广路，并更新边权造出残量网络，更新答案，直到图中没有增广路。这里解释一下为什么要有反边，因为当前找到的增广路不一定是最优的，可能不包含在最大流的路径中，直接做就会出现错误。而反边给了我们反悔的机会，走反边就相当于减少了原来走这条边的流量，从而保证算法的正确性。</p><p>具体的，我们在残量网络上从源点 $S$ 开始 $\tt{bfs}$ ，每次走一直到汇点 $T$ 停止，记录路径上的的边的流量的最小值 $v$ 这样，就找到了一条增广路。接着重新走一遍增广路，每一条边的流量减去 $v$ ，反边流量加上 $v$ ，最后答案也加上 $v$，这样就找到了最大流。</p><div class="note note-success">            <p><b style="color : rgb(92,184,92);font-size: 15px;"> TIP </b></p><p>如果你使用邻接表存图，那么有一个小技巧找到反边：我们都知道，$2$ 异或 $1$ 是 $3$，$3$ 异或 $1$ 是 $2$，因此可以用异或一的方法快速找到反边。</p>          </div><p>$\tt{EK}$ 的时间复杂度是 $O(nm^2)$，实际较快，能跑 $10^3$ ~ $10^4$ 的数据。</p><h3 id="Dinic-算法"><a href="#Dinic-算法" class="headerlink" title="Dinic 算法"></a>Dinic 算法</h3><p>$\tt{EK}$ 一次只找到了一条增广路，存在较大的浪费，完全可以一次找到多条，就有了 $\tt{Dinic}$。</p><p>$\tt{Dinic}$ 的算法流程是这样的：</p><ul><li>通过 $\tt{bfs}$ 从源点 $S$ 对原图进行分层，构造分层图，直到汇点 $T$；</li><li>从源点 $S$ 开始 $\tt{dfs}$，每次只走到层数比当前层数多一的点，找到当前分层图中的所有增广路并更新。</li></ul><p>为什么要分层？通过分层可以找到最短路，最短路就可以避免一些问题，像这个图：</p><p><img src="/img/5.bmp" alt=""></p><p>最短路就不会搞中间这条边了。<del>以上纯属我口胡，我也不知道对不对。</del></p><p>实现中还有一些必要的优化，可以看下面的代码。经过优化的 $\tt{Dinic}$ 时间复杂度是 $\Theta(n^2m)$，实际跑时则更快，可以过 $10^4$ ~ $10^5$ 的数据。</p><h4 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h4><p>$\tt{EK}$ 比较菜我就不放了 (〃´-ω･)  <del>其实是懒得写</del>，主要还是用 $\tt{Dinic}$。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 210</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 5010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF (1e9)</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Array[N];<br><br><span class="hljs-keyword">int</span> n, m, S, T, Mx = <span class="hljs-number">0</span>, tot = <span class="hljs-number">1</span>;<br>Array hd, pre, flw, dep;<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">Edge</span> &#123;</span><br><span class="hljs-keyword">int</span> y, v, to;<br><span class="hljs-built_in">Edge</span>(<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> v = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> to = <span class="hljs-number">0</span>) :<br><span class="hljs-built_in">y</span>(y), <span class="hljs-built_in">v</span>(v), <span class="hljs-built_in">to</span>(to) &#123;&#125;<br>&#125;e[M * <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">addE</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y, <span class="hljs-keyword">int</span> v)</span> </span>&#123;<br>e[++ tot] = <span class="hljs-built_in">Edge</span>(y, v, hd[x]), hd[x] = tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">bfs</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-comment">// bfs 求出分层</span><br>queue&lt;<span class="hljs-keyword">int</span>&gt; q;<br><span class="hljs-built_in">memset</span>(dep, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> dep);<br>q.<span class="hljs-built_in">push</span>(S),dep[S] = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (q.<span class="hljs-built_in">size</span>()) &#123;<br><span class="hljs-keyword">int</span> x = q.<span class="hljs-built_in">front</span>(); q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[x]; i; i = e[i].to) &#123;<br><span class="hljs-keyword">int</span> y = e[i].y, v = e[i].v;<br><span class="hljs-keyword">if</span> (v == <span class="hljs-number">0</span> || dep[y] &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br>dep[y] = dep[x] + <span class="hljs-number">1</span>, q.<span class="hljs-built_in">push</span>(y);<br><span class="hljs-keyword">if</span> (y == T) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> in, <span class="hljs-keyword">int</span> out = <span class="hljs-number">0</span>)</span> </span>&#123;<br><span class="hljs-comment">// in : 剩余流入的流量, out : 流出的流量</span><br><span class="hljs-keyword">if</span> (x == T) <span class="hljs-keyword">return</span> in; <span class="hljs-comment">// 如果到达汇点直接返回</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[x]; i; i = e[i].to)&#123;<br><span class="hljs-keyword">int</span> y = e[i].y, v = e[i].v;<br><span class="hljs-keyword">if</span> (dep[y] != dep[x] + <span class="hljs-number">1</span> || v == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span>;<br><span class="hljs-comment">// 如果 y 不是下一层或者无法流出就不用做了</span><br>v = <span class="hljs-built_in">dfs</span>(y, <span class="hljs-built_in">min</span>(in, v));<br><span class="hljs-comment">// 算出下面可以流到汇点的流量</span><br>e[i].v -= v, e[i ^ <span class="hljs-number">1</span>].v += v;<br>in -= v, out += v;<br><span class="hljs-keyword">if</span> (!in) <span class="hljs-keyword">break</span>; <span class="hljs-comment">// 如果流量用完了就不用做了</span><br>&#125;<br><span class="hljs-keyword">if</span> (!out) dep[x] = <span class="hljs-number">-1</span>; <span class="hljs-comment">// 流量用完了这个点就不用做了</span><br><span class="hljs-keyword">return</span> out;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>(), S = <span class="hljs-built_in">read</span>(), T = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>(), v = <span class="hljs-built_in">read</span>();<br><span class="hljs-built_in">addE</span>(x, y, v), <span class="hljs-built_in">addE</span>(y, x, <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">bfs</span>()) Mx+=<span class="hljs-built_in">dfs</span>(S,<span class="hljs-number">1e9</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, Mx);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这也是 <a href="https://loj.ac/p/101">模板题</a> AC 代码。</p><h3 id="最大流求二分图最大匹配"><a href="#最大流求二分图最大匹配" class="headerlink" title="最大流求二分图最大匹配"></a>最大流求二分图最大匹配</h3><p>源点 $S$ 连向左边的点，右边的点连向汇点 $T$，二分图无向边改为左边连向右边的边，所有边边权都为一，这样就把二分图最大匹配转换成了最大流。求方案可以遍历中间的边，若剩余流量为 $0$ 说明这条边被用了。</p><p>特别的，用 $\tt{Dinic}$ 求二分图最大匹配复杂度为 $\Theta(\sqrt nm)$ 。</p><h4 id="CODE-1"><a href="#CODE-1" class="headerlink" title="CODE"></a>CODE</h4><p>给出建图部分以及求方案部分的代码。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">// 建边</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-built_in">addE</span>(S, i, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = m + <span class="hljs-number">1</span>; j &lt;= n; j ++) &#123;<br><span class="hljs-built_in">addE</span>(j, T, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">if</span> (x &lt; <span class="hljs-number">0</span> &amp;&amp; y &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<br><span class="hljs-built_in">addE</span>(x, y, <span class="hljs-number">1</span>);<br>&#125;<br><span class="hljs-comment">// 求方案</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">2</span>; i &lt;= tot; i ++) &#123;<br><span class="hljs-keyword">if</span> (e[i].y == S || e[i ^ <span class="hljs-number">1</span>].y == S) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (e[i].y == T || e[i ^ <span class="hljs-number">1</span>].y == T) <span class="hljs-keyword">continue</span>;<br><span class="hljs-keyword">if</span> (e[i].v == <span class="hljs-number">0</span> &amp;&amp; e[i].y &gt; m) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, e[i ^ <span class="hljs-number">1</span>].y, e[i].y);<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="最小割"><a href="#最小割" class="headerlink" title="最小割"></a>最小割</h2><p>删去一些边，使得源点和汇点不连通，求删去的边流量之和最小的问题称为最小割。</p><p>结论：最小割 = 最大流，因此最小割代码和最大流一模一样。</p><p><strong>参考</strong>：《算法竞赛进阶指南》，<a href="https://oi-wiki.org/graph/flow/">OI Wiki</a>。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>图论</tag>
      
      <tag>网络流</tag>
      
      <tag>最大流</tag>
      
      <tag>最小割</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1383D 题解</title>
    <link href="/8bcd6f2e/"/>
    <url>/8bcd6f2e/</url>
    
    <content type="html"><![CDATA[<h1 id="CF1383D-题解"><a href="#CF1383D-题解" class="headerlink" title="CF1383D 题解"></a>CF1383D 题解</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为 $n$ 的序列 $a$，选出 $a$ 中的若干个元素使得和为零。</p><p><strong>数据范围</strong> ：$1 \le n \le 10^6$，$i - n \le a_i \le 1 - i$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>构造题，$i - n \le a_i \le 1 - i$，即 $1 \le i - a_i \le n$ 。我们让 $i$ 向 $i - a_i$ 连边，这样显然形成环的时候和就是 $0$，时间复杂度 $\Theta(n)$。</p><p><strong>CODE</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1000010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> n, a[N], vis[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; res;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --; ) &#123;<br>n = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>a[i] = i - <span class="hljs-built_in">read</span>(), vis[i] = <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">int</span> x = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">while</span> (!vis[x]) vis[x] = <span class="hljs-number">1</span>, x = a[x];<br>res.<span class="hljs-built_in">clear</span>(), res.<span class="hljs-built_in">pb</span>(x), x = a[x];<br><span class="hljs-keyword">while</span> (x != res[<span class="hljs-number">0</span>]) res.<span class="hljs-built_in">pb</span>(x), x = a[x];<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, res.<span class="hljs-built_in">size</span>());<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : res) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, i);<br>&#125;<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>codeforces</tag>
      
      <tag>构造</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1391E 题解</title>
    <link href="/86532c08/"/>
    <url>/86532c08/</url>
    
    <content type="html"><![CDATA[<h1 id="CF1391E-题解"><a href="#CF1391E-题解" class="headerlink" title="CF1391E 题解"></a>CF1391E 题解</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个无向图，从下面两个操作中选择一个完成：</p><ul><li>输出一条长度不小于 $\lceil \frac{n}{2} \rceil$ 的链</li><li>选出至少 $\lceil \frac{n}{2} \rceil$ 个点，两两组成点对，使得任意两个点对 $4$ 个点的子图边数不超过 $2$。</li></ul><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>构造题，求出无向图的一个 $\tt{dfs}$ 树，若存在点深度大于等于 $\lceil \frac{n}{2} \rceil$，直接输出这个点到根节点的路径；否则考虑构造点对。</p><p>在 $\tt{dfs}$ 树上同层的点，在原图中是没有边相连的（如果有就会变成子树），因此将所有点和与其同层的点组成点对即可，这样边数不会超过 $2$，而深度是小于 $\lceil \frac{n}{2} \rceil$ 的，就算每层都剩一个点选出的点数也不会小于 $\lceil \frac{n}{2} \rceil$，所以这样构造一定有解。</p><p><strong>CODE</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 500010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><br><span class="hljs-keyword">int</span> n, m, dep[N], f[N], vis[N];<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N], vec[N];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>vis[x] = <span class="hljs-number">1</span>, dep[x] = dep[fa] + <span class="hljs-number">1</span>, f[x] = fa;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> y : e[x]) <span class="hljs-keyword">if</span> (!vis[y]) <span class="hljs-built_in">dfs</span>(y, x);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> T = <span class="hljs-built_in">read</span>(); T --; ) &#123;<br>n = <span class="hljs-built_in">read</span>(), m = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-built_in">read</span>(), y = <span class="hljs-built_in">read</span>();<br>e[x].<span class="hljs-built_in">pb</span>(y), e[y].<span class="hljs-built_in">pb</span>(x);<br>&#125;<br><br><span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">int</span> flag = <span class="hljs-number">0</span>, sum = <span class="hljs-number">0</span>, x = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">if</span> (dep[i] * <span class="hljs-number">2</span> &gt;= n) flag = <span class="hljs-number">1</span>, x = i;<br>&#125;<br><br><span class="hljs-keyword">if</span> (flag) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PATH\n%d\n&quot;</span>, dep[x]);<br><span class="hljs-keyword">for</span> (; x; x = f[x]) <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, x);<br><span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;&quot;</span>);<br>&#125; <span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>vec[dep[i]].<span class="hljs-built_in">pb</span>(i);<br>&#125;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">if</span> (vec[i].<span class="hljs-built_in">size</span>() % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) sum ++;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;PAIRING\n%d\n&quot;</span>, (n - sum) / <span class="hljs-number">2</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; vec[i].<span class="hljs-built_in">size</span>() / <span class="hljs-number">2</span>; j ++) &#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, vec[i][j * <span class="hljs-number">2</span>], vec[i][j * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>]);<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>vec[i].<span class="hljs-built_in">clear</span>(), e[i].<span class="hljs-built_in">clear</span>();<br>f[i] = dep[i] = vis[i] = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>codeforces</tag>
      
      <tag>dfs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CF1375E 题解</title>
    <link href="/c5764db7/"/>
    <url>/c5764db7/</url>
    
    <content type="html"><![CDATA[<h1 id="CF1375E-题解"><a href="#CF1375E-题解" class="headerlink" title="CF1375E 题解"></a>CF1375E 题解</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给定一个长度为 $n$ 的序列 $a$，求 $a$ 的逆序对数量，以及逆序对的一个排列，使得按排列顺序交换各个逆序对元素后，排列单调不降，如 <code>3, 1, 2</code> -&gt; <code>1, 3, 2</code> -&gt; <code>1, 2, 3</code>。</p><p>$1 \le n \le 10^3$，$1 \le a_i \le 10^9$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>构造题，先考虑 $a$ 为一个排列的情况，设 $b<em>{a_i} = i$，即每个元素在 $a$ 中的位置，我们可以将 $n$ 放到最后一个位置上，缩小问题规模。 最后一个位置上的数是 $a_n$，它与 $a_n + 1 ~ n$ 都构成了逆序对，那就可以一次交换 $(b</em>{a<em>n + 1}, n)$，$(b</em>{a<em>n + 1}, n)$ 一直到 $(b</em>{a_n}, n)$，这样不仅 $n$ 放到了最后一个位置，而且对于前面所有大于 $a_n$ 的数，都相当于值减了 $1$ ，也就是相对位置不变，成功缩小了问题规模，这样就可以一直做到 $1$ 解决问题，时间复杂度 $O(n^2)$。</p><p>解决了 $a$ 为排列的情况后就很简单了。可以以 $a_i$ 为第一关键字，$i$ 为第二关键字排序后哈希，这样逆序对与原排列相同，就可以直接解决了。</p><p><strong>CODE</strong></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span></span>;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1010</span><br><br><span class="hljs-keyword">int</span> n, a[N], c[N], sum = <span class="hljs-number">0</span>;<br>pair&lt;<span class="hljs-keyword">int</span>, <span class="hljs-keyword">int</span>&gt; b[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>n = <span class="hljs-built_in">read</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>a[i] = <span class="hljs-built_in">read</span>(), b[i] = <span class="hljs-built_in">make_pair</span>(a[i], i);<br>&#125;<br><span class="hljs-built_in">sort</span>(b + <span class="hljs-number">1</span>, b + n + <span class="hljs-number">1</span>);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>a[b[i].second] = i, c[i] = b[i].second;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt;= n; j ++) &#123;<br><span class="hljs-keyword">if</span> (a[i] &gt; a[j]) sum ++;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, sum);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = n; i &gt;= <span class="hljs-number">1</span>; i --) &#123;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = a[i] + <span class="hljs-number">1</span>; j &lt;= i; j ++) &#123;<br><span class="hljs-keyword">int</span> t = c[j];<br>c[a[t]] = i, c[a[i]] = t;<br><span class="hljs-built_in">swap</span>(a[t], a[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, t, i);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c ^ <span class="hljs-number">48</span>), c = <span class="hljs-built_in">getchar</span>();<br><span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>codeforces</tag>
      
      <tag>哈希</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSP 2021 游记</title>
    <link href="/17620/"/>
    <url>/17620/</url>
    
    <content type="html"><![CDATA[<h1 id="CSP-2021-游记"><a href="#CSP-2021-游记" class="headerlink" title="CSP 2021 游记"></a>CSP 2021 游记</h1><h2 id="DAY-0"><a href="#DAY-0" class="headerlink" title="DAY 0"></a>DAY 0</h2><p>六点多上的大巴，坐大巴当然是做最后排最左边的位置。今天没有去年 “江南风味” 的惨案（去年我们有一个在大巴上大号，味道还极其浓郁）。八点多到了酒店。</p><p>和 ${\color{red}\tt{hzy}}$ 巨佬一个房间，有一个不算小的电视，三刷了 《阿甘正传》，依然大受震撼。看完又随便找了点东西看，然后看到时间 00：03 就赶紧睡了。</p><h2 id="DAY-0-9"><a href="#DAY-0-9" class="headerlink" title="DAY 0.9"></a>DAY 0.9</h2><p>00：48，被热醒了，尼美舒利分散片。尝试睡着发现人十分清醒，最后选择再看一会电影，快速过了几部 HP 电影，发现很多和原著不一样，还有一些很草的地方，差评，成功使我有了睡意，两点我又睡了。</p><h2 id="DAY-1"><a href="#DAY-1" class="headerlink" title="DAY 1"></a>DAY 1</h2><p>叫床服务使我准时六点半起床，${\color{red}\tt{hzy}}$ 不考 J 还在睡，我就先去吃早饭。早饭不错，感觉精神不错。</p><hr><h3 id="J-组"><a href="#J-组" class="headerlink" title="J 组"></a>J 组</h3><p>先扫了一遍题目，哇，两道水题！三十分钟拿到 200， 信心倍增。</p><p>然后看 T2，感觉应该是数据结构题（并不是），想了一个小时，想了一个伞兵的线段树做法，但一个有一个东西不会维护于是当场裂开，先码了暴力，还剩大约两个小时。</p><p>然后看 T4，当时是先想了一个链表的暴力做法，可以拿到 70 分，发现在跳整块时会浪费大量时间，这时候其实已经很容易想到可以用并查集优化，而且前几天还做过类似的，可惜了，最后没有往这个方面想，那时感觉正解应该是个 dp（又并不是），想了一个 dp，但感觉转移的时候比较复杂，也没有想出来。</p><p>估分 100 + 76 + 100 + 70 = 346。</p><hr><p>中午吃完饭，和 ${\color{red}\tt{hzy}}$ 、 ${\color{red}\tt{fjz}}$两位没考 J 的大佬聊了会，发现我是真的菜。</p><hr><h3 id="S-组"><a href="#S-组" class="headerlink" title="S 组"></a>S 组</h3><p>四道题都看了看，好难，完全不会，我裂开来。</p><p>然后就码了 T1 暴力， T2 暴力， T3 暴力，T3 暴力。两个小时过去了。</p><p>这时候我尝试想正解，迷迷糊糊想到了 T1 的贪心，挺好写的，很快就写好了。</p><p>这时候我又想到了 T2 的一个记忆化搜索做法，似乎是 $O(n^3)$，然后这时候我记错时间了，以为还有一个小时，实际上还有一个半小时。我赶紧码，然后发现不对，发现似乎是 $O(n ^ 4)$ ，不过问题不大，改了又码码了又改，折腾了 50 分钟样例没过，发现算重了，写了个假算法。。。</p><p>这时候我以为只剩十分钟了，就赶紧检查了一下前面的代码，结果没想到还有半个小时，结果就是这半个小时我全程裂开，T4 我连题目都看不大懂。</p><p>估分 100 + 40 + 10 = 150。</p><h2 id="DAY-114514"><a href="#DAY-114514" class="headerlink" title="DAY 114514"></a>DAY 114514</h2><p>J ： luogu 344，hydro 370</p><p>S：hydro 50，loj 97</p><p>S T1 数组开小了一半，挂了 60 分 QAQ。</p><p>J 1= 应该问题不大，S 估计 3=，裂开了。</p>]]></content>
    
    
    <categories>
      
      <category>水</category>
      
    </categories>
    
    
    <tags>
      
      <tag>游记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Kruskal 重构树</title>
    <link href="/53115/"/>
    <url>/53115/</url>
    
    <content type="html"><![CDATA[<p>一个比较冷门的算法。</p><span id="more"></span><h2 id="Kruskal-重构树"><a href="#Kruskal-重构树" class="headerlink" title="Kruskal 重构树"></a>Kruskal 重构树</h2><p>在 $\tt{Kruskal}$ 的过程，并做这样一个操作：</p><ul><li>从小到大遍历所有边，设当前边两端为 $x$，$y$；</li><li>判断 $x$ 、$y$ 是否在同一并查集；</li><li>若不在，新建一个点权为这条边边权的节点 $p$ ，将 $x$ 、$y$ 分别于 $p$ 连边，并把 $x$ 、$y$ 的并查集合并到 $p$ 上。</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br><span class="hljs-keyword">int</span> p = <span class="hljs-built_in">getfa</span>(e[i].x), q = <span class="hljs-built_in">getfa</span>(e[i].y);<br>    <span class="hljs-keyword">if</span> (p == q) <span class="hljs-keyword">continue</span>;<br>    v[++ tot] = e[i].v;<br>    e[tot].<span class="hljs-built_in">push_back</span>(p), e[p].<span class="hljs-built_in">push_back</span>(tot);<br>    e[tot].<span class="hljs-built_in">push_back</span>(q), e[q].<span class="hljs-built_in">push_back</span>(tot);<br>fa[p] = fa[q] = fa[tot] = tot;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>原来的点点权为负无穷。</p><p>这样我们就得到了一棵树，这棵树就是 <strong>Kruskal 重构树</strong>。这棵树有什么性质呢？</p><ol><li>这棵树有 $2n - 1$ 个点， 以第 $2n -1$ 个点为根，该树有 $n$ 个叶子节点，叶子节点都是原来的点，因为合并操作进行了 $n - 1$ 次，原来的点显然是叶子；</li><li>树上任意两点 $\tt{LCA}$ 的点权就是原图中这两点路径上最长边的最小值。这个也很显然，我们是从小到大操作边的，所以显然深度越小的点点权越大；</li><li>对于原图上的一个点，它能用权值 $\le v$ 的边到达的点，就是它在树上深度最小的点权 $\le v$  的祖先的子树内的点。这个也很显然。</li></ol><p>根据这些性质（尤其是 2、3），$\tt{Kruskal}$ 重构树可以很好的把图上的问题转化为树上的问题。</p>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>图论</tag>
      
      <tag>Kruskal</tag>
      
      <tag>Kruskal 重构树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>改变代码块字体的 Stylish</title>
    <link href="/8601/"/>
    <url>/8601/</url>
    
    <content type="html"><![CDATA[<p>改变代码块字体的 Stylish，洛谷、CF 珂以用，其他的也许可以。</p><span id="more"></span><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">code</span> &#123;<br>    <span class="hljs-attribute">font-family</span>: Consolas <span class="hljs-meta">!important</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>水</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>Stylish</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>九校联考Day2 - 3.管理 题解</title>
    <link href="/44648/"/>
    <url>/44648/</url>
    
    <content type="html"><![CDATA[<p>九校联考Day2 - 3.管理 题解</p><p>题意：n 个员工， m 次操作，操作分为以下三种：</p><span id="more"></span><h2 id="九校联考Day2-3-管理-题解"><a href="#九校联考Day2-3-管理-题解" class="headerlink" title="九校联考Day2 - 3.管理 题解"></a>九校联考Day2 - 3.管理 题解</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>$n$ 个员工， $m$ 次操作，操作分为以下三种：</p><ol><li><p>任命一个员工是另一员工的上司（上司关系不构成还），即构成一个森林的。</p></li><li><p>在一个员工处产生一个新文件，他的所有上司和他会阅读这份文件。</p></li><li><p>查询之前的一个文件是否被某个人阅读。</p></li></ol><h5 id="数据范围"><a href="#数据范围" class="headerlink" title="数据范围"></a>数据范围</h5><div class="table-container"><table><thead><tr><th style="text-align:center">测试点编号</th><th style="text-align:center">$n$</th><th style="text-align:center">$m$</th><th style="text-align:center">特殊性</th></tr></thead><tbody><tr><td style="text-align:center">$1-4$</td><td style="text-align:center">$n \le 1000$</td><td style="text-align:center">$m \le 1000$</td><td style="text-align:center">/</td></tr><tr><td style="text-align:center">$5-10$</td><td style="text-align:center">$n \le 30000$</td><td style="text-align:center">$m \le 3000$</td><td style="text-align:center">$1$ 号员工无上司，若员工$ i&gt;=2 $<br/>有直接上司，则一定是员工 $i - 1$</td></tr><tr><td style="text-align:center">$11-16$</td><td style="text-align:center">$n \le 150000$</td><td style="text-align:center">$m \le 300000$</td><td style="text-align:center">所有操作 1 在操作 2 和 3 前</td></tr><tr><td style="text-align:center">$17 - 20$</td><td style="text-align:center">$n \le 150000$</td><td style="text-align:center">$m \le 300000$</td><td style="text-align:center">/</td></tr></tbody></table></div><h3 id="5-10"><a href="#5-10" class="headerlink" title="5 - 10"></a>5 - 10</h3><p>因为一个员工 $i$ 的上司一定在 $i$ 前面，因此只要员工 $j$ （$j &lt; i$）满足此时 $i$ 与 $j$ 联通，那 $j$ 一定是 $i$ 的上司，直接并查集处理即可。</p><h3 id="11-16"><a href="#11-16" class="headerlink" title="11 - 16"></a>11 - 16</h3><p>这个特殊性使得我们可以提前处理这个森林，用 $\texttt{LCA}$ 或者 $\texttt{dfs}$ 序等方法判断一个员工是否是另一个员工的祖先即可。</p><h3 id="满分做法"><a href="#满分做法" class="headerlink" title="满分做法"></a>满分做法</h3><p>从上面的部分分做法获得启示，我们考虑在当前两个员工 $x$，$y$ 联通时，因为是树，所以此时这两个员工的相对位置已经确定了，不管再怎么进行操作 1，$x$ 如果是 $y$ 的祖先那他肯定还是，不是也不可能让它变成 $y$ 的祖先。因此，我们要判断在一个时刻 $x$ 是否是 $y$ 的祖先，相当于判断在当前时刻 $x$，$y$ 是否联通，在最后形成的森林中 $x$ 是否是 $y$ 的祖先。因此，我们得到以下的做法：</p><ul><li>输入所有操作，执行操作 1，处理森林；</li><li>将所有操作 3 标记在相应的操作 2 上；</li><li>按时间遍历操作 1 和 2，对于操作 1 执行并查集合并，对于操作 2 遍历所含的 3 ，判断是否联通，以及在预处理的森林中是否是祖先关系。</li></ul><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 1500010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> pb push_back</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">int</span> Ary[N];<br><br><span class="hljs-keyword">int</span> n, m, fl = <span class="hljs-number">0</span>, cnt = <span class="hljs-number">0</span>, dfn = <span class="hljs-number">0</span>, tot = <span class="hljs-number">0</span>;<br>Ary File, hd, L, R, fa, res;<br>vector&lt;<span class="hljs-keyword">int</span>&gt; e[N];<br><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">qes</span> &#123;</span><br><span class="hljs-keyword">int</span> op, x, y;<br><span class="hljs-built_in">qes</span>(<span class="hljs-keyword">int</span> op = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>) : <span class="hljs-built_in">op</span>(op), <span class="hljs-built_in">x</span>(x), <span class="hljs-built_in">y</span>(y) &#123;&#125;<br>&#125;q[N]; vector&lt;qes&gt; Ask[N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">getF</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br><span class="hljs-keyword">return</span> fa[x] == x ? x : fa[x] = <span class="hljs-built_in">getF</span>(fa[x]);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>L[x] = ++ dfn;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> i : e[x]) <span class="hljs-built_in">dfs</span>(i, x);<br>R[x] = dfn;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;manage.in&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br><span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;manage.out&quot;</span>, <span class="hljs-string">&quot;w&quot;</span>, stdout);<br><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br><span class="hljs-keyword">int</span> op, x, y; <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;op, &amp;x);<br><span class="hljs-keyword">if</span> (op != <span class="hljs-number">2</span>) <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;y);<br><span class="hljs-keyword">else</span> q[++ cnt] = <span class="hljs-built_in">qes</span>(op, x);<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) e[y].<span class="hljs-built_in">pb</span>(x), fa[x] = <span class="hljs-number">1</span>, q[++ cnt] = <span class="hljs-built_in">qes</span>(op, x, y);<br><span class="hljs-keyword">if</span> (op == <span class="hljs-number">3</span>) Ask[y].<span class="hljs-built_in">pb</span>(<span class="hljs-built_in">qes</span>(i, x));<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) <span class="hljs-keyword">if</span> (!fa[i]) <span class="hljs-built_in">dfs</span>(i, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) fa[i] = i;<br><br><span class="hljs-built_in">memset</span>(res, <span class="hljs-number">-1</span>, <span class="hljs-keyword">sizeof</span> res);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, t = <span class="hljs-number">0</span>; i &lt;= cnt; i ++) &#123;<br><span class="hljs-keyword">if</span> (q[i].op == <span class="hljs-number">1</span>) fa[<span class="hljs-built_in">getF</span>(q[i].x)] = <span class="hljs-built_in">getF</span>(q[i].y);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span> j : Ask[++ t]) &#123;<br>res[j.op] = <br>(<span class="hljs-built_in">getF</span>(q[i].x) == <span class="hljs-built_in">getF</span>(j.x) &amp;&amp;<br>L[j.x] &lt;= L[q[i].x] &amp;&amp; L[q[i].x] &lt;= R[j.x]);<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= m; i ++) &#123;<br>~res[i] ? (res[i] ? <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;YES&quot;</span>) : <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;NO&quot;</span>)) : i = i;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>dfs</tag>
      
      <tag>并查集</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HTR003E NOI树 题解</title>
    <link href="/65456/"/>
    <url>/65456/</url>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://hydro.ac/p/HTR003E">题目</a> 大意：</p><p>给出一颗 $n$ 个结点的树，每个结点上有 <code>N</code>，<code>O</code>，<code>I</code> 三个字母其中一个。一个 <code>NOI</code> 三元组”定义为：三个分别为 <code>N</code>，<code>O</code>，<code>I</code> 的结点，且 <code>O</code> 结点在 <code>N</code> 结点和 <code>I</code> 结点的路径上。求 <code>NOI</code> 三元组的个数，对 $10^9+7$  取模。</p></blockquote><p>考虑钦定一个点为根，记录以每个点为根的子树内 <code>N</code> 和 <code>I</code> 的个数，这个通过 dfs 就可以求出。在记录总共有多少个 <code>N</code> 和 <code>I</code>， 这样就可以求出这个点子树外的 <code>N</code> 和 <code>I</code> 的个数。接下来枚举中间点 <code>O</code> ，扫一遍即可。</p><p>具体的，每次枚举到一个 <code>O</code> 时，遍历所有子树，记录之前遍历到的所有子树 <code>N</code>和 <code>O</code> 的数量，那么这个与前面的子树内的点匹配的贡献就珂以直接相乘算出。与后面子树内的点的贡献将在后面计算，这样就可以做到不重不漏。</p><p>不懂的话可以看代码理解 Qwq。</p><p>CODE : </p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MxN 100010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> p 1000000007</span><br><br><span class="hljs-keyword">int</span> n, a[MxN], hd[MxN], res = <span class="hljs-number">0</span>, tot = <span class="hljs-number">0</span>, N[MxN], I[MxN], sN = <span class="hljs-number">0</span>, sI = <span class="hljs-number">0</span>, f[MxN];<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br>    <span class="hljs-keyword">int</span> y, to;<br>    <span class="hljs-built_in">node</span>(<span class="hljs-keyword">int</span> y = <span class="hljs-number">0</span>, <span class="hljs-keyword">int</span> to = <span class="hljs-number">0</span>) : <span class="hljs-built_in">y</span>(y), <span class="hljs-built_in">to</span>(to) &#123;&#125;<br>&#125;e[MxN * <span class="hljs-number">2</span>];<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>    e[++ tot] = <span class="hljs-built_in">node</span>(y, hd[x]), hd[x] = tot;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">dfs</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> fa)</span> </span>&#123;<br>    f[x] = fa;<br>    <span class="hljs-keyword">if</span> (a[x] == <span class="hljs-number">1</span>) N[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (a[x]) I[x] = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = hd[x]; i; i = e[i].to) &#123;<br>        <span class="hljs-keyword">int</span> y = e[i].y;<br>        <span class="hljs-keyword">if</span> (y == fa) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-built_in">dfs</span>(y, x);<br>        N[x] += N[y], I[x] += I[y];<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    cin &gt;&gt; n;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">char</span> c; cin &gt;&gt; c;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;O&#x27;</span>) a[i] = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;N&#x27;</span>) a[i] = <span class="hljs-number">1</span>, sN ++;<br>        <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;I&#x27;</span>) a[i] = <span class="hljs-number">2</span>, sI ++;<br>    &#125; <br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, x, y; i &lt; n; i ++) &#123;<br>        cin &gt;&gt; x &gt;&gt; y, <span class="hljs-built_in">add</span>(x, y), <span class="hljs-built_in">add</span>(y, x);<br>    &#125;<br>    <span class="hljs-built_in">dfs</span>(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i]) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">int</span> tN = <span class="hljs-number">0</span>, tI = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = hd[i]; j; j = e[j].to) &#123;<br>            <span class="hljs-keyword">int</span> y = e[j].y;<br>            <span class="hljs-keyword">if</span> (y == f[i]) <span class="hljs-keyword">continue</span>;<br>            (res += N[y] * tI) %= p, tI += I[y];<br>            (res += I[y] * tN) %= p, tN += N[y];<br>        &#125;<br>        (res += (sN - tN) * tI) %= p;<br>        (res += (sI - tI) * tN) %= p;<br>    &#125;<br>    cout &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>题解</category>
      
    </categories>
    
    
    <tags>
      
      <tag>图论</tag>
      
      <tag>计数</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>高精度加减乘板子</title>
    <link href="/48697/"/>
    <url>/48697/</url>
    
    <content type="html"><![CDATA[<p>因为是板子压得很短 /jk。</p><span id="more"></span><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">BI</span> &#123;</span><br>    string s; <span class="hljs-keyword">int</span> op = <span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">BI</span>(string s = <span class="hljs-string">&quot;&quot;</span>) : <span class="hljs-built_in">s</span>(s) &#123;&#125;<br>    BI <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> BI &amp;x) &#123;<br>        BI res;<br>        <span class="hljs-keyword">int</span> a[N] = &#123;&#125;, b[N] = &#123;&#125;, c[N] = &#123;&#125;, op = <span class="hljs-number">0</span>, len = <span class="hljs-built_in">max</span>(s.<span class="hljs-built_in">size</span>(), x.s.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i ++) a[i + <span class="hljs-number">1</span>] = s[s.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x.s.<span class="hljs-built_in">size</span>(); i ++) b[i + <span class="hljs-number">1</span>] = x.s[x.s.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i ++) c[i] = a[i] + b[i] + op, op = c[i] / <span class="hljs-number">10</span>, c[i] %= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">if</span> (op) c[++ len] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i ++) res.s += c[len - i] + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-keyword">const</span> BI &amp;x) &#123;<br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">size</span>() != x.s.<span class="hljs-built_in">size</span>() ? s.<span class="hljs-built_in">size</span>() &gt; x.s.<span class="hljs-built_in">size</span>() : s &gt; x.s;<br>    &#125;<br>    <span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> BI &amp;x) &#123;<br>        <span class="hljs-keyword">return</span> s.<span class="hljs-built_in">size</span>() != x.s.<span class="hljs-built_in">size</span>() ? s.<span class="hljs-built_in">size</span>() &lt; x.s.<span class="hljs-built_in">size</span>() : s &lt; x.s;<br>    &#125;<br>    BI <span class="hljs-keyword">operator</span>-(<span class="hljs-keyword">const</span> BI &amp;x) &#123;<br>        <span class="hljs-function">BI <span class="hljs-title">A</span><span class="hljs-params">(s)</span>, B </span>= x, <span class="hljs-built_in">res</span>(<span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-keyword">if</span> (A.s == B.s) <span class="hljs-keyword">return</span> <span class="hljs-built_in">BI</span>(<span class="hljs-string">&quot;0&quot;</span>); <span class="hljs-keyword">if</span> (A &lt; B) <span class="hljs-built_in">swap</span>(A, B), res.op = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> a[N] = &#123;&#125;, b[N] = &#123;&#125;, c[N] = &#123;&#125;, op = <span class="hljs-number">0</span>, len = A.s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; A.s.<span class="hljs-built_in">size</span>(); i ++) a[i + <span class="hljs-number">1</span>] = A.s[A.s.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; B.s.<span class="hljs-built_in">size</span>(); i ++) b[i + <span class="hljs-number">1</span>] = B.s[B.s.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= len; i ++)<br>            c[i] = a[i] - op - b[i], op = (c[i] &lt; <span class="hljs-number">0</span>), (c[i] += <span class="hljs-number">10</span>) %= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">while</span> (c[len] == <span class="hljs-number">0</span>) len --; <span class="hljs-keyword">if</span> (res.op) res.s += <span class="hljs-string">&#x27;-&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i ++) res.s += c[len - i] + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>    BI <span class="hljs-keyword">operator</span>*(<span class="hljs-keyword">const</span> BI &amp;x) &#123;<br>        <span class="hljs-function">BI <span class="hljs-title">res</span><span class="hljs-params">(<span class="hljs-string">&quot;&quot;</span>)</span></span>;<br>        <span class="hljs-keyword">if</span> (s == <span class="hljs-string">&quot;0&quot;</span> || x.s == <span class="hljs-string">&quot;0&quot;</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">BI</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>        <span class="hljs-keyword">int</span> a[N] = &#123;&#125;, b[N] = &#123;&#125;, c[N] = &#123;&#125;, op = <span class="hljs-number">0</span>, l1 = s.<span class="hljs-built_in">size</span>(), l2 = x.s.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; s.<span class="hljs-built_in">size</span>(); i ++) a[i + <span class="hljs-number">1</span>] = s[s.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; x.s.<span class="hljs-built_in">size</span>(); i ++) b[i + <span class="hljs-number">1</span>] = x.s[x.s.<span class="hljs-built_in">size</span>() - i - <span class="hljs-number">1</span>] - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l1; i ++) <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">1</span>; j &lt;= l2; j ++) c[i + j - <span class="hljs-number">1</span>] += a[i] * b[j];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= l1 + l2 - <span class="hljs-number">1</span>; i ++) c[i] += op, op = c[i] / <span class="hljs-number">10</span>, c[i] %= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; l1 + l2 - <span class="hljs-number">1</span>; i ++) res.s += c[l1 + l2 - <span class="hljs-number">1</span> - i] + <span class="hljs-string">&#x27;0&#x27;</span>;<br>        <span class="hljs-keyword">while</span> (op) res.s += (op % <span class="hljs-number">10</span>) + <span class="hljs-string">&#x27;0&#x27;</span>, op /= <span class="hljs-number">10</span>;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>高精度</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>斜率优化入门</title>
    <link href="/6462/"/>
    <url>/6462/</url>
    
    <content type="html"><![CDATA[<p>通过一道简单的例题入门斜率优化 Qwq。</p><span id="more"></span><blockquote><p>任务安排2</p><p>给定 $n$ 个有 $T_i$、$C_i$ 两属性的机器和 $S$，将其分为若干段，第 $j$ 个段 $[l, r]​$ 的费用为 </p><script type="math/tex; mode=display">(sC_r - sC_{l - 1})\times(S \times j + sT_r)</script><p>$sC_i$，$sT_i$ 为前缀和数组，求最小费用。</p><p>$1 \le N \le 3 \times 10^5, \ \ 1 \le S, \ T_i , \ C_i \le 512$</p></blockquote><h2 id="推dp"><a href="#推dp" class="headerlink" title="推dp"></a>推dp</h2><div class="note note-warning">            <p>以下的 $C​$，$T​$ 数组皆为前缀和处理后的数组。</p>          </div><p>设 $F_{i,j}$ 表示前 $i$ 个机器分 $j$ 段的最小费用，枚举最后一段的开头 $k$，易得转移：</p><script type="math/tex; mode=display">F_{i,j}=\min_{1\le k < i}(F_{k,j-1} + (C_i - C_{k})\times(S \times j + T_i))</script><p>最暴力的方程。将段产生的费用分出来，每次计算当前这一段对后面的费用影响，即<strong>费用提前计算</strong>思想，可以优化掉第二维：</p><script type="math/tex; mode=display">F_i= \min_{1\le j < i}(F_j + (C_i-C_j)\times T_i + (C_n-C_j) \times S)</script><p>这样可以达到 $\Theta(n^2)$ 的时间复杂度，对于本题的数据范围显然是不可行的，我们要对它进行优化<del>废话</del>。</p><p>对于这个式子，发现它<strong>同时包含了与 $i$、$j$ 相关的项</strong>（$C_j \times T_i$），比较不好处理，这时就要用到斜率优化了。</p><p><del>鬼知道是怎么想到的</del></p><h2 id="斜率优化"><a href="#斜率优化" class="headerlink" title="斜率优化"></a>斜率优化</h2><p>将上面的式子进一步展开：</p><script type="math/tex; mode=display">F_i=\min_{1\le j < i}(F_j + C_i\times T_i - C_j \times T_i + C_n \times S - C_j \times S)</script><p>与 $j$ 无关的可以提到左边：</p><script type="math/tex; mode=display">F_i -C_i \times T_i - C_n \times S = \min_{1 \le j < i}(F_j - C_j \times T_i - C_j \times S)</script><p>即</p><script type="math/tex; mode=display">F_i - C_i \times T_i - C_n \times S = \min_{1 \le j < i}(F_j - (T_i + S)\times C_j)</script><p>类比一次函数 $y=kx + b$，变为 $b = y - kx$，那么就可以这样设：</p><script type="math/tex; mode=display">B_j = F_i - C_i \times T_i - C_n \times S \\Y_j = F_j \\K_j = T_i + S \\X_j = C_j</script><p>这就是一条<strong>以 $T_i + S$ 为斜率，$F_i - C_i \times T_i - C_n \times S$ 为截距的直线</strong>（截距就是一次函数的 $b$）。</p><p>$C_i \times T_i$ 和 $C_n \times S$ 都是已知量，不会改变，所以求 $F_i$ 的最小值就是<strong>找到一个合适的 $j$，使截距最小化</strong>。</p><p><img src="/img/1.png" alt=""></p><p>看着这个图考虑这样一个过程：一根斜率已知的直线 $i$，从下向上平移，遇到第一个点 $j(C_j, F_j)$ ，时此时截距即为最小值，like this：</p><p><img src="/img/2.png" alt=""></p><p>显然这样的决策点 $(C_j,F_j)$ <strong>一定在下凸壳上</strong>（下凸壳：相邻两点连线斜率单调上升的若干个点），这个很容易从图形上直观理解，就不证明了。</p><p><img src="/img/3.png" alt=""></p><p>这就是一个下凸壳。那哪个点才是我们想要的决策点呢？显然，当<strong>直线与凸壳相交时交点左边的斜率都小于直线斜率，右边都大于直线斜率</strong>，看图就很好理解：</p><p><img src="/img/4.png" alt=""></p><p>这样我们只要在凸壳上找到这样的一个分界点即可。怎么找呢？不难发现斜率 $T_i + S$ 是单调递增的，所以在凸壳上这个分界点一定是逐渐右移的，像这样：</p><p><img src="/img/5.png" alt=""></p><p>绿线是前一次转移，红线是当前转移，可以看见斜率增加，分界点向右移动。所以我们可以只保存凸壳上斜率大于$T_i + S$  的部分，就可以快速转移。最后只剩下一个问题，就是维护凸壳。这个也很简单，每次尝试在右侧加入点 $X_i, Y_i​$ 判断与前一个点连边斜率是否大于前一条边，即是否满足下凸壳的性质，大于的话就把凸壳的    右端点删除，继续尝试。就是这样一个过程：</p><p><img src="/img/6.png" alt=""></p><p>尝试加入这个点，发现不满足下凸壳性质，因此删掉右端点：</p><p><img src="/img/7.png" alt=""></p><p>发现满足，这个点就成功加入了。</p><p><img src="/img/8.png" alt=""></p><p>然后你就会发现双端队列可以很好地满足我们维护凸壳的需求。</p><p>这样就可以做到 $\Theta(n)$ 了。斜率优化的大致思想就是这样吧。</p><h3 id="CODE"><a href="#CODE" class="headerlink" title="CODE"></a>CODE</h3><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 300010</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> eps 1e-6</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> int long long</span><br><br><span class="hljs-keyword">int</span> n, S, c[N], t[N], q[N], l, r, f[N];<br><span class="hljs-comment">// q 就是维护凸壳的队列</span><br><br><span class="hljs-function"><span class="hljs-keyword">signed</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;n, &amp;S);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>, tt, cc; i &lt;= n; i ++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld%lld&quot;</span>, &amp;tt, &amp;cc);<br>        c[i] = c[i - <span class="hljs-number">1</span>] + cc; <span class="hljs-comment">// 前缀和</span><br>        t[i] = t[i - <span class="hljs-number">1</span>] + tt;<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(f, <span class="hljs-number">0x3f</span>, <span class="hljs-keyword">sizeof</span> f), f[<span class="hljs-number">0</span>] = <span class="hljs-number">0</span>, l = r = <span class="hljs-number">1</span>, q[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i ++) &#123;<br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123; <span class="hljs-comment">// 将斜率大于当前值的删去</span><br>            <span class="hljs-keyword">double</span> k = <span class="hljs-number">1.0</span> * (f[q[l]] - f[q[l + <span class="hljs-number">1</span>]]) / (c[q[l]] - c[q[l + <span class="hljs-number">1</span>]]);<br>            <span class="hljs-comment">/*注意这里以及下面都使用了 double 存储斜率来方便理解，</span><br><span class="hljs-comment">            一般要将除法运算转换成乘法来提高精度，但这样也是可以 A 的 Qwq*/</span><br>            <span class="hljs-keyword">if</span> (k - (t[i] + S) &gt; eps) <span class="hljs-keyword">break</span>;<br>            l ++;<br>        &#125;<br>        f[i] = f[q[l]] + t[i] * (c[i] - c[q[l]]) + (c[n] - c[q[l]]) * S; <span class="hljs-comment">// 转移</span><br>        <span class="hljs-keyword">while</span> (l &lt; r) &#123; <span class="hljs-comment">// 维护凸壳</span><br>            <span class="hljs-keyword">double</span> k1 = <span class="hljs-number">1.0</span> * (f[q[r]] - f[q[r - <span class="hljs-number">1</span>]]) / (c[q[r]] - c[q[r - <span class="hljs-number">1</span>]]);<br>            <span class="hljs-keyword">double</span> k2 = <span class="hljs-number">1.0</span> * (f[i] - f[q[r]]) / (c[i] - c[q[r]]);<br>            <span class="hljs-keyword">if</span> (k2 - k1 &gt; eps) <span class="hljs-keyword">break</span>;<br>            r --;<br>        &#125;<br>        q[++ r] = i; <span class="hljs-comment">// 插入新点</span><br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%lld\n&quot;</span>, f[n]);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">/* 完结撒花！ */</span><br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>模板</tag>
      
      <tag>dp</tag>
      
      <tag>斜率优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Lambda 在竞赛的简单应用</title>
    <link href="/62144/"/>
    <url>/62144/</url>
    
    <content type="html"><![CDATA[<p><del>该死的</del> CCF 终于更新到了 c++14。 <code>__gcd</code>，<code>auto</code> 以外，<strong>Lambda</strong> 也可以优化码风，对 Oier 还是挺有用的。</p><span id="more"></span><blockquote><p>Lambda表达式是现代C++在C ++ 11和更高版本中的一个新的语法糖 ，在C++11、C++14、C++17和C++20中Lambda表达的内容还在不断更新。 lambda表达式（也称为lambda函数）是在调用或作为函数参数传递的位置处定义匿名函数对象的便捷方法。——<a href="https://blog.csdn.net/A1138474382/article/details/111149792">这里</a></p></blockquote><p>Lambda 是一种在<strong>调用等地定义</strong>的匿名函数。非常简单，相信看两个例子你就能理解。</p><hr><p>假如你定义了一个结构体：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br><span class="hljs-keyword">int</span> x, y;<br>&#125;a[N];<br></code></pre></div></td></tr></table></figure><p>要对其进行排序，你可能会定义一个 cmp 函数，或是重载运算符，它们长这样：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(node a, node b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a.x &lt; b.x;<br>&#125;<br><span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>, cmp);<br></code></pre></div></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">node</span> &#123;</span><br><span class="hljs-keyword">int</span> x, y;<br><span class="hljs-keyword">bool</span> <span class="hljs-keyword">operator</span> &lt;(<span class="hljs-keyword">const</span> node &amp;o) <span class="hljs-keyword">const</span> &#123;<br>        <span class="hljs-keyword">return</span> x &lt; o.x;<br>    &#125;<br>&#125;a[N];<br><span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>);<br></code></pre></div></td></tr></table></figure><p>使用 Lambda 就可以这样写：</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-built_in">sort</span>(a + <span class="hljs-number">1</span>, a + n + <span class="hljs-number">1</span>, [](node a, node b)&#123;<span class="hljs-keyword">return</span> a.x &lt; b.x;&#125;);<br></code></pre></div></td></tr></table></figure><p>可以看到，Lambda 珂以使代码更加简洁易懂。</p><p>这里的 Lambda 也很好理解，<code>[]</code> 是 Lambda 的标识，也用来让 Lambda 使用外部变量，在下面的例子还会提到。</p><p><code>(node a, node b)</code> 是传入的参数，<code>&#123;return a.x &lt; b.x&#125;</code> 即函数主体，这与普通函数没有区别。</p><p>这个匿名函数省略的很多内容，但对于 Oier 来说也没有必要使用。<del>其实就是我不会</del></p><p>再来看第二个例子。</p><hr><p>想象这样的代码场景，多个循环嵌套，在一波操作后你需要直接跳出多重循环。这个问题也困扰了我一段时间，如何写得简洁优雅？</p><p>一种写法是定义布尔变量配合<code>break</code>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (...) &#123;<br><span class="hljs-keyword">bool</span> b = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (...) &#123;<br><span class="hljs-keyword">for</span> (...) &#123;<br>            <span class="hljs-keyword">if</span> (...) &#123;<br>b = <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (b) <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (b) <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>略丑 /jk。</p><p>也会有人使用 <code>goto</code>。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">for</span> (...) &#123;<br><span class="hljs-keyword">for</span> (...) &#123;<br><span class="hljs-keyword">for</span> (...) &#123;<br><span class="hljs-keyword">if</span> (...) <span class="hljs-keyword">goto</span> T;<br>        &#125;<br>    &#125;<br>&#125;<br>T:;<br></code></pre></div></td></tr></table></figure><p>这样就很美观，但我们都知道一位<del>老头</del>计算机科学家提出了 goto 有害论，所以用的时候总感觉很不爽，有种玩火焚身的感觉。那么 Lambda 表现如何呢？</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">[&amp;]() &#123;<br>    <span class="hljs-keyword">for</span> (...) &#123;<br><span class="hljs-keyword">for</span> (...) &#123;<br><span class="hljs-keyword">for</span> (...) &#123;<br><span class="hljs-keyword">if</span> (...) <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>&#125;<br>&#125;();<br></code></pre></div></td></tr></table></figure><p>将整个循环套在一个函数里，这样就可以直接使用 return 跳出。虽然比不上 <code>goto</code>简洁，但看起来还是很不错的。这里比刚才多了点东西，我们来康康。</p><p>中括号里面多了个<code>&amp;</code>这个符号用于使 Lambda 可以调用、更改函数外部的变量（闭包）；Lambda 外面多了个圆括号，这个很好理解，在定义完后直接调用函数。</p><p>这是两个简单的例子，现在您应该会使用简单的 Lambda 了吧。</p><p><del>再不会我也没办法了</del>        <del>我也就会那么多了</del></p><ul><li>补充一点，你可以这样写：</li></ul><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-keyword">auto</span> F = [](<span class="hljs-comment">/*...*/</span>)&#123;<span class="hljs-comment">/*...*/</span>&#125;;<br><span class="hljs-built_in">F</span>();<br></code></pre></div></td></tr></table></figure><h3 id="UPDATE-20-5-16"><a href="#UPDATE-20-5-16" class="headerlink" title="UPDATE 20.5.16"></a>UPDATE 20.5.16</h3><p>在那种状态很多、很多循环转移又很相似的 dp 题中，Lambda 配合 <code>#define rep</code> 有奇效。</p><p>e.g</p><p>AcWing 321.棋盘分割</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-keyword">int</span> <span class="hljs-title">read</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x = <span class="hljs-number">0</span>, f = <span class="hljs-number">0</span>; <span class="hljs-keyword">char</span> c = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (!<span class="hljs-built_in">isdigit</span>(c)) f |= c == <span class="hljs-string">&#x27;-&#x27;</span>, c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">isdigit</span>(c)) x = (x &lt;&lt; <span class="hljs-number">3</span>) + (x &lt;&lt; <span class="hljs-number">1</span>) + (c &amp; <span class="hljs-number">15</span>), c = <span class="hljs-built_in">getchar</span>();<br>    <span class="hljs-keyword">return</span> f ? -x : x;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> rep(i, a, b) for (int i = (a); i &lt;= (b); i ++)</span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> N 10</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> M 20</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> INF 1e9</span><br><br><span class="hljs-keyword">int</span> n, m, a[N][N], s[N][N];<br><span class="hljs-keyword">double</span> f[M][N][N][N][N];<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    n = <span class="hljs-number">8</span>, m = <span class="hljs-built_in">read</span>() - <span class="hljs-number">1</span>;<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) s[i][j] = a[i][j] = <span class="hljs-built_in">read</span>();<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) s[i][j] += s[i - <span class="hljs-number">1</span>][j] + s[i][j - <span class="hljs-number">1</span>] - s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">double</span> bX = <span class="hljs-number">1.0</span> * s[n][n] / (m + <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(k, i, n) <span class="hljs-built_in">rep</span>(l, j, n) &#123;<br>        f[<span class="hljs-number">0</span>][i][j][k][l] = s[k][l] - s[i - <span class="hljs-number">1</span>][l] - s[k][j - <span class="hljs-number">1</span>] + s[i - <span class="hljs-number">1</span>][j - <span class="hljs-number">1</span>] - bX;<br>        f[<span class="hljs-number">0</span>][i][j][k][l] = f[<span class="hljs-number">0</span>][i][j][k][l] * f[<span class="hljs-number">0</span>][i][j][k][l];<br>    &#125;<br><br>    <span class="hljs-built_in">rep</span>(d, <span class="hljs-number">1</span>, m) <span class="hljs-built_in">rep</span>(len, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(i, <span class="hljs-number">1</span>, n) <span class="hljs-built_in">rep</span>(j, <span class="hljs-number">1</span>, n) &#123;<br>        <span class="hljs-keyword">auto</span> F = [&amp;f, &amp;s](<span class="hljs-keyword">int</span> d, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> j, <span class="hljs-keyword">int</span> k, <span class="hljs-keyword">int</span> l) &#123;<br>            <span class="hljs-keyword">double</span> &amp;now = f[d][i][j][k][l]; now = INF;<br>            <span class="hljs-built_in">rep</span>(a, i, k - <span class="hljs-number">1</span>) &#123;<br>                now = <span class="hljs-built_in">min</span>(now, f[d - <span class="hljs-number">1</span>][i][j][a][l] + f[<span class="hljs-number">0</span>][a + <span class="hljs-number">1</span>][j][k][l]);<br>                now = <span class="hljs-built_in">min</span>(now, f[<span class="hljs-number">0</span>][i][j][a][l] + f[d - <span class="hljs-number">1</span>][a + <span class="hljs-number">1</span>][j][k][l]);<br>            &#125;<br>            <span class="hljs-built_in">rep</span>(b, j, l - <span class="hljs-number">1</span>) &#123;<br>                now = <span class="hljs-built_in">min</span>(now, f[d - <span class="hljs-number">1</span>][i][j][k][b] + f[<span class="hljs-number">0</span>][i][b + <span class="hljs-number">1</span>][k][l]);<br>                now = <span class="hljs-built_in">min</span>(now, f[<span class="hljs-number">0</span>][i][j][k][b] + f[d - <span class="hljs-number">1</span>][i][b + <span class="hljs-number">1</span>][k][l]);<br>            &#125;<br>        &#125;;<br>        <span class="hljs-keyword">if</span> (j + len - <span class="hljs-number">1</span> &lt;= n) <span class="hljs-built_in">rep</span>(k, i, n) <span class="hljs-built_in">F</span>(d, i, j, k, j + len - <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">if</span> (i + len - <span class="hljs-number">1</span> &lt;= n) <span class="hljs-built_in">rep</span>(l, j, n) <span class="hljs-built_in">F</span>(d, i, j, i + len - <span class="hljs-number">1</span>, l);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%.3lf\n&quot;</span>, <span class="hljs-built_in">sqrt</span>(f[m][<span class="hljs-number">1</span>][<span class="hljs-number">1</span>][n][n] / (m + <span class="hljs-number">1</span>)));<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>c++14</tag>
      
      <tag>Lambda</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一个改变AcWing代码主题的样式</title>
    <link href="/36783/"/>
    <url>/36783/</url>
    
    <content type="html"><![CDATA[<h1 id="update-2022-3-27-这玩意跟一坨-shit-一样"><a href="#update-2022-3-27-这玩意跟一坨-shit-一样" class="headerlink" title="update 2022/3/27 : 这玩意跟一坨 shit 一样"></a>update 2022/3/27 : 这玩意跟一坨 shit 一样</h1><p>AcWing 自带的代码编辑器主题并不支持高度个性化，云端编辑器主题也改不了，用起来非常不爽 \jk 。</p><span id="more"></span><p>所以我就瞎折腾了一段时间，搞了一个改变 AcWing 题目下方编辑器 、AC Editor 、Markdown 代码框的样式。</p><p>效果珂以康这里：<del>百万特效</del></p><p><img src="/img/2.bmp" alt=""></p><p>需要浏览器扩展 Stylish / Stylus ，不会使用的可以康<a href="https://www.luogu.com.cn/blog/YunQian/stylishstylus-wo-di-liu-lan-qi-wo-zuo-zhu">这里</a> 。</p><p>本人并不怎么会 CSS，写的全是辣鸡代码，珂能有非常多的 BUG，但我用下来也还能接受。</p><p>会覆盖所有原生主题， <del>（但建议选择 Monokai，防止一些我也不知道的奇奇怪怪的问题）</del> 想使用原生主题请自行关闭样式。</p><p>样式目前只自带 Mariana 、Darcula、Obsidian ，当然你可以通过更改颜色来个性化新主题，修改主题只需要把<code>:root&#123;...&#125;</code>的内容更改即可。</p><p>源码（三个主题都在里面，<strong>全部都注释了，所以直接使用会一片白</strong>，想用那个去掉注释即可）。</p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++"><span class="hljs-comment">/* ==UserStyle==</span><br><span class="hljs-comment">@name           Bace</span><br><span class="hljs-comment">@namespace      USO Archive</span><br><span class="hljs-comment">@author         歪逼</span><br><span class="hljs-comment">@description    改变 AcWing 题目下方编辑器主题</span><br><span class="hljs-comment">@version        2.6</span><br><span class="hljs-comment">@license        NO-REDISTRIBUTION</span><br><span class="hljs-comment">@preprocessor   uso</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">==/UserStyle== */</span><br><span class="hljs-comment">/* Mariana */</span><br><span class="hljs-comment">/* :root &#123;</span><br><span class="hljs-comment">    --normal-font: rgb(230, 230, 230);</span><br><span class="hljs-comment">    --left-and-right-paren: rgb(230, 230, 230);</span><br><span class="hljs-comment">    --keyword: rgb(198, 149, 198);</span><br><span class="hljs-comment">    --number-and-angle-brackets: rgb(239, 165, 79);</span><br><span class="hljs-comment">    --things-in-qutation-marks: rgb(153, 199, 148);</span><br><span class="hljs-comment">    --define-var-and-function: rgb(198, 149, 198);</span><br><span class="hljs-comment">    --using-function: rgb(102, 153, 204);</span><br><span class="hljs-comment">    --qutation-marks: rgb(96, 180, 180);</span><br><span class="hljs-comment">    --operator: rgb(249, 123, 87);</span><br><span class="hljs-comment">    --comma-and-semicolons: rgb(166, 172, 185);</span><br><span class="hljs-comment">    --note: rgb(166, 172, 185);</span><br><span class="hljs-comment">    --background: rgb(48, 56, 65);</span><br><span class="hljs-comment">    --text-that-choosed: rgb(67, 76, 87);</span><br><span class="hljs-comment">    --line-that-cursor-in: rgb(48, 56, 65);</span><br><span class="hljs-comment">    --font-of-row-number: rgb(132, 139, 149);</span><br><span class="hljs-comment">    --background-of-row-number: rgb(48, 56, 65);</span><br><span class="hljs-comment">    --bu-hui-fan-yi: rgb(76, 88, 99);</span><br><span class="hljs-comment">    --you-bu-hui-fan: rgb(132, 139, 149);</span><br><span class="hljs-comment">    --hljs-keyword: rgb(198, 149, 198);</span><br><span class="hljs-comment">    --hljs-meta: rgb(198, 149, 198);</span><br><span class="hljs-comment">    --hljs-meta-keyword: rgb(198, 149, 198);</span><br><span class="hljs-comment">    --hljs-meta-string: rgb(153, 199, 148);</span><br><span class="hljs-comment">    --hljs-title: rgb(96, 180, 180);</span><br><span class="hljs-comment">    --hljs-comment: rgb(166, 172, 185);</span><br><span class="hljs-comment">    --hljs-built_in: rgb(102, 153, 204);</span><br><span class="hljs-comment">    --hljs-string: rgb(153, 199, 148);</span><br><span class="hljs-comment">    --hljs-number: rgb(239, 165, 79);</span><br><span class="hljs-comment">    --hljs-function: rgb(198, 149, 198);</span><br><span class="hljs-comment">    --hljs-params: rgb(230, 230, 230);</span><br><span class="hljs-comment">    --hljs-code: rgb(230, 230, 230);</span><br><span class="hljs-comment">    --hljs-cpp-background: rgb(48, 56, 65);</span><br><span class="hljs-comment">    --hljs-literal: rgb(236, 96, 102);</span><br><span class="hljs-comment">    --hljs-selection: rgb(67, 76, 87);</span><br><span class="hljs-comment">&#125; */</span><br><span class="hljs-comment">/* Darcula */</span><br><span class="hljs-comment">/* :root &#123;</span><br><span class="hljs-comment">    --normal-font : #a9b7c6;</span><br><span class="hljs-comment">    --left-and-right-paren : #a9b7c6;</span><br><span class="hljs-comment">    --keyword : #cc7832;</span><br><span class="hljs-comment">    --number-and-angle-brackets : #6897bb;</span><br><span class="hljs-comment">    --things-in-qutation-marks : rgb(105,134,88);</span><br><span class="hljs-comment">    --define-var-and-function : #cc7832;</span><br><span class="hljs-comment">    --using-function : #a9b7c6;</span><br><span class="hljs-comment">    --qutation-marks : #6a8759;</span><br><span class="hljs-comment">    --operator : #a9b7c6;</span><br><span class="hljs-comment">    --comma-and-semicolons : #cc7832;</span><br><span class="hljs-comment">    --note : #787878;</span><br><span class="hljs-comment">    --background : rgb(43,43,43);</span><br><span class="hljs-comment">    --text-that-choosed : rgb(33,66,131);</span><br><span class="hljs-comment">    --line-that-cursor-in : rgb(50,50,50);</span><br><span class="hljs-comment">    --font-of-row-number : rgb(92,97,99);</span><br><span class="hljs-comment">    --background-of-row-number : rgb(49,51,53);</span><br><span class="hljs-comment">    --bu-hui-fan-yi : rgb(50,50,50);</span><br><span class="hljs-comment">    --you-bu-hui-fan : rgb(155, 155, 155);</span><br><span class="hljs-comment">    --hljs-keyword : #cc7832;</span><br><span class="hljs-comment">    --hljs-meta : #6a8759;</span><br><span class="hljs-comment">    --hljs-meta-keyword : #cc7832;</span><br><span class="hljs-comment">    --hljs-meta-string : #cc7832;</span><br><span class="hljs-comment">    --hljs-title : rgb(254,171,75);</span><br><span class="hljs-comment">    --hljs-comment : #787878;</span><br><span class="hljs-comment">    --hljs-built_in : #a9b7c6;</span><br><span class="hljs-comment">    --hljs-string : rgb(105,134,88);</span><br><span class="hljs-comment">    --hljs-number : #6897bb;</span><br><span class="hljs-comment">    --hljs-function : #cc7832;</span><br><span class="hljs-comment">    --hljs-params : #a9b7c6;</span><br><span class="hljs-comment">    --hljs-code : #a9b7c6;</span><br><span class="hljs-comment">    --hljs-cpp-background : rgb(43,43,43);</span><br><span class="hljs-comment">    --hljs-literal : #6897bb;</span><br><span class="hljs-comment">    --hljs-selection :  rgb(33,66,131);</span><br><span class="hljs-comment">&#125; */</span><br><span class="hljs-comment">/* Obsidian */</span><br><span class="hljs-comment">/* :root &#123;</span><br><span class="hljs-comment">    --normal-font : rgb(224, 226, 228);</span><br><span class="hljs-comment">    --left-and-right-paren : rgb(232, 226, 183);</span><br><span class="hljs-comment">    --keyword : rgb(160, 130, 189);</span><br><span class="hljs-comment">    --number-and-angle-brackets : rgb(255, 205, 34);</span><br><span class="hljs-comment">    --things-in-qutation-marks : rgb(236, 118, 0);</span><br><span class="hljs-comment">    --define-var-and-function : rgb(103, 140, 177);</span><br><span class="hljs-comment">    --using-function : rgb(103, 140, 177);</span><br><span class="hljs-comment">    --qutation-marks : rgb(236, 118, 0);</span><br><span class="hljs-comment">    --operator : rgb(232, 226, 183);</span><br><span class="hljs-comment">    --comma-and-semicolons : rgb(232, 226, 183);</span><br><span class="hljs-comment">    --note : rgb(102, 116, 123);</span><br><span class="hljs-comment">    --background : rgb(41, 49, 52);</span><br><span class="hljs-comment">    --text-that-choosed : rgb(64, 78, 81);</span><br><span class="hljs-comment">    --line-that-cursor-in : rgb(0, 0, 0);</span><br><span class="hljs-comment">    --font-of-row-number : rgb(106, 128, 136);</span><br><span class="hljs-comment">    --background-of-row-number : rgb(47, 56, 60);</span><br><span class="hljs-comment">    --bu-hui-fan-yi : rgb(47, 56, 60);</span><br><span class="hljs-comment">    --you-bu-hui-fan : rgb(106, 128, 136);</span><br><span class="hljs-comment">    --hljs-keyword : rgb(103, 140, 177);</span><br><span class="hljs-comment">    --hljs-meta : rgb(160, 130, 189);</span><br><span class="hljs-comment">    --hljs-meta-keyword : rgb(160, 130, 189);</span><br><span class="hljs-comment">    --hljs-meta-string : rgb(255, 205, 34);</span><br><span class="hljs-comment">    --hljs-title : rgb(224, 226, 228);</span><br><span class="hljs-comment">    --hljs-comment : rgb(102, 116, 123);</span><br><span class="hljs-comment">    --hljs-built_in : rgb(160, 130, 189);</span><br><span class="hljs-comment">    --hljs-string : rgb(236, 118, 0);</span><br><span class="hljs-comment">    --hljs-number : rgb(255, 205, 34);</span><br><span class="hljs-comment">    --hljs-function : rgb(160, 130, 189);</span><br><span class="hljs-comment">    --hljs-params : rgb(224, 226, 228);</span><br><span class="hljs-comment">    --hljs-code : rgb(224, 226, 228);</span><br><span class="hljs-comment">    --hljs-cpp-background : rgb(41, 49, 52);</span><br><span class="hljs-comment">    --hljs-literal : rgb(255, 205, 34);</span><br><span class="hljs-comment">    --hljs-selection : rgb(64, 78, 81);</span><br><span class="hljs-comment">&#125; */</span><br>.ace_identifier &#123;<br>    <span class="hljs-comment">/*普通字*/</span><br>    color: <span class="hljs-built_in">var</span>(--normal-font) !important;<br>&#125;<br>.ace_paren.ace_lparen,<br>.ace_paren.ace_rparen &#123;<br>    <span class="hljs-comment">/*左右括号*/</span><br>    color: <span class="hljs-built_in">var</span>(--left-<span class="hljs-keyword">and</span>-right-paren) !important;<br>&#125;<br>.ace_keyword,<br>.ace_meta.ace_tag,<br>.ace_storage &#123;<br>    <span class="hljs-comment">/* 关键字*/</span><br>    color: <span class="hljs-built_in">var</span>(--keyword) !important;<br>&#125;<br>.ace_constant.ace_character,<br>.ace_constant.ace_other,<br>.ace_constant.ace_numeric &#123;<br>    <span class="hljs-comment">/* 数字、尖括号内容*/</span><br>    color: <span class="hljs-built_in">var</span>(--number-<span class="hljs-keyword">and</span>-angle-brackets) !important;<br>&#125;<br>.ace_constant.ace_language,<br>.ace_string &#123;<br>    <span class="hljs-comment">/*引号内容*/</span><br>    color: <span class="hljs-built_in">var</span>(--things-in-qutation-marks) !important;<br>&#125;<br>.ace_storage.ace_type,<br>.ace_support.ace_class,<br>.ace_support.ace_type &#123;<br>    <span class="hljs-comment">/*变量、函数定义*/</span><br>    color: <span class="hljs-built_in">var</span>(--define-var-<span class="hljs-keyword">and</span>-function) !important;<br>&#125;<br>.ace_support.ace_function &#123;<br>    <span class="hljs-comment">/* 函数调用*/</span><br>    color: <span class="hljs-built_in">var</span>(--<span class="hljs-keyword">using</span>-function) !important;<br>&#125;<br>.ace_string.ace_start,<br>.ace_string.ace_end &#123;<br>     <span class="hljs-comment">/* 引号*/</span><br>    color: <span class="hljs-built_in">var</span>(--qutation-marks) !important;<br>&#125;<br>.ace_operator &#123;<br>    <span class="hljs-comment">/* 运算符*/</span><br>    color: <span class="hljs-built_in">var</span>(--<span class="hljs-keyword">operator</span>) !important;<br>&#125;<br>.ace_punctuation &#123;<br>    <span class="hljs-comment">/* 逗号分号*/</span><br>    color: <span class="hljs-built_in">var</span>(--comma-<span class="hljs-keyword">and</span>-semicolons) !important;<br>&#125;<br>.ace_comment &#123;<br>    <span class="hljs-comment">/* 注释*/</span><br>    color: <span class="hljs-built_in">var</span>(--note) !important;<br>&#125;<br>.ace-monokai,<br>.ace_scroller &#123;<br>    <span class="hljs-comment">/* 背景*/</span><br>    background-color: <span class="hljs-built_in">var</span>(--background) !important;<br>&#125;<br>.ace_selection &#123;<br>    <span class="hljs-comment">/*选中文本背景颜色*/</span><br>    background: <span class="hljs-built_in">var</span>(--text-that-choosed) !important;<br>&#125;<br>.ace_marker-layer .ace_active-line &#123;<br>    <span class="hljs-comment">/* 光标所在行背景颜色 */</span><br>    background: <span class="hljs-built_in">var</span>(--line-that-cursor-in) !important;<br>&#125;<br>.ace_gutter-cell,<br>.ace_gutter &#123;<br>    <span class="hljs-comment">/* 行数显示栏字体*/</span><br>    color: <span class="hljs-built_in">var</span>(--font-of-row-number) !important;<br>    <span class="hljs-comment">/* 行数显示栏背景*/</span><br>    background: <span class="hljs-built_in">var</span>(--background-of-row-number) !important;<br>&#125;<br>.ace-tm .ace_cursor &#123;<br>    <span class="hljs-comment">/*光标颜色*/</span><br>    color : white!important;<br>&#125;<br>.ace_text &#123;<br>    color: <span class="hljs-built_in">var</span>(--normal-font) !important;<br>&#125;<br>.ace_gutter-active-line &#123;<br>    <span class="hljs-comment">/* 光标所在行行数显示栏颜色修改 */</span><br>    background-color: <span class="hljs-built_in">var</span>(--bu-hui-fan-yi) !important;<br>    color: <span class="hljs-built_in">var</span>(--you-bu-hui-fan) !important;<br>&#125;<br>.ace-tm .ace_indent-guide &#123;<br>    <span class="hljs-comment">/*对齐线（因为不会改所以就把它删掉了/kk*/</span><br>    background:<span class="hljs-built_in">url</span>() right repeat-y;<br>&#125;<br><span class="hljs-comment">/* 一下为 Markdown 代码框的主题修改 */</span><br>.hljs-keyword &#123;<br>    <span class="hljs-comment">/* 关键字 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-keyword) !important;<br>&#125;<br>.hljs-meta,<br>.hljs-section &#123;<br>    <span class="hljs-comment">/* include 的 # 和 define 、 typedef 的一些东西 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-meta) !important;<br>&#125;<br>.hljs-meta-keyword &#123;<br>    <span class="hljs-comment">/* 定义函数时的函数名 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-meta-keyword) !important;<br>&#125;<br>.hljs-meta-string &#123;<br>    <span class="hljs-comment">/* 定义函数时的变量 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-meta-string) !important;<br>&#125;<br>.hljs-function &#123;<br>    <span class="hljs-comment">/* 定义函数*/</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-function) !important;<br>&#125;<br>.hljs-title &#123;<br>    <span class="hljs-comment">/* 定义函数时的函数名 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-title) !important;<br>&#125;<br>.hljs-params &#123;<br>    <span class="hljs-comment">/* 定义函数时的变量名 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-params) !important;<br>&#125;<br>.hljs-comment &#123;<br>    <span class="hljs-comment">/* 注释 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-comment) !important;<br>&#125;<br>.hljs-built_in &#123;<br>    <span class="hljs-comment">/* 不知道是什么awwa，但会影响 &quot;std&quot; 的颜色 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-built_in) !important;<br>&#125;<br>.hljs-string &#123;<br>    <span class="hljs-comment">/* 引号内容，但好像数组定义也会变成这个颜色 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-string) !important;<br>&#125;<br>.hljs-number,<br>.hljs-symbol &#123;<br>    <span class="hljs-comment">/* 数字 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-number) !important;<br>&#125;<br>.hljs-literal &#123;<br>    <span class="hljs-comment">/* 不清楚，但影响 &quot;ios::sync_with_stdio(false)&quot; 的 false */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-literal) !important;<br>&#125;<br>pre.hljs,<br>pre.hljs.cpp,<br>pre.hljs.perl,<br>pre.hljs.ruby,<br>pre.hljs.cs,<br>pre.hljs.makefile,<br>pre.hljs.bash,<br>pre.hljs.markdown &#123;<br>    <span class="hljs-comment">/* 背景 */</span><br>    color: <span class="hljs-built_in">var</span>(--hljs-code) !important;<br>    background: <span class="hljs-built_in">var</span>(--hljs-cpp-background) !important;<br>&#125;<br>.hljs-keyword::selection,<br>.hljs-meta::selection,<br>.hljs-meta-keyword::selection,<br>.hljs-meta-string::selection,<br>.hljs-function::selection,<br>.hljs-title::selection,<br>.hljs-params::selection,<br>.hljs-comment::selection,<br>.hljs-built_in::selection,<br>.hljs-string::selection,<br>.hljs-number::selection,<br>.hljs-literal::selection,<br>.hljs-code::selection,<br>.hljs-symbol::selection,<br>code::selection &#123;<br>    <span class="hljs-comment">/* 选中字 */</span><br>    background: <span class="hljs-built_in">var</span>(--hljs-selection)!important;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><del>应该没人会用吧。</del></p>]]></content>
    
    
    <categories>
      
      <category>水</category>
      
    </categories>
    
    
    <tags>
      
      <tag>css</tag>
      
      <tag>Stylish</tag>
      
      <tag>acwing</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终于折腾好了\jk</title>
    <link href="/22243/"/>
    <url>/22243/</url>
    
    <content type="html"><![CDATA[<h1 id="aha"><a href="#aha" class="headerlink" title="aha"></a>aha</h1><h2 id="aha-1"><a href="#aha-1" class="headerlink" title="aha"></a>aha</h2><h3 id="aha-2"><a href="#aha-2" class="headerlink" title="aha"></a>aha</h3><h4 id="aha-3"><a href="#aha-3" class="headerlink" title="aha"></a>aha</h4><h5 id="aha-4"><a href="#aha-4" class="headerlink" title="aha"></a>aha</h5><h6 id="aha-5"><a href="#aha-5" class="headerlink" title="aha"></a>aha</h6><p><code>aha</code></p><p><strong>aha</strong></p><p><em>aha</em></p><p><del>aha</del></p><p>$\sum aha$</p><script type="math/tex; mode=display">\sum aha</script><blockquote><p>aha</p></blockquote><ul><li>aha<ul><li>aha</li><li>aha</li></ul></li><li>aha</li></ul>]]></content>
    
    
    <categories>
      
      <category>杂</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
